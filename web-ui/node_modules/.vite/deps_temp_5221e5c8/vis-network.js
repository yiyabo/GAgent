import {
  DataSet,
  isDataViewLike
} from "./chunk-CQF7WHAH.js";
import "./chunk-5WWUZCGV.js";

// node_modules/vis-network/peer/esm/vis-network.js
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var check = function(it2) {
  return it2 && it2.Math === Math && it2;
};
var global$n = (
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
  function() {
    return this;
  }() || commonjsGlobal || Function("return this")()
);
var fails$v = function(exec2) {
  try {
    return !!exec2();
  } catch (error) {
    return true;
  }
};
var fails$u = fails$v;
var functionBindNative = !fails$u(function() {
  var test2 = (function() {
  }).bind();
  return typeof test2 != "function" || test2.hasOwnProperty("prototype");
});
var NATIVE_BIND$4 = functionBindNative;
var FunctionPrototype$4 = Function.prototype;
var apply$4 = FunctionPrototype$4.apply;
var call$d = FunctionPrototype$4.call;
var functionApply = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$4 ? call$d.bind(apply$4) : function() {
  return call$d.apply(apply$4, arguments);
});
var NATIVE_BIND$3 = functionBindNative;
var FunctionPrototype$3 = Function.prototype;
var call$c = FunctionPrototype$3.call;
var uncurryThisWithBind = NATIVE_BIND$3 && FunctionPrototype$3.bind.bind(call$c, call$c);
var functionUncurryThis = NATIVE_BIND$3 ? uncurryThisWithBind : function(fn) {
  return function() {
    return call$c.apply(fn, arguments);
  };
};
var uncurryThis$x = functionUncurryThis;
var toString$c = uncurryThis$x({}.toString);
var stringSlice$1 = uncurryThis$x("".slice);
var classofRaw$2 = function(it2) {
  return stringSlice$1(toString$c(it2), 8, -1);
};
var classofRaw$1 = classofRaw$2;
var uncurryThis$w = functionUncurryThis;
var functionUncurryThisClause = function(fn) {
  if (classofRaw$1(fn) === "Function")
    return uncurryThis$w(fn);
};
var documentAll$2 = typeof document == "object" && document.all;
var IS_HTMLDDA = typeof documentAll$2 == "undefined" && documentAll$2 !== void 0;
var documentAll_1 = {
  all: documentAll$2,
  IS_HTMLDDA
};
var $documentAll$1 = documentAll_1;
var documentAll$1 = $documentAll$1.all;
var isCallable$h = $documentAll$1.IS_HTMLDDA ? function(argument) {
  return typeof argument == "function" || argument === documentAll$1;
} : function(argument) {
  return typeof argument == "function";
};
var objectGetOwnPropertyDescriptor = {};
var fails$t = fails$v;
var descriptors = !fails$t(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] !== 7;
});
var NATIVE_BIND$2 = functionBindNative;
var call$b = Function.prototype.call;
var functionCall = NATIVE_BIND$2 ? call$b.bind(call$b) : function() {
  return call$b.apply(call$b, arguments);
};
var objectPropertyIsEnumerable = {};
var $propertyIsEnumerable$2 = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor$6 = Object.getOwnPropertyDescriptor;
var NASHORN_BUG = getOwnPropertyDescriptor$6 && !$propertyIsEnumerable$2.call({ 1: 2 }, 1);
objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$6(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable$2;
var createPropertyDescriptor$5 = function(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value
  };
};
var uncurryThis$v = functionUncurryThis;
var fails$s = fails$v;
var classof$e = classofRaw$2;
var $Object$5 = Object;
var split = uncurryThis$v("".split);
var indexedObject = fails$s(function() {
  return !$Object$5("z").propertyIsEnumerable(0);
}) ? function(it2) {
  return classof$e(it2) === "String" ? split(it2, "") : $Object$5(it2);
} : $Object$5;
var isNullOrUndefined$6 = function(it2) {
  return it2 === null || it2 === void 0;
};
var isNullOrUndefined$5 = isNullOrUndefined$6;
var $TypeError$e = TypeError;
var requireObjectCoercible$5 = function(it2) {
  if (isNullOrUndefined$5(it2))
    throw new $TypeError$e("Can't call method on " + it2);
  return it2;
};
var IndexedObject$3 = indexedObject;
var requireObjectCoercible$4 = requireObjectCoercible$5;
var toIndexedObject$b = function(it2) {
  return IndexedObject$3(requireObjectCoercible$4(it2));
};
var isCallable$g = isCallable$h;
var $documentAll = documentAll_1;
var documentAll = $documentAll.all;
var isObject$h = $documentAll.IS_HTMLDDA ? function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$g(it2) || it2 === documentAll;
} : function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$g(it2);
};
var path$t = {};
var path$s = path$t;
var global$m = global$n;
var isCallable$f = isCallable$h;
var aFunction = function(variable) {
  return isCallable$f(variable) ? variable : void 0;
};
var getBuiltIn$b = function(namespace, method2) {
  return arguments.length < 2 ? aFunction(path$s[namespace]) || aFunction(global$m[namespace]) : path$s[namespace] && path$s[namespace][method2] || global$m[namespace] && global$m[namespace][method2];
};
var uncurryThis$u = functionUncurryThis;
var objectIsPrototypeOf = uncurryThis$u({}.isPrototypeOf);
var engineUserAgent = typeof navigator != "undefined" && String(navigator.userAgent) || "";
var global$l = global$n;
var userAgent$2 = engineUserAgent;
var process = global$l.process;
var Deno = global$l.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match;
var version;
if (v8) {
  match = v8.split(".");
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}
if (!version && userAgent$2) {
  match = userAgent$2.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent$2.match(/Chrome\/(\d+)/);
    if (match)
      version = +match[1];
  }
}
var engineV8Version = version;
var V8_VERSION$2 = engineV8Version;
var fails$r = fails$v;
var global$k = global$n;
var $String$4 = global$k.String;
var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$r(function() {
  var symbol2 = Symbol("symbol detection");
  return !$String$4(symbol2) || !(Object(symbol2) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;
});
var NATIVE_SYMBOL$5 = symbolConstructorDetection;
var useSymbolAsUid = NATIVE_SYMBOL$5 && !Symbol.sham && typeof Symbol.iterator == "symbol";
var getBuiltIn$a = getBuiltIn$b;
var isCallable$e = isCallable$h;
var isPrototypeOf$j = objectIsPrototypeOf;
var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
var $Object$4 = Object;
var isSymbol$5 = USE_SYMBOL_AS_UID$1 ? function(it2) {
  return typeof it2 == "symbol";
} : function(it2) {
  var $Symbol2 = getBuiltIn$a("Symbol");
  return isCallable$e($Symbol2) && isPrototypeOf$j($Symbol2.prototype, $Object$4(it2));
};
var $String$3 = String;
var tryToString$5 = function(argument) {
  try {
    return $String$3(argument);
  } catch (error) {
    return "Object";
  }
};
var isCallable$d = isCallable$h;
var tryToString$4 = tryToString$5;
var $TypeError$d = TypeError;
var aCallable$6 = function(argument) {
  if (isCallable$d(argument))
    return argument;
  throw new $TypeError$d(tryToString$4(argument) + " is not a function");
};
var aCallable$5 = aCallable$6;
var isNullOrUndefined$4 = isNullOrUndefined$6;
var getMethod$3 = function(V, P) {
  var func = V[P];
  return isNullOrUndefined$4(func) ? void 0 : aCallable$5(func);
};
var call$a = functionCall;
var isCallable$c = isCallable$h;
var isObject$g = isObject$h;
var $TypeError$c = TypeError;
var ordinaryToPrimitive$1 = function(input, pref) {
  var fn, val;
  if (pref === "string" && isCallable$c(fn = input.toString) && !isObject$g(val = call$a(fn, input)))
    return val;
  if (isCallable$c(fn = input.valueOf) && !isObject$g(val = call$a(fn, input)))
    return val;
  if (pref !== "string" && isCallable$c(fn = input.toString) && !isObject$g(val = call$a(fn, input)))
    return val;
  throw new $TypeError$c("Can't convert object to primitive value");
};
var shared$7 = { exports: {} };
var global$j = global$n;
var defineProperty$f = Object.defineProperty;
var defineGlobalProperty$1 = function(key, value) {
  try {
    defineProperty$f(global$j, key, { value, configurable: true, writable: true });
  } catch (error) {
    global$j[key] = value;
  }
  return value;
};
var global$i = global$n;
var defineGlobalProperty = defineGlobalProperty$1;
var SHARED = "__core-js_shared__";
var store$3 = global$i[SHARED] || defineGlobalProperty(SHARED, {});
var sharedStore = store$3;
var store$2 = sharedStore;
(shared$7.exports = function(key, value) {
  return store$2[key] || (store$2[key] = value !== void 0 ? value : {});
})("versions", []).push({
  version: "3.33.0",
  mode: "pure",
  copyright: "Â© 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var sharedExports = shared$7.exports;
var requireObjectCoercible$3 = requireObjectCoercible$5;
var $Object$3 = Object;
var toObject$c = function(argument) {
  return $Object$3(requireObjectCoercible$3(argument));
};
var uncurryThis$t = functionUncurryThis;
var toObject$b = toObject$c;
var hasOwnProperty = uncurryThis$t({}.hasOwnProperty);
var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it2, key) {
  return hasOwnProperty(toObject$b(it2), key);
};
var uncurryThis$s = functionUncurryThis;
var id$2 = 0;
var postfix = Math.random();
var toString$b = uncurryThis$s(1 .toString);
var uid$4 = function(key) {
  return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString$b(++id$2 + postfix, 36);
};
var global$h = global$n;
var shared$6 = sharedExports;
var hasOwn$g = hasOwnProperty_1;
var uid$3 = uid$4;
var NATIVE_SYMBOL$4 = symbolConstructorDetection;
var USE_SYMBOL_AS_UID = useSymbolAsUid;
var Symbol$5 = global$h.Symbol;
var WellKnownSymbolsStore$2 = shared$6("wks");
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$5["for"] || Symbol$5 : Symbol$5 && Symbol$5.withoutSetter || uid$3;
var wellKnownSymbol$l = function(name) {
  if (!hasOwn$g(WellKnownSymbolsStore$2, name)) {
    WellKnownSymbolsStore$2[name] = NATIVE_SYMBOL$4 && hasOwn$g(Symbol$5, name) ? Symbol$5[name] : createWellKnownSymbol("Symbol." + name);
  }
  return WellKnownSymbolsStore$2[name];
};
var call$9 = functionCall;
var isObject$f = isObject$h;
var isSymbol$4 = isSymbol$5;
var getMethod$2 = getMethod$3;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol$k = wellKnownSymbol$l;
var $TypeError$b = TypeError;
var TO_PRIMITIVE = wellKnownSymbol$k("toPrimitive");
var toPrimitive$6 = function(input, pref) {
  if (!isObject$f(input) || isSymbol$4(input))
    return input;
  var exoticToPrim = getMethod$2(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === void 0)
      pref = "default";
    result = call$9(exoticToPrim, input, pref);
    if (!isObject$f(result) || isSymbol$4(result))
      return result;
    throw new $TypeError$b("Can't convert object to primitive value");
  }
  if (pref === void 0)
    pref = "number";
  return ordinaryToPrimitive(input, pref);
};
var toPrimitive$5 = toPrimitive$6;
var isSymbol$3 = isSymbol$5;
var toPropertyKey$4 = function(argument) {
  var key = toPrimitive$5(argument, "string");
  return isSymbol$3(key) ? key : key + "";
};
var global$g = global$n;
var isObject$e = isObject$h;
var document$1 = global$g.document;
var EXISTS$1 = isObject$e(document$1) && isObject$e(document$1.createElement);
var documentCreateElement$1 = function(it2) {
  return EXISTS$1 ? document$1.createElement(it2) : {};
};
var DESCRIPTORS$i = descriptors;
var fails$q = fails$v;
var createElement = documentCreateElement$1;
var ie8DomDefine = !DESCRIPTORS$i && !fails$q(function() {
  return Object.defineProperty(createElement("div"), "a", {
    get: function() {
      return 7;
    }
  }).a !== 7;
});
var DESCRIPTORS$h = descriptors;
var call$8 = functionCall;
var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
var createPropertyDescriptor$4 = createPropertyDescriptor$5;
var toIndexedObject$a = toIndexedObject$b;
var toPropertyKey$3 = toPropertyKey$4;
var hasOwn$f = hasOwnProperty_1;
var IE8_DOM_DEFINE$1 = ie8DomDefine;
var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
objectGetOwnPropertyDescriptor.f = DESCRIPTORS$h ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject$a(O);
  P = toPropertyKey$3(P);
  if (IE8_DOM_DEFINE$1)
    try {
      return $getOwnPropertyDescriptor$2(O, P);
    } catch (error) {
    }
  if (hasOwn$f(O, P))
    return createPropertyDescriptor$4(!call$8(propertyIsEnumerableModule$2.f, O, P), O[P]);
};
var fails$p = fails$v;
var isCallable$b = isCallable$h;
var replacement = /#|\.prototype\./;
var isForced$1 = function(feature, detection) {
  var value = data[normalize(feature)];
  return value === POLYFILL ? true : value === NATIVE ? false : isCallable$b(detection) ? fails$p(detection) : !!detection;
};
var normalize = isForced$1.normalize = function(string2) {
  return String(string2).replace(replacement, ".").toLowerCase();
};
var data = isForced$1.data = {};
var NATIVE = isForced$1.NATIVE = "N";
var POLYFILL = isForced$1.POLYFILL = "P";
var isForced_1 = isForced$1;
var uncurryThis$r = functionUncurryThisClause;
var aCallable$4 = aCallable$6;
var NATIVE_BIND$1 = functionBindNative;
var bind$9 = uncurryThis$r(uncurryThis$r.bind);
var functionBindContext = function(fn, that) {
  aCallable$4(fn);
  return that === void 0 ? fn : NATIVE_BIND$1 ? bind$9(fn, that) : function() {
    return fn.apply(that, arguments);
  };
};
var objectDefineProperty = {};
var DESCRIPTORS$g = descriptors;
var fails$o = fails$v;
var v8PrototypeDefineBug = DESCRIPTORS$g && fails$o(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: false
  }).prototype !== 42;
});
var isObject$d = isObject$h;
var $String$2 = String;
var $TypeError$a = TypeError;
var anObject$9 = function(argument) {
  if (isObject$d(argument))
    return argument;
  throw new $TypeError$a($String$2(argument) + " is not an object");
};
var DESCRIPTORS$f = descriptors;
var IE8_DOM_DEFINE = ie8DomDefine;
var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
var anObject$8 = anObject$9;
var toPropertyKey$2 = toPropertyKey$4;
var $TypeError$9 = TypeError;
var $defineProperty$1 = Object.defineProperty;
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
var ENUMERABLE = "enumerable";
var CONFIGURABLE$1 = "configurable";
var WRITABLE = "writable";
objectDefineProperty.f = DESCRIPTORS$f ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
  anObject$8(O);
  P = toPropertyKey$2(P);
  anObject$8(Attributes);
  if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor$1(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }
  return $defineProperty$1(O, P, Attributes);
} : $defineProperty$1 : function defineProperty2(O, P, Attributes) {
  anObject$8(O);
  P = toPropertyKey$2(P);
  anObject$8(Attributes);
  if (IE8_DOM_DEFINE)
    try {
      return $defineProperty$1(O, P, Attributes);
    } catch (error) {
    }
  if ("get" in Attributes || "set" in Attributes)
    throw new $TypeError$9("Accessors not supported");
  if ("value" in Attributes)
    O[P] = Attributes.value;
  return O;
};
var DESCRIPTORS$e = descriptors;
var definePropertyModule$3 = objectDefineProperty;
var createPropertyDescriptor$3 = createPropertyDescriptor$5;
var createNonEnumerableProperty$6 = DESCRIPTORS$e ? function(object2, key, value) {
  return definePropertyModule$3.f(object2, key, createPropertyDescriptor$3(1, value));
} : function(object2, key, value) {
  object2[key] = value;
  return object2;
};
var global$f = global$n;
var apply$3 = functionApply;
var uncurryThis$q = functionUncurryThisClause;
var isCallable$a = isCallable$h;
var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f;
var isForced = isForced_1;
var path$r = path$t;
var bind$8 = functionBindContext;
var createNonEnumerableProperty$5 = createNonEnumerableProperty$6;
var hasOwn$e = hasOwnProperty_1;
var wrapConstructor = function(NativeConstructor) {
  var Wrapper = function(a, b, c2) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();
        case 1:
          return new NativeConstructor(a);
        case 2:
          return new NativeConstructor(a, b);
      }
      return new NativeConstructor(a, b, c2);
    }
    return apply$3(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
var _export = function(options2, source) {
  var TARGET = options2.target;
  var GLOBAL = options2.global;
  var STATIC = options2.stat;
  var PROTO = options2.proto;
  var nativeSource = GLOBAL ? global$f : STATIC ? global$f[TARGET] : (global$f[TARGET] || {}).prototype;
  var target = GLOBAL ? path$r : path$r[TARGET] || createNonEnumerableProperty$5(path$r, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;
  var FORCED2, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
  for (key in source) {
    FORCED2 = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options2.forced);
    USE_NATIVE = !FORCED2 && nativeSource && hasOwn$e(nativeSource, key);
    targetProperty = target[key];
    if (USE_NATIVE)
      if (options2.dontCallGetSet) {
        descriptor = getOwnPropertyDescriptor$5(nativeSource, key);
        nativeProperty = descriptor && descriptor.value;
      } else
        nativeProperty = nativeSource[key];
    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
      continue;
    if (options2.bind && USE_NATIVE)
      resultProperty = bind$8(sourceProperty, global$f);
    else if (options2.wrap && USE_NATIVE)
      resultProperty = wrapConstructor(sourceProperty);
    else if (PROTO && isCallable$a(sourceProperty))
      resultProperty = uncurryThis$q(sourceProperty);
    else
      resultProperty = sourceProperty;
    if (options2.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty$5(resultProperty, "sham", true);
    }
    createNonEnumerableProperty$5(target, key, resultProperty);
    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + "Prototype";
      if (!hasOwn$e(path$r, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty$5(path$r, VIRTUAL_PROTOTYPE, {});
      }
      createNonEnumerableProperty$5(path$r[VIRTUAL_PROTOTYPE], key, sourceProperty);
      if (options2.real && targetPrototype && (FORCED2 || !targetPrototype[key])) {
        createNonEnumerableProperty$5(targetPrototype, key, sourceProperty);
      }
    }
  }
};
var ceil = Math.ceil;
var floor$1 = Math.floor;
var mathTrunc = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor$1 : ceil)(n);
};
var trunc2 = mathTrunc;
var toIntegerOrInfinity$4 = function(argument) {
  var number2 = +argument;
  return number2 !== number2 || number2 === 0 ? 0 : trunc2(number2);
};
var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
var max$3 = Math.max;
var min$2 = Math.min;
var toAbsoluteIndex$5 = function(index2, length2) {
  var integer = toIntegerOrInfinity$3(index2);
  return integer < 0 ? max$3(integer + length2, 0) : min$2(integer, length2);
};
var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
var min$1 = Math.min;
var toLength$1 = function(argument) {
  return argument > 0 ? min$1(toIntegerOrInfinity$2(argument), 9007199254740991) : 0;
};
var toLength = toLength$1;
var lengthOfArrayLike$a = function(obj) {
  return toLength(obj.length);
};
var toIndexedObject$9 = toIndexedObject$b;
var toAbsoluteIndex$4 = toAbsoluteIndex$5;
var lengthOfArrayLike$9 = lengthOfArrayLike$a;
var createMethod$5 = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIndexedObject$9($this);
    var length2 = lengthOfArrayLike$9(O);
    var index2 = toAbsoluteIndex$4(fromIndex, length2);
    var value;
    if (IS_INCLUDES && el !== el)
      while (length2 > index2) {
        value = O[index2++];
        if (value !== value)
          return true;
      }
    else
      for (; length2 > index2; index2++) {
        if ((IS_INCLUDES || index2 in O) && O[index2] === el)
          return IS_INCLUDES || index2 || 0;
      }
    return !IS_INCLUDES && -1;
  };
};
var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$5(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$5(false)
};
var hiddenKeys$6 = {};
var uncurryThis$p = functionUncurryThis;
var hasOwn$d = hasOwnProperty_1;
var toIndexedObject$8 = toIndexedObject$b;
var indexOf$4 = arrayIncludes.indexOf;
var hiddenKeys$5 = hiddenKeys$6;
var push$5 = uncurryThis$p([].push);
var objectKeysInternal = function(object2, names) {
  var O = toIndexedObject$8(object2);
  var i = 0;
  var result = [];
  var key;
  for (key in O)
    !hasOwn$d(hiddenKeys$5, key) && hasOwn$d(O, key) && push$5(result, key);
  while (names.length > i)
    if (hasOwn$d(O, key = names[i++])) {
      ~indexOf$4(result, key) || push$5(result, key);
    }
  return result;
};
var enumBugKeys$3 = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
];
var internalObjectKeys$1 = objectKeysInternal;
var enumBugKeys$2 = enumBugKeys$3;
var objectKeys$4 = Object.keys || function keys(O) {
  return internalObjectKeys$1(O, enumBugKeys$2);
};
var objectGetOwnPropertySymbols = {};
objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
var DESCRIPTORS$d = descriptors;
var uncurryThis$o = functionUncurryThis;
var call$7 = functionCall;
var fails$n = fails$v;
var objectKeys$3 = objectKeys$4;
var getOwnPropertySymbolsModule$3 = objectGetOwnPropertySymbols;
var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
var toObject$a = toObject$c;
var IndexedObject$2 = indexedObject;
var $assign = Object.assign;
var defineProperty$e = Object.defineProperty;
var concat$6 = uncurryThis$o([].concat);
var objectAssign = !$assign || fails$n(function() {
  if (DESCRIPTORS$d && $assign({ b: 1 }, $assign(defineProperty$e({}, "a", {
    enumerable: true,
    get: function() {
      defineProperty$e(this, "b", {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1)
    return true;
  var A = {};
  var B = {};
  var symbol2 = Symbol("assign detection");
  var alphabet = "abcdefghijklmnopqrst";
  A[symbol2] = 7;
  alphabet.split("").forEach(function(chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol2] !== 7 || objectKeys$3($assign({}, B)).join("") !== alphabet;
}) ? function assign(target, source) {
  var T = toObject$a(target);
  var argumentsLength = arguments.length;
  var index2 = 1;
  var getOwnPropertySymbols3 = getOwnPropertySymbolsModule$3.f;
  var propertyIsEnumerable4 = propertyIsEnumerableModule$1.f;
  while (argumentsLength > index2) {
    var S = IndexedObject$2(arguments[index2++]);
    var keys4 = getOwnPropertySymbols3 ? concat$6(objectKeys$3(S), getOwnPropertySymbols3(S)) : objectKeys$3(S);
    var length2 = keys4.length;
    var j = 0;
    var key;
    while (length2 > j) {
      key = keys4[j++];
      if (!DESCRIPTORS$d || call$7(propertyIsEnumerable4, S, key))
        T[key] = S[key];
    }
  }
  return T;
} : $assign;
var $$K = _export;
var assign$5 = objectAssign;
$$K({ target: "Object", stat: true, arity: 2, forced: Object.assign !== assign$5 }, {
  assign: assign$5
});
var path$q = path$t;
var assign$4 = path$q.Object.assign;
var parent$M = assign$4;
var assign$3 = parent$M;
var assign$2 = assign$3;
var _Object$assign = getDefaultExportFromCjs(assign$2);
var uncurryThis$n = functionUncurryThis;
var arraySlice$5 = uncurryThis$n([].slice);
var uncurryThis$m = functionUncurryThis;
var aCallable$3 = aCallable$6;
var isObject$c = isObject$h;
var hasOwn$c = hasOwnProperty_1;
var arraySlice$4 = arraySlice$5;
var NATIVE_BIND = functionBindNative;
var $Function = Function;
var concat$5 = uncurryThis$m([].concat);
var join = uncurryThis$m([].join);
var factories = {};
var construct$1 = function(C, argsLength, args) {
  if (!hasOwn$c(factories, argsLength)) {
    var list = [];
    var i = 0;
    for (; i < argsLength; i++)
      list[i] = "a[" + i + "]";
    factories[argsLength] = $Function("C,a", "return new C(" + join(list, ",") + ")");
  }
  return factories[argsLength](C, args);
};
var functionBind = NATIVE_BIND ? $Function.bind : function bind(that) {
  var F = aCallable$3(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice$4(arguments, 1);
  var boundFunction = function bound() {
    var args = concat$5(partArgs, arraySlice$4(arguments));
    return this instanceof boundFunction ? construct$1(F, args.length, args) : F.apply(that, args);
  };
  if (isObject$c(Prototype))
    boundFunction.prototype = Prototype;
  return boundFunction;
};
var $$J = _export;
var bind$7 = functionBind;
$$J({ target: "Function", proto: true, forced: Function.bind !== bind$7 }, {
  bind: bind$7
});
var path$p = path$t;
var entryVirtual$h = function(CONSTRUCTOR) {
  return path$p[CONSTRUCTOR + "Prototype"];
};
var entryVirtual$g = entryVirtual$h;
var bind$6 = entryVirtual$g("Function").bind;
var isPrototypeOf$i = objectIsPrototypeOf;
var method$e = bind$6;
var FunctionPrototype$2 = Function.prototype;
var bind$5 = function(it2) {
  var own = it2.bind;
  return it2 === FunctionPrototype$2 || isPrototypeOf$i(FunctionPrototype$2, it2) && own === FunctionPrototype$2.bind ? method$e : own;
};
var parent$L = bind$5;
var bind$4 = parent$L;
var bind$3 = bind$4;
var _bindInstanceProperty = getDefaultExportFromCjs(bind$3);
function drawCircle(ctx, x, y, r) {
  ctx.beginPath();
  ctx.arc(x, y, r, 0, 2 * Math.PI, false);
  ctx.closePath();
}
function drawSquare(ctx, x, y, r) {
  ctx.beginPath();
  ctx.rect(x - r, y - r, r * 2, r * 2);
  ctx.closePath();
}
function drawTriangle(ctx, x, y, r) {
  ctx.beginPath();
  r *= 1.15;
  y += 0.275 * r;
  const s = r * 2;
  const s2 = s / 2;
  const ir = Math.sqrt(3) / 6 * s;
  const h = Math.sqrt(s * s - s2 * s2);
  ctx.moveTo(x, y - (h - ir));
  ctx.lineTo(x + s2, y + ir);
  ctx.lineTo(x - s2, y + ir);
  ctx.lineTo(x, y - (h - ir));
  ctx.closePath();
}
function drawTriangleDown(ctx, x, y, r) {
  ctx.beginPath();
  r *= 1.15;
  y -= 0.275 * r;
  const s = r * 2;
  const s2 = s / 2;
  const ir = Math.sqrt(3) / 6 * s;
  const h = Math.sqrt(s * s - s2 * s2);
  ctx.moveTo(x, y + (h - ir));
  ctx.lineTo(x + s2, y - ir);
  ctx.lineTo(x - s2, y - ir);
  ctx.lineTo(x, y + (h - ir));
  ctx.closePath();
}
function drawStar(ctx, x, y, r) {
  ctx.beginPath();
  r *= 0.82;
  y += 0.1 * r;
  for (let n = 0; n < 10; n++) {
    const radius = n % 2 === 0 ? r * 1.3 : r * 0.5;
    ctx.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));
  }
  ctx.closePath();
}
function drawDiamond(ctx, x, y, r) {
  ctx.beginPath();
  ctx.lineTo(x, y + r);
  ctx.lineTo(x + r, y);
  ctx.lineTo(x, y - r);
  ctx.lineTo(x - r, y);
  ctx.closePath();
}
function drawRoundRect(ctx, x, y, w, h, r) {
  const r2d = Math.PI / 180;
  if (w - 2 * r < 0) {
    r = w / 2;
  }
  if (h - 2 * r < 0) {
    r = h / 2;
  }
  ctx.beginPath();
  ctx.moveTo(x + r, y);
  ctx.lineTo(x + w - r, y);
  ctx.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);
  ctx.lineTo(x + w, y + h - r);
  ctx.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);
  ctx.lineTo(x + r, y + h);
  ctx.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);
  ctx.lineTo(x, y + r);
  ctx.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);
  ctx.closePath();
}
function drawEllipse(ctx, x, y, w, h) {
  const kappa = 0.5522848, ox = w / 2 * kappa, oy = h / 2 * kappa, xe = x + w, ye = y + h, xm = x + w / 2, ym = y + h / 2;
  ctx.beginPath();
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.closePath();
}
function drawDatabase(ctx, x, y, w, h) {
  const f = 1 / 3;
  const wEllipse = w;
  const hEllipse = h * f;
  const kappa = 0.5522848, ox = wEllipse / 2 * kappa, oy = hEllipse / 2 * kappa, xe = x + wEllipse, ye = y + hEllipse, xm = x + wEllipse / 2, ym = y + hEllipse / 2, ymb = y + (h - hEllipse / 2), yeb = y + h;
  ctx.beginPath();
  ctx.moveTo(xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.lineTo(xe, ymb);
  ctx.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
  ctx.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);
  ctx.lineTo(x, ym);
}
function drawDashedLine(ctx, x, y, x2, y2, pattern) {
  ctx.beginPath();
  ctx.moveTo(x, y);
  const patternLength = pattern.length;
  const dx = x2 - x;
  const dy = y2 - y;
  const slope = dy / dx;
  let distRemaining = Math.sqrt(dx * dx + dy * dy);
  let patternIndex = 0;
  let draw = true;
  let xStep = 0;
  let dashLength = +pattern[0];
  while (distRemaining >= 0.1) {
    dashLength = +pattern[patternIndex++ % patternLength];
    if (dashLength > distRemaining) {
      dashLength = distRemaining;
    }
    xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
    xStep = dx < 0 ? -xStep : xStep;
    x += xStep;
    y += slope * xStep;
    if (draw === true) {
      ctx.lineTo(x, y);
    } else {
      ctx.moveTo(x, y);
    }
    distRemaining -= dashLength;
    draw = !draw;
  }
}
function drawHexagon(ctx, x, y, r) {
  ctx.beginPath();
  const sides = 6;
  const a = Math.PI * 2 / sides;
  ctx.moveTo(x + r, y);
  for (let i = 1; i < sides; i++) {
    ctx.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));
  }
  ctx.closePath();
}
var shapeMap = {
  circle: drawCircle,
  dashedLine: drawDashedLine,
  database: drawDatabase,
  diamond: drawDiamond,
  ellipse: drawEllipse,
  ellipse_vis: drawEllipse,
  hexagon: drawHexagon,
  roundRect: drawRoundRect,
  square: drawSquare,
  star: drawStar,
  triangle: drawTriangle,
  triangleDown: drawTriangleDown
};
function getShape(name) {
  if (Object.prototype.hasOwnProperty.call(shapeMap, name)) {
    return shapeMap[name];
  } else {
    return function(ctx) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      CanvasRenderingContext2D.prototype[name].call(ctx, args);
    };
  }
}
var componentEmitter = { exports: {} };
(function(module) {
  {
    module.exports = Emitter2;
  }
  function Emitter2(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key in Emitter2.prototype) {
      obj[key] = Emitter2.prototype[key];
    }
    return obj;
  }
  Emitter2.prototype.on = Emitter2.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
    return this;
  };
  Emitter2.prototype.once = function(event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }
    on.fn = fn;
    this.on(event, on);
    return this;
  };
  Emitter2.prototype.off = Emitter2.prototype.removeListener = Emitter2.prototype.removeAllListeners = Emitter2.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event];
    if (!callbacks)
      return this;
    if (1 == arguments.length) {
      delete this._callbacks["$" + event];
      return this;
    }
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event];
    }
    return this;
  };
  Emitter2.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }
    return this;
  };
  Emitter2.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
  };
  Emitter2.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
  };
})(componentEmitter);
var componentEmitterExports = componentEmitter.exports;
var Emitter = getDefaultExportFromCjs(componentEmitterExports);
var classof$d = classofRaw$2;
var isArray$b = Array.isArray || function isArray(argument) {
  return classof$d(argument) === "Array";
};
var $TypeError$8 = TypeError;
var MAX_SAFE_INTEGER = 9007199254740991;
var doesNotExceedSafeInteger$2 = function(it2) {
  if (it2 > MAX_SAFE_INTEGER)
    throw $TypeError$8("Maximum allowed index exceeded");
  return it2;
};
var toPropertyKey$1 = toPropertyKey$4;
var definePropertyModule$2 = objectDefineProperty;
var createPropertyDescriptor$2 = createPropertyDescriptor$5;
var createProperty$5 = function(object2, key, value) {
  var propertyKey = toPropertyKey$1(key);
  if (propertyKey in object2)
    definePropertyModule$2.f(object2, propertyKey, createPropertyDescriptor$2(0, value));
  else
    object2[propertyKey] = value;
};
var wellKnownSymbol$j = wellKnownSymbol$l;
var TO_STRING_TAG$3 = wellKnownSymbol$j("toStringTag");
var test$2 = {};
test$2[TO_STRING_TAG$3] = "z";
var toStringTagSupport = String(test$2) === "[object z]";
var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
var isCallable$9 = isCallable$h;
var classofRaw = classofRaw$2;
var wellKnownSymbol$i = wellKnownSymbol$l;
var TO_STRING_TAG$2 = wellKnownSymbol$i("toStringTag");
var $Object$2 = Object;
var CORRECT_ARGUMENTS = classofRaw(function() {
  return arguments;
}()) === "Arguments";
var tryGet = function(it2, key) {
  try {
    return it2[key];
  } catch (error) {
  }
};
var classof$c = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function(it2) {
  var O, tag, result;
  return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag = tryGet(O = $Object$2(it2), TO_STRING_TAG$2)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable$9(O.callee) ? "Arguments" : result;
};
var uncurryThis$l = functionUncurryThis;
var isCallable$8 = isCallable$h;
var store$1 = sharedStore;
var functionToString = uncurryThis$l(Function.toString);
if (!isCallable$8(store$1.inspectSource)) {
  store$1.inspectSource = function(it2) {
    return functionToString(it2);
  };
}
var inspectSource$1 = store$1.inspectSource;
var uncurryThis$k = functionUncurryThis;
var fails$m = fails$v;
var isCallable$7 = isCallable$h;
var classof$b = classof$c;
var getBuiltIn$9 = getBuiltIn$b;
var inspectSource = inspectSource$1;
var noop = function() {
};
var empty = [];
var construct = getBuiltIn$9("Reflect", "construct");
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec$2 = uncurryThis$k(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.test(noop);
var isConstructorModern = function isConstructor(argument) {
  if (!isCallable$7(argument))
    return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy = function isConstructor2(argument) {
  if (!isCallable$7(argument))
    return false;
  switch (classof$b(argument)) {
    case "AsyncFunction":
    case "GeneratorFunction":
    case "AsyncGeneratorFunction":
      return false;
  }
  try {
    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy.sham = true;
var isConstructor$2 = !construct || fails$m(function() {
  var called;
  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
    called = true;
  }) || called;
}) ? isConstructorLegacy : isConstructorModern;
var isArray$a = isArray$b;
var isConstructor$1 = isConstructor$2;
var isObject$b = isObject$h;
var wellKnownSymbol$h = wellKnownSymbol$l;
var SPECIES$3 = wellKnownSymbol$h("species");
var $Array$2 = Array;
var arraySpeciesConstructor$1 = function(originalArray) {
  var C;
  if (isArray$a(originalArray)) {
    C = originalArray.constructor;
    if (isConstructor$1(C) && (C === $Array$2 || isArray$a(C.prototype)))
      C = void 0;
    else if (isObject$b(C)) {
      C = C[SPECIES$3];
      if (C === null)
        C = void 0;
    }
  }
  return C === void 0 ? $Array$2 : C;
};
var arraySpeciesConstructor = arraySpeciesConstructor$1;
var arraySpeciesCreate$3 = function(originalArray, length2) {
  return new (arraySpeciesConstructor(originalArray))(length2 === 0 ? 0 : length2);
};
var fails$l = fails$v;
var wellKnownSymbol$g = wellKnownSymbol$l;
var V8_VERSION$1 = engineV8Version;
var SPECIES$2 = wellKnownSymbol$g("species");
var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
  return V8_VERSION$1 >= 51 || !fails$l(function() {
    var array2 = [];
    var constructor = array2.constructor = {};
    constructor[SPECIES$2] = function() {
      return { foo: 1 };
    };
    return array2[METHOD_NAME](Boolean).foo !== 1;
  });
};
var $$I = _export;
var fails$k = fails$v;
var isArray$9 = isArray$b;
var isObject$a = isObject$h;
var toObject$9 = toObject$c;
var lengthOfArrayLike$8 = lengthOfArrayLike$a;
var doesNotExceedSafeInteger$1 = doesNotExceedSafeInteger$2;
var createProperty$4 = createProperty$5;
var arraySpeciesCreate$2 = arraySpeciesCreate$3;
var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
var wellKnownSymbol$f = wellKnownSymbol$l;
var V8_VERSION = engineV8Version;
var IS_CONCAT_SPREADABLE = wellKnownSymbol$f("isConcatSpreadable");
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$k(function() {
  var array2 = [];
  array2[IS_CONCAT_SPREADABLE] = false;
  return array2.concat()[0] !== array2;
});
var isConcatSpreadable = function(O) {
  if (!isObject$a(O))
    return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== void 0 ? !!spreadable : isArray$9(O);
};
var FORCED$8 = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport$4("concat");
$$I({ target: "Array", proto: true, arity: 1, forced: FORCED$8 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject$9(this);
    var A = arraySpeciesCreate$2(O, 0);
    var n = 0;
    var i, k, length2, len, E;
    for (i = -1, length2 = arguments.length; i < length2; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike$8(E);
        doesNotExceedSafeInteger$1(n + len);
        for (k = 0; k < len; k++, n++)
          if (k in E)
            createProperty$4(A, n, E[k]);
      } else {
        doesNotExceedSafeInteger$1(n + 1);
        createProperty$4(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});
var classof$a = classof$c;
var $String$1 = String;
var toString$a = function(argument) {
  if (classof$a(argument) === "Symbol")
    throw new TypeError("Cannot convert a Symbol value to a string");
  return $String$1(argument);
};
var objectDefineProperties = {};
var DESCRIPTORS$c = descriptors;
var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
var definePropertyModule$1 = objectDefineProperty;
var anObject$7 = anObject$9;
var toIndexedObject$7 = toIndexedObject$b;
var objectKeys$2 = objectKeys$4;
objectDefineProperties.f = DESCRIPTORS$c && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$7(O);
  var props = toIndexedObject$7(Properties);
  var keys4 = objectKeys$2(Properties);
  var length2 = keys4.length;
  var index2 = 0;
  var key;
  while (length2 > index2)
    definePropertyModule$1.f(O, key = keys4[index2++], props[key]);
  return O;
};
var getBuiltIn$8 = getBuiltIn$b;
var html$1 = getBuiltIn$8("document", "documentElement");
var shared$5 = sharedExports;
var uid$2 = uid$4;
var keys$3 = shared$5("keys");
var sharedKey$4 = function(key) {
  return keys$3[key] || (keys$3[key] = uid$2(key));
};
var anObject$6 = anObject$9;
var definePropertiesModule$1 = objectDefineProperties;
var enumBugKeys$1 = enumBugKeys$3;
var hiddenKeys$4 = hiddenKeys$6;
var html = html$1;
var documentCreateElement = documentCreateElement$1;
var sharedKey$3 = sharedKey$4;
var GT = ">";
var LT = "<";
var PROTOTYPE$1 = "prototype";
var SCRIPT = "script";
var IE_PROTO$1 = sharedKey$3("IE_PROTO");
var EmptyConstructor = function() {
};
var scriptTag = function(content) {
  return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
};
var NullProtoObjectViaActiveX = function(activeXDocument2) {
  activeXDocument2.write(scriptTag(""));
  activeXDocument2.close();
  var temp = activeXDocument2.parentWindow.Object;
  activeXDocument2 = null;
  return temp;
};
var NullProtoObjectViaIFrame = function() {
  var iframe = documentCreateElement("iframe");
  var JS = "java" + SCRIPT + ":";
  var iframeDocument;
  iframe.style.display = "none";
  html.appendChild(iframe);
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag("document.F=Object"));
  iframeDocument.close();
  return iframeDocument.F;
};
var activeXDocument;
var NullProtoObject = function() {
  try {
    activeXDocument = new ActiveXObject("htmlfile");
  } catch (error) {
  }
  NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
  var length2 = enumBugKeys$1.length;
  while (length2--)
    delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length2]];
  return NullProtoObject();
};
hiddenKeys$4[IE_PROTO$1] = true;
var objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE$1] = anObject$6(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE$1] = null;
    result[IE_PROTO$1] = O;
  } else
    result = NullProtoObject();
  return Properties === void 0 ? result : definePropertiesModule$1.f(result, Properties);
};
var objectGetOwnPropertyNames = {};
var internalObjectKeys = objectKeysInternal;
var enumBugKeys = enumBugKeys$3;
var hiddenKeys$3 = enumBugKeys.concat("length", "prototype");
objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys$3);
};
var objectGetOwnPropertyNamesExternal = {};
var toAbsoluteIndex$3 = toAbsoluteIndex$5;
var lengthOfArrayLike$7 = lengthOfArrayLike$a;
var createProperty$3 = createProperty$5;
var $Array$1 = Array;
var max$2 = Math.max;
var arraySliceSimple = function(O, start, end) {
  var length2 = lengthOfArrayLike$7(O);
  var k = toAbsoluteIndex$3(start, length2);
  var fin = toAbsoluteIndex$3(end === void 0 ? length2 : end, length2);
  var result = $Array$1(max$2(fin - k, 0));
  var n = 0;
  for (; k < fin; k++, n++)
    createProperty$3(result, n, O[k]);
  result.length = n;
  return result;
};
var classof$9 = classofRaw$2;
var toIndexedObject$6 = toIndexedObject$b;
var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
var arraySlice$3 = arraySliceSimple;
var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it2) {
  try {
    return $getOwnPropertyNames$1(it2);
  } catch (error) {
    return arraySlice$3(windowNames);
  }
};
objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames2(it2) {
  return windowNames && classof$9(it2) === "Window" ? getWindowNames(it2) : $getOwnPropertyNames$1(toIndexedObject$6(it2));
};
var createNonEnumerableProperty$4 = createNonEnumerableProperty$6;
var defineBuiltIn$5 = function(target, key, value, options2) {
  if (options2 && options2.enumerable)
    target[key] = value;
  else
    createNonEnumerableProperty$4(target, key, value);
  return target;
};
var defineProperty$d = objectDefineProperty;
var defineBuiltInAccessor$3 = function(target, name, descriptor) {
  return defineProperty$d.f(target, name, descriptor);
};
var wellKnownSymbolWrapped = {};
var wellKnownSymbol$e = wellKnownSymbol$l;
wellKnownSymbolWrapped.f = wellKnownSymbol$e;
var path$o = path$t;
var hasOwn$b = hasOwnProperty_1;
var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
var defineProperty$c = objectDefineProperty.f;
var wellKnownSymbolDefine = function(NAME) {
  var Symbol2 = path$o.Symbol || (path$o.Symbol = {});
  if (!hasOwn$b(Symbol2, NAME))
    defineProperty$c(Symbol2, NAME, {
      value: wrappedWellKnownSymbolModule$1.f(NAME)
    });
};
var call$6 = functionCall;
var getBuiltIn$7 = getBuiltIn$b;
var wellKnownSymbol$d = wellKnownSymbol$l;
var defineBuiltIn$4 = defineBuiltIn$5;
var symbolDefineToPrimitive = function() {
  var Symbol2 = getBuiltIn$7("Symbol");
  var SymbolPrototype2 = Symbol2 && Symbol2.prototype;
  var valueOf = SymbolPrototype2 && SymbolPrototype2.valueOf;
  var TO_PRIMITIVE2 = wellKnownSymbol$d("toPrimitive");
  if (SymbolPrototype2 && !SymbolPrototype2[TO_PRIMITIVE2]) {
    defineBuiltIn$4(SymbolPrototype2, TO_PRIMITIVE2, function(hint) {
      return call$6(valueOf, this);
    }, { arity: 1 });
  }
};
var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
var classof$8 = classof$c;
var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
  return "[object " + classof$8(this) + "]";
};
var TO_STRING_TAG_SUPPORT = toStringTagSupport;
var defineProperty$b = objectDefineProperty.f;
var createNonEnumerableProperty$3 = createNonEnumerableProperty$6;
var hasOwn$a = hasOwnProperty_1;
var toString$9 = objectToString;
var wellKnownSymbol$c = wellKnownSymbol$l;
var TO_STRING_TAG$1 = wellKnownSymbol$c("toStringTag");
var setToStringTag$6 = function(it2, TAG, STATIC, SET_METHOD) {
  if (it2) {
    var target = STATIC ? it2 : it2.prototype;
    if (!hasOwn$a(target, TO_STRING_TAG$1)) {
      defineProperty$b(target, TO_STRING_TAG$1, { configurable: true, value: TAG });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
      createNonEnumerableProperty$3(target, "toString", toString$9);
    }
  }
};
var global$e = global$n;
var isCallable$6 = isCallable$h;
var WeakMap$1 = global$e.WeakMap;
var weakMapBasicDetection = isCallable$6(WeakMap$1) && /native code/.test(String(WeakMap$1));
var NATIVE_WEAK_MAP$1 = weakMapBasicDetection;
var global$d = global$n;
var isObject$9 = isObject$h;
var createNonEnumerableProperty$2 = createNonEnumerableProperty$6;
var hasOwn$9 = hasOwnProperty_1;
var shared$4 = sharedStore;
var sharedKey$2 = sharedKey$4;
var hiddenKeys$2 = hiddenKeys$6;
var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
var TypeError$2 = global$d.TypeError;
var WeakMap = global$d.WeakMap;
var set$3;
var get;
var has;
var enforce = function(it2) {
  return has(it2) ? get(it2) : set$3(it2, {});
};
var getterFor = function(TYPE) {
  return function(it2) {
    var state;
    if (!isObject$9(it2) || (state = get(it2)).type !== TYPE) {
      throw new TypeError$2("Incompatible receiver, " + TYPE + " required");
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP$1 || shared$4.state) {
  store = shared$4.state || (shared$4.state = new WeakMap());
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  set$3 = function(it2, metadata) {
    if (store.has(it2))
      throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it2;
    store.set(it2, metadata);
    return metadata;
  };
  get = function(it2) {
    return store.get(it2) || {};
  };
  has = function(it2) {
    return store.has(it2);
  };
} else {
  STATE = sharedKey$2("state");
  hiddenKeys$2[STATE] = true;
  set$3 = function(it2, metadata) {
    if (hasOwn$9(it2, STATE))
      throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it2;
    createNonEnumerableProperty$2(it2, STATE, metadata);
    return metadata;
  };
  get = function(it2) {
    return hasOwn$9(it2, STATE) ? it2[STATE] : {};
  };
  has = function(it2) {
    return hasOwn$9(it2, STATE);
  };
}
var store;
var STATE;
var internalState = {
  set: set$3,
  get,
  has,
  enforce,
  getterFor
};
var bind$2 = functionBindContext;
var uncurryThis$j = functionUncurryThis;
var IndexedObject$1 = indexedObject;
var toObject$8 = toObject$c;
var lengthOfArrayLike$6 = lengthOfArrayLike$a;
var arraySpeciesCreate$1 = arraySpeciesCreate$3;
var push$4 = uncurryThis$j([].push);
var createMethod$4 = function(TYPE) {
  var IS_MAP = TYPE === 1;
  var IS_FILTER = TYPE === 2;
  var IS_SOME = TYPE === 3;
  var IS_EVERY = TYPE === 4;
  var IS_FIND_INDEX = TYPE === 6;
  var IS_FILTER_REJECT = TYPE === 7;
  var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that, specificCreate) {
    var O = toObject$8($this);
    var self2 = IndexedObject$1(O);
    var boundFunction = bind$2(callbackfn, that);
    var length2 = lengthOfArrayLike$6(self2);
    var index2 = 0;
    var create5 = specificCreate || arraySpeciesCreate$1;
    var target = IS_MAP ? create5($this, length2) : IS_FILTER || IS_FILTER_REJECT ? create5($this, 0) : void 0;
    var value, result;
    for (; length2 > index2; index2++)
      if (NO_HOLES || index2 in self2) {
        value = self2[index2];
        result = boundFunction(value, index2, O);
        if (TYPE) {
          if (IS_MAP)
            target[index2] = result;
          else if (result)
            switch (TYPE) {
              case 3:
                return true;
              case 5:
                return value;
              case 6:
                return index2;
              case 2:
                push$4(target, value);
            }
          else
            switch (TYPE) {
              case 4:
                return false;
              case 7:
                push$4(target, value);
            }
        }
      }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};
var arrayIteration = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod$4(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod$4(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod$4(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod$4(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod$4(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod$4(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod$4(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod$4(7)
};
var $$H = _export;
var global$c = global$n;
var call$5 = functionCall;
var uncurryThis$i = functionUncurryThis;
var DESCRIPTORS$b = descriptors;
var NATIVE_SYMBOL$3 = symbolConstructorDetection;
var fails$j = fails$v;
var hasOwn$8 = hasOwnProperty_1;
var isPrototypeOf$h = objectIsPrototypeOf;
var anObject$5 = anObject$9;
var toIndexedObject$5 = toIndexedObject$b;
var toPropertyKey = toPropertyKey$4;
var $toString = toString$a;
var createPropertyDescriptor$1 = createPropertyDescriptor$5;
var nativeObjectCreate = objectCreate;
var objectKeys$1 = objectKeys$4;
var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
var definePropertyModule = objectDefineProperty;
var definePropertiesModule = objectDefineProperties;
var propertyIsEnumerableModule = objectPropertyIsEnumerable;
var defineBuiltIn$3 = defineBuiltIn$5;
var defineBuiltInAccessor$2 = defineBuiltInAccessor$3;
var shared$3 = sharedExports;
var sharedKey$1 = sharedKey$4;
var hiddenKeys$1 = hiddenKeys$6;
var uid$1 = uid$4;
var wellKnownSymbol$b = wellKnownSymbol$l;
var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
var defineWellKnownSymbol$l = wellKnownSymbolDefine;
var defineSymbolToPrimitive$1 = symbolDefineToPrimitive;
var setToStringTag$5 = setToStringTag$6;
var InternalStateModule$5 = internalState;
var $forEach$1 = arrayIteration.forEach;
var HIDDEN = sharedKey$1("hidden");
var SYMBOL = "Symbol";
var PROTOTYPE = "prototype";
var setInternalState$5 = InternalStateModule$5.set;
var getInternalState$2 = InternalStateModule$5.getterFor(SYMBOL);
var ObjectPrototype$1 = Object[PROTOTYPE];
var $Symbol = global$c.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var RangeError$1 = global$c.RangeError;
var TypeError$1 = global$c.TypeError;
var QObject = global$c.QObject;
var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$1.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push$3 = uncurryThis$i([].push);
var AllSymbols = shared$3("symbols");
var ObjectPrototypeSymbols = shared$3("op-symbols");
var WellKnownSymbolsStore$1 = shared$3("wks");
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
var fallbackDefineProperty = function(O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
  if (ObjectPrototypeDescriptor)
    delete ObjectPrototype$1[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
    nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
  }
};
var setSymbolDescriptor = DESCRIPTORS$b && fails$j(function() {
  return nativeObjectCreate(nativeDefineProperty({}, "a", {
    get: function() {
      return nativeDefineProperty(this, "a", { value: 7 }).a;
    }
  })).a !== 7;
}) ? fallbackDefineProperty : nativeDefineProperty;
var wrap = function(tag, description) {
  var symbol2 = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState$5(symbol2, {
    type: SYMBOL,
    tag,
    description
  });
  if (!DESCRIPTORS$b)
    symbol2.description = description;
  return symbol2;
};
var $defineProperty = function defineProperty3(O, P, Attributes) {
  if (O === ObjectPrototype$1)
    $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject$5(O);
  var key = toPropertyKey(P);
  anObject$5(Attributes);
  if (hasOwn$8(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn$8(O, HIDDEN))
        nativeDefineProperty(O, HIDDEN, createPropertyDescriptor$1(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn$8(O, HIDDEN) && O[HIDDEN][key])
        O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor$1(0, false) });
    }
    return setSymbolDescriptor(O, key, Attributes);
  }
  return nativeDefineProperty(O, key, Attributes);
};
var $defineProperties = function defineProperties2(O, Properties) {
  anObject$5(O);
  var properties = toIndexedObject$5(Properties);
  var keys4 = objectKeys$1(properties).concat($getOwnPropertySymbols(properties));
  $forEach$1(keys4, function(key) {
    if (!DESCRIPTORS$b || call$5($propertyIsEnumerable$1, properties, key))
      $defineProperty(O, key, properties[key]);
  });
  return O;
};
var $create = function create2(O, Properties) {
  return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};
var $propertyIsEnumerable$1 = function propertyIsEnumerable2(V) {
  var P = toPropertyKey(V);
  var enumerable = call$5(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype$1 && hasOwn$8(AllSymbols, P) && !hasOwn$8(ObjectPrototypeSymbols, P))
    return false;
  return enumerable || !hasOwn$8(this, P) || !hasOwn$8(AllSymbols, P) || hasOwn$8(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(O, P) {
  var it2 = toIndexedObject$5(O);
  var key = toPropertyKey(P);
  if (it2 === ObjectPrototype$1 && hasOwn$8(AllSymbols, key) && !hasOwn$8(ObjectPrototypeSymbols, key))
    return;
  var descriptor = nativeGetOwnPropertyDescriptor$1(it2, key);
  if (descriptor && hasOwn$8(AllSymbols, key) && !(hasOwn$8(it2, HIDDEN) && it2[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};
var $getOwnPropertyNames = function getOwnPropertyNames3(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject$5(O));
  var result = [];
  $forEach$1(names, function(key) {
    if (!hasOwn$8(AllSymbols, key) && !hasOwn$8(hiddenKeys$1, key))
      push$3(result, key);
  });
  return result;
};
var $getOwnPropertySymbols = function(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$5(O));
  var result = [];
  $forEach$1(names, function(key) {
    if (hasOwn$8(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$8(ObjectPrototype$1, key))) {
      push$3(result, AllSymbols[key]);
    }
  });
  return result;
};
if (!NATIVE_SYMBOL$3) {
  $Symbol = function Symbol2() {
    if (isPrototypeOf$h(SymbolPrototype, this))
      throw new TypeError$1("Symbol is not a constructor");
    var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
    var tag = uid$1(description);
    var setter = function(value) {
      if (this === ObjectPrototype$1)
        call$5(setter, ObjectPrototypeSymbols, value);
      if (hasOwn$8(this, HIDDEN) && hasOwn$8(this[HIDDEN], tag))
        this[HIDDEN][tag] = false;
      var descriptor = createPropertyDescriptor$1(1, value);
      try {
        setSymbolDescriptor(this, tag, descriptor);
      } catch (error) {
        if (!(error instanceof RangeError$1))
          throw error;
        fallbackDefineProperty(this, tag, descriptor);
      }
    };
    if (DESCRIPTORS$b && USE_SETTER)
      setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };
  SymbolPrototype = $Symbol[PROTOTYPE];
  defineBuiltIn$3(SymbolPrototype, "toString", function toString3() {
    return getInternalState$2(this).tag;
  });
  defineBuiltIn$3($Symbol, "withoutSetter", function(description) {
    return wrap(uid$1(description), description);
  });
  propertyIsEnumerableModule.f = $propertyIsEnumerable$1;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule$1.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule$2.f = $getOwnPropertySymbols;
  wrappedWellKnownSymbolModule.f = function(name) {
    return wrap(wellKnownSymbol$b(name), name);
  };
  if (DESCRIPTORS$b) {
    defineBuiltInAccessor$2(SymbolPrototype, "description", {
      configurable: true,
      get: function description() {
        return getInternalState$2(this).description;
      }
    });
  }
}
$$H({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL$3, sham: !NATIVE_SYMBOL$3 }, {
  Symbol: $Symbol
});
$forEach$1(objectKeys$1(WellKnownSymbolsStore$1), function(name) {
  defineWellKnownSymbol$l(name);
});
$$H({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL$3 }, {
  useSetter: function() {
    USE_SETTER = true;
  },
  useSimple: function() {
    USE_SETTER = false;
  }
});
$$H({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3, sham: !DESCRIPTORS$b }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$$H({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3 }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});
defineSymbolToPrimitive$1();
setToStringTag$5($Symbol, SYMBOL);
hiddenKeys$1[HIDDEN] = true;
var NATIVE_SYMBOL$2 = symbolConstructorDetection;
var symbolRegistryDetection = NATIVE_SYMBOL$2 && !!Symbol["for"] && !!Symbol.keyFor;
var $$G = _export;
var getBuiltIn$6 = getBuiltIn$b;
var hasOwn$7 = hasOwnProperty_1;
var toString$8 = toString$a;
var shared$2 = sharedExports;
var NATIVE_SYMBOL_REGISTRY$1 = symbolRegistryDetection;
var StringToSymbolRegistry = shared$2("string-to-symbol-registry");
var SymbolToStringRegistry$1 = shared$2("symbol-to-string-registry");
$$G({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY$1 }, {
  "for": function(key) {
    var string2 = toString$8(key);
    if (hasOwn$7(StringToSymbolRegistry, string2))
      return StringToSymbolRegistry[string2];
    var symbol2 = getBuiltIn$6("Symbol")(string2);
    StringToSymbolRegistry[string2] = symbol2;
    SymbolToStringRegistry$1[symbol2] = string2;
    return symbol2;
  }
});
var $$F = _export;
var hasOwn$6 = hasOwnProperty_1;
var isSymbol$2 = isSymbol$5;
var tryToString$3 = tryToString$5;
var shared$1 = sharedExports;
var NATIVE_SYMBOL_REGISTRY = symbolRegistryDetection;
var SymbolToStringRegistry = shared$1("symbol-to-string-registry");
$$F({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  keyFor: function keyFor(sym) {
    if (!isSymbol$2(sym))
      throw new TypeError(tryToString$3(sym) + " is not a symbol");
    if (hasOwn$6(SymbolToStringRegistry, sym))
      return SymbolToStringRegistry[sym];
  }
});
var uncurryThis$h = functionUncurryThis;
var isArray$8 = isArray$b;
var isCallable$5 = isCallable$h;
var classof$7 = classofRaw$2;
var toString$7 = toString$a;
var push$2 = uncurryThis$h([].push);
var getJsonReplacerFunction = function(replacer) {
  if (isCallable$5(replacer))
    return replacer;
  if (!isArray$8(replacer))
    return;
  var rawLength = replacer.length;
  var keys4 = [];
  for (var i = 0; i < rawLength; i++) {
    var element = replacer[i];
    if (typeof element == "string")
      push$2(keys4, element);
    else if (typeof element == "number" || classof$7(element) === "Number" || classof$7(element) === "String")
      push$2(keys4, toString$7(element));
  }
  var keysLength = keys4.length;
  var root = true;
  return function(key, value) {
    if (root) {
      root = false;
      return value;
    }
    if (isArray$8(this))
      return value;
    for (var j = 0; j < keysLength; j++)
      if (keys4[j] === key)
        return value;
  };
};
var $$E = _export;
var getBuiltIn$5 = getBuiltIn$b;
var apply$2 = functionApply;
var call$4 = functionCall;
var uncurryThis$g = functionUncurryThis;
var fails$i = fails$v;
var isCallable$4 = isCallable$h;
var isSymbol$1 = isSymbol$5;
var arraySlice$2 = arraySlice$5;
var getReplacerFunction = getJsonReplacerFunction;
var NATIVE_SYMBOL$1 = symbolConstructorDetection;
var $String = String;
var $stringify = getBuiltIn$5("JSON", "stringify");
var exec$1 = uncurryThis$g(/./.exec);
var charAt$3 = uncurryThis$g("".charAt);
var charCodeAt$1 = uncurryThis$g("".charCodeAt);
var replace$1 = uncurryThis$g("".replace);
var numberToString = uncurryThis$g(1 .toString);
var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;
var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL$1 || fails$i(function() {
  var symbol2 = getBuiltIn$5("Symbol")("stringify detection");
  return $stringify([symbol2]) !== "[null]" || $stringify({ a: symbol2 }) !== "{}" || $stringify(Object(symbol2)) !== "{}";
});
var ILL_FORMED_UNICODE = fails$i(function() {
  return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
});
var stringifyWithSymbolsFix = function(it2, replacer) {
  var args = arraySlice$2(arguments);
  var $replacer = getReplacerFunction(replacer);
  if (!isCallable$4($replacer) && (it2 === void 0 || isSymbol$1(it2)))
    return;
  args[1] = function(key, value) {
    if (isCallable$4($replacer))
      value = call$4($replacer, this, $String(key), value);
    if (!isSymbol$1(value))
      return value;
  };
  return apply$2($stringify, null, args);
};
var fixIllFormed = function(match2, offset, string2) {
  var prev = charAt$3(string2, offset - 1);
  var next3 = charAt$3(string2, offset + 1);
  if (exec$1(low, match2) && !exec$1(hi, next3) || exec$1(hi, match2) && !exec$1(low, prev)) {
    return "\\u" + numberToString(charCodeAt$1(match2, 0), 16);
  }
  return match2;
};
if ($stringify) {
  $$E({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify3(it2, replacer, space) {
      var args = arraySlice$2(arguments);
      var result = apply$2(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == "string" ? replace$1(result, tester, fixIllFormed) : result;
    }
  });
}
var $$D = _export;
var NATIVE_SYMBOL = symbolConstructorDetection;
var fails$h = fails$v;
var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
var toObject$7 = toObject$c;
var FORCED$7 = !NATIVE_SYMBOL || fails$h(function() {
  getOwnPropertySymbolsModule$1.f(1);
});
$$D({ target: "Object", stat: true, forced: FORCED$7 }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it2) {
    var $getOwnPropertySymbols2 = getOwnPropertySymbolsModule$1.f;
    return $getOwnPropertySymbols2 ? $getOwnPropertySymbols2(toObject$7(it2)) : [];
  }
});
var defineWellKnownSymbol$k = wellKnownSymbolDefine;
defineWellKnownSymbol$k("asyncIterator");
var defineWellKnownSymbol$j = wellKnownSymbolDefine;
defineWellKnownSymbol$j("hasInstance");
var defineWellKnownSymbol$i = wellKnownSymbolDefine;
defineWellKnownSymbol$i("isConcatSpreadable");
var defineWellKnownSymbol$h = wellKnownSymbolDefine;
defineWellKnownSymbol$h("iterator");
var defineWellKnownSymbol$g = wellKnownSymbolDefine;
defineWellKnownSymbol$g("match");
var defineWellKnownSymbol$f = wellKnownSymbolDefine;
defineWellKnownSymbol$f("matchAll");
var defineWellKnownSymbol$e = wellKnownSymbolDefine;
defineWellKnownSymbol$e("replace");
var defineWellKnownSymbol$d = wellKnownSymbolDefine;
defineWellKnownSymbol$d("search");
var defineWellKnownSymbol$c = wellKnownSymbolDefine;
defineWellKnownSymbol$c("species");
var defineWellKnownSymbol$b = wellKnownSymbolDefine;
defineWellKnownSymbol$b("split");
var defineWellKnownSymbol$a = wellKnownSymbolDefine;
var defineSymbolToPrimitive = symbolDefineToPrimitive;
defineWellKnownSymbol$a("toPrimitive");
defineSymbolToPrimitive();
var getBuiltIn$4 = getBuiltIn$b;
var defineWellKnownSymbol$9 = wellKnownSymbolDefine;
var setToStringTag$4 = setToStringTag$6;
defineWellKnownSymbol$9("toStringTag");
setToStringTag$4(getBuiltIn$4("Symbol"), "Symbol");
var defineWellKnownSymbol$8 = wellKnownSymbolDefine;
defineWellKnownSymbol$8("unscopables");
var global$b = global$n;
var setToStringTag$3 = setToStringTag$6;
setToStringTag$3(global$b.JSON, "JSON", true);
var path$n = path$t;
var symbol$5 = path$n.Symbol;
var iterators = {};
var DESCRIPTORS$a = descriptors;
var hasOwn$5 = hasOwnProperty_1;
var FunctionPrototype$1 = Function.prototype;
var getDescriptor = DESCRIPTORS$a && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn$5(FunctionPrototype$1, "name");
var PROPER = EXISTS && (function something() {
}).name === "something";
var CONFIGURABLE = EXISTS && (!DESCRIPTORS$a || DESCRIPTORS$a && getDescriptor(FunctionPrototype$1, "name").configurable);
var functionName = {
  EXISTS,
  PROPER,
  CONFIGURABLE
};
var fails$g = fails$v;
var correctPrototypeGetter = !fails$g(function() {
  function F() {
  }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});
var hasOwn$4 = hasOwnProperty_1;
var isCallable$3 = isCallable$h;
var toObject$6 = toObject$c;
var sharedKey = sharedKey$4;
var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
var IE_PROTO = sharedKey("IE_PROTO");
var $Object$1 = Object;
var ObjectPrototype = $Object$1.prototype;
var objectGetPrototypeOf$1 = CORRECT_PROTOTYPE_GETTER$1 ? $Object$1.getPrototypeOf : function(O) {
  var object2 = toObject$6(O);
  if (hasOwn$4(object2, IE_PROTO))
    return object2[IE_PROTO];
  var constructor = object2.constructor;
  if (isCallable$3(constructor) && object2 instanceof constructor) {
    return constructor.prototype;
  }
  return object2 instanceof $Object$1 ? ObjectPrototype : null;
};
var fails$f = fails$v;
var isCallable$2 = isCallable$h;
var isObject$8 = isObject$h;
var create$6 = objectCreate;
var getPrototypeOf$4 = objectGetPrototypeOf$1;
var defineBuiltIn$2 = defineBuiltIn$5;
var wellKnownSymbol$a = wellKnownSymbol$l;
var ITERATOR$5 = wellKnownSymbol$a("iterator");
var BUGGY_SAFARI_ITERATORS$1 = false;
var IteratorPrototype$1;
var PrototypeOfArrayIteratorPrototype;
var arrayIterator;
if ([].keys) {
  arrayIterator = [].keys();
  if (!("next" in arrayIterator))
    BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf$4(getPrototypeOf$4(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
      IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
  }
}
var NEW_ITERATOR_PROTOTYPE = !isObject$8(IteratorPrototype$1) || fails$f(function() {
  var test2 = {};
  return IteratorPrototype$1[ITERATOR$5].call(test2) !== test2;
});
if (NEW_ITERATOR_PROTOTYPE)
  IteratorPrototype$1 = {};
else
  IteratorPrototype$1 = create$6(IteratorPrototype$1);
if (!isCallable$2(IteratorPrototype$1[ITERATOR$5])) {
  defineBuiltIn$2(IteratorPrototype$1, ITERATOR$5, function() {
    return this;
  });
}
var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$1,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};
var IteratorPrototype = iteratorsCore.IteratorPrototype;
var create$5 = objectCreate;
var createPropertyDescriptor = createPropertyDescriptor$5;
var setToStringTag$2 = setToStringTag$6;
var Iterators$5 = iterators;
var returnThis$1 = function() {
  return this;
};
var iteratorCreateConstructor = function(IteratorConstructor, NAME, next3, ENUMERABLE_NEXT) {
  var TO_STRING_TAG2 = NAME + " Iterator";
  IteratorConstructor.prototype = create$5(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next3) });
  setToStringTag$2(IteratorConstructor, TO_STRING_TAG2, false, true);
  Iterators$5[TO_STRING_TAG2] = returnThis$1;
  return IteratorConstructor;
};
var $$C = _export;
var call$3 = functionCall;
var FunctionName = functionName;
var createIteratorConstructor = iteratorCreateConstructor;
var getPrototypeOf$3 = objectGetPrototypeOf$1;
var setToStringTag$1 = setToStringTag$6;
var defineBuiltIn$1 = defineBuiltIn$5;
var wellKnownSymbol$9 = wellKnownSymbol$l;
var Iterators$4 = iterators;
var IteratorsCore = iteratorsCore;
var PROPER_FUNCTION_NAME = FunctionName.PROPER;
FunctionName.CONFIGURABLE;
IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$4 = wellKnownSymbol$9("iterator");
var KEYS = "keys";
var VALUES = "values";
var ENTRIES = "entries";
var returnThis = function() {
  return this;
};
var iteratorDefine = function(Iterable, NAME, IteratorConstructor, next3, DEFAULT, IS_SET, FORCED2) {
  createIteratorConstructor(IteratorConstructor, NAME, next3);
  var getIterationMethod = function(KIND) {
    if (KIND === DEFAULT && defaultIterator)
      return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype)
      return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS:
        return function keys4() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES:
        return function values3() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES:
        return function entries() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function() {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG2 = NAME + " Iterator";
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$4] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf$3(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      setToStringTag$1(CurrentIteratorPrototype, TO_STRING_TAG2, true, true);
      Iterators$4[TO_STRING_TAG2] = returnThis;
    }
  }
  if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values3() {
        return call$3(nativeIterator, this);
      };
    }
  }
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED2)
      for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          defineBuiltIn$1(IterablePrototype, KEY, methods[KEY]);
        }
      }
    else
      $$C({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }
  if (FORCED2 && IterablePrototype[ITERATOR$4] !== defaultIterator) {
    defineBuiltIn$1(IterablePrototype, ITERATOR$4, defaultIterator, { name: DEFAULT });
  }
  Iterators$4[NAME] = defaultIterator;
  return methods;
};
var createIterResultObject$3 = function(value, done) {
  return { value, done };
};
var toIndexedObject$4 = toIndexedObject$b;
var Iterators$3 = iterators;
var InternalStateModule$4 = internalState;
objectDefineProperty.f;
var defineIterator$2 = iteratorDefine;
var createIterResultObject$2 = createIterResultObject$3;
var ARRAY_ITERATOR = "Array Iterator";
var setInternalState$4 = InternalStateModule$4.set;
var getInternalState$1 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);
defineIterator$2(Array, "Array", function(iterated, kind) {
  setInternalState$4(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject$4(iterated),
    // target
    index: 0,
    // next index
    kind
    // kind
  });
}, function() {
  var state = getInternalState$1(this);
  var target = state.target;
  var kind = state.kind;
  var index2 = state.index++;
  if (!target || index2 >= target.length) {
    state.target = void 0;
    return createIterResultObject$2(void 0, true);
  }
  switch (kind) {
    case "keys":
      return createIterResultObject$2(index2, false);
    case "values":
      return createIterResultObject$2(target[index2], false);
  }
  return createIterResultObject$2([index2, target[index2]], false);
}, "values");
Iterators$3.Arguments = Iterators$3.Array;
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};
var DOMIterables$2 = domIterables;
var global$a = global$n;
var classof$6 = classof$c;
var createNonEnumerableProperty$1 = createNonEnumerableProperty$6;
var Iterators$2 = iterators;
var wellKnownSymbol$8 = wellKnownSymbol$l;
var TO_STRING_TAG = wellKnownSymbol$8("toStringTag");
for (COLLECTION_NAME in DOMIterables$2) {
  Collection = global$a[COLLECTION_NAME];
  CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && classof$6(CollectionPrototype) !== TO_STRING_TAG) {
    createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
  }
  Iterators$2[COLLECTION_NAME] = Iterators$2.Array;
}
var Collection;
var CollectionPrototype;
var COLLECTION_NAME;
var parent$K = symbol$5;
var symbol$4 = parent$K;
var symbol$3 = symbol$4;
var _Symbol$1 = getDefaultExportFromCjs(symbol$3);
var $$B = _export;
var isArray$7 = isArray$b;
var isConstructor3 = isConstructor$2;
var isObject$7 = isObject$h;
var toAbsoluteIndex$2 = toAbsoluteIndex$5;
var lengthOfArrayLike$5 = lengthOfArrayLike$a;
var toIndexedObject$3 = toIndexedObject$b;
var createProperty$2 = createProperty$5;
var wellKnownSymbol$7 = wellKnownSymbol$l;
var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
var nativeSlice = arraySlice$5;
var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3("slice");
var SPECIES$1 = wellKnownSymbol$7("species");
var $Array = Array;
var max$1 = Math.max;
$$B({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
  slice: function slice(start, end) {
    var O = toIndexedObject$3(this);
    var length2 = lengthOfArrayLike$5(O);
    var k = toAbsoluteIndex$2(start, length2);
    var fin = toAbsoluteIndex$2(end === void 0 ? length2 : end, length2);
    var Constructor, result, n;
    if (isArray$7(O)) {
      Constructor = O.constructor;
      if (isConstructor3(Constructor) && (Constructor === $Array || isArray$7(Constructor.prototype))) {
        Constructor = void 0;
      } else if (isObject$7(Constructor)) {
        Constructor = Constructor[SPECIES$1];
        if (Constructor === null)
          Constructor = void 0;
      }
      if (Constructor === $Array || Constructor === void 0) {
        return nativeSlice(O, k, fin);
      }
    }
    result = new (Constructor === void 0 ? $Array : Constructor)(max$1(fin - k, 0));
    for (n = 0; k < fin; k++, n++)
      if (k in O)
        createProperty$2(result, n, O[k]);
    result.length = n;
    return result;
  }
});
var entryVirtual$f = entryVirtual$h;
var slice$3 = entryVirtual$f("Array").slice;
var isPrototypeOf$g = objectIsPrototypeOf;
var method$d = slice$3;
var ArrayPrototype$f = Array.prototype;
var slice$2 = function(it2) {
  var own = it2.slice;
  return it2 === ArrayPrototype$f || isPrototypeOf$g(ArrayPrototype$f, it2) && own === ArrayPrototype$f.slice ? method$d : own;
};
var parent$J = slice$2;
var slice$1 = parent$J;
var slice2 = slice$1;
var _sliceInstanceProperty = getDefaultExportFromCjs(slice2);
var getBuiltIn$3 = getBuiltIn$b;
var uncurryThis$f = functionUncurryThis;
var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
var anObject$4 = anObject$9;
var concat$4 = uncurryThis$f([].concat);
var ownKeys$5 = getBuiltIn$3("Reflect", "ownKeys") || function ownKeys(it2) {
  var keys4 = getOwnPropertyNamesModule$1.f(anObject$4(it2));
  var getOwnPropertySymbols3 = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols3 ? concat$4(keys4, getOwnPropertySymbols3(it2)) : keys4;
};
var $$A = _export;
var isArray$6 = isArray$b;
$$A({ target: "Array", stat: true }, {
  isArray: isArray$6
});
var path$m = path$t;
var isArray$5 = path$m.Array.isArray;
var parent$I = isArray$5;
var isArray$4 = parent$I;
var isArray$3 = isArray$4;
var _Array$isArray = getDefaultExportFromCjs(isArray$3);
var $$z = _export;
var $map = arrayIteration.map;
var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2("map");
$$z({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
  map: function map(callbackfn) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$e = entryVirtual$h;
var map$6 = entryVirtual$e("Array").map;
var isPrototypeOf$f = objectIsPrototypeOf;
var method$c = map$6;
var ArrayPrototype$e = Array.prototype;
var map$5 = function(it2) {
  var own = it2.map;
  return it2 === ArrayPrototype$e || isPrototypeOf$f(ArrayPrototype$e, it2) && own === ArrayPrototype$e.map ? method$c : own;
};
var parent$H = map$5;
var map$4 = parent$H;
var map$3 = map$4;
var _mapInstanceProperty = getDefaultExportFromCjs(map$3);
var $$y = _export;
var toObject$5 = toObject$c;
var nativeKeys = objectKeys$4;
var fails$e = fails$v;
var FAILS_ON_PRIMITIVES$3 = fails$e(function() {
  nativeKeys(1);
});
$$y({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$3 }, {
  keys: function keys2(it2) {
    return nativeKeys(toObject$5(it2));
  }
});
var path$l = path$t;
var keys$2 = path$l.Object.keys;
var parent$G = keys$2;
var keys$1 = parent$G;
var keys3 = keys$1;
var _Object$keys = getDefaultExportFromCjs(keys3);
var $$x = _export;
var uncurryThis$e = functionUncurryThis;
var $Date = Date;
var thisTimeValue = uncurryThis$e($Date.prototype.getTime);
$$x({ target: "Date", stat: true }, {
  now: function now() {
    return thisTimeValue(new $Date());
  }
});
var path$k = path$t;
var now$3 = path$k.Date.now;
var parent$F = now$3;
var now$2 = parent$F;
var now$1 = now$2;
var _Date$now = getDefaultExportFromCjs(now$1);
var fails$d = fails$v;
var arrayMethodIsStrict$6 = function(METHOD_NAME, argument) {
  var method2 = [][METHOD_NAME];
  return !!method2 && fails$d(function() {
    method2.call(null, argument || function() {
      return 1;
    }, 1);
  });
};
var $forEach = arrayIteration.forEach;
var arrayMethodIsStrict$5 = arrayMethodIsStrict$6;
var STRICT_METHOD$3 = arrayMethodIsStrict$5("forEach");
var arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
} : [].forEach;
var $$w = _export;
var forEach$6 = arrayForEach;
$$w({ target: "Array", proto: true, forced: [].forEach !== forEach$6 }, {
  forEach: forEach$6
});
var entryVirtual$d = entryVirtual$h;
var forEach$5 = entryVirtual$d("Array").forEach;
var parent$E = forEach$5;
var forEach$4 = parent$E;
var classof$5 = classof$c;
var hasOwn$3 = hasOwnProperty_1;
var isPrototypeOf$e = objectIsPrototypeOf;
var method$b = forEach$4;
var ArrayPrototype$d = Array.prototype;
var DOMIterables$1 = {
  DOMTokenList: true,
  NodeList: true
};
var forEach$3 = function(it2) {
  var own = it2.forEach;
  return it2 === ArrayPrototype$d || isPrototypeOf$e(ArrayPrototype$d, it2) && own === ArrayPrototype$d.forEach || hasOwn$3(DOMIterables$1, classof$5(it2)) ? method$b : own;
};
var forEach$2 = forEach$3;
var _forEachInstanceProperty = getDefaultExportFromCjs(forEach$2);
var $$v = _export;
var uncurryThis$d = functionUncurryThis;
var isArray$2 = isArray$b;
var nativeReverse = uncurryThis$d([].reverse);
var test$1 = [1, 2];
$$v({ target: "Array", proto: true, forced: String(test$1) === String(test$1.reverse()) }, {
  reverse: function reverse() {
    if (isArray$2(this))
      this.length = this.length;
    return nativeReverse(this);
  }
});
var entryVirtual$c = entryVirtual$h;
var reverse$3 = entryVirtual$c("Array").reverse;
var isPrototypeOf$d = objectIsPrototypeOf;
var method$a = reverse$3;
var ArrayPrototype$c = Array.prototype;
var reverse$2 = function(it2) {
  var own = it2.reverse;
  return it2 === ArrayPrototype$c || isPrototypeOf$d(ArrayPrototype$c, it2) && own === ArrayPrototype$c.reverse ? method$a : own;
};
var parent$D = reverse$2;
var reverse$1 = parent$D;
var reverse2 = reverse$1;
var _reverseInstanceProperty = getDefaultExportFromCjs(reverse2);
var DESCRIPTORS$9 = descriptors;
var isArray$1 = isArray$b;
var $TypeError$7 = TypeError;
var getOwnPropertyDescriptor$4 = Object.getOwnPropertyDescriptor;
var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS$9 && !function() {
  if (this !== void 0)
    return true;
  try {
    Object.defineProperty([], "length", { writable: false }).length = 1;
  } catch (error) {
    return error instanceof TypeError;
  }
}();
var arraySetLength = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length2) {
  if (isArray$1(O) && !getOwnPropertyDescriptor$4(O, "length").writable) {
    throw new $TypeError$7("Cannot set read only .length");
  }
  return O.length = length2;
} : function(O, length2) {
  return O.length = length2;
};
var tryToString$2 = tryToString$5;
var $TypeError$6 = TypeError;
var deletePropertyOrThrow$2 = function(O, P) {
  if (!delete O[P])
    throw new $TypeError$6("Cannot delete property " + tryToString$2(P) + " of " + tryToString$2(O));
};
var $$u = _export;
var toObject$4 = toObject$c;
var toAbsoluteIndex$1 = toAbsoluteIndex$5;
var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
var lengthOfArrayLike$4 = lengthOfArrayLike$a;
var setArrayLength = arraySetLength;
var doesNotExceedSafeInteger = doesNotExceedSafeInteger$2;
var arraySpeciesCreate = arraySpeciesCreate$3;
var createProperty$1 = createProperty$5;
var deletePropertyOrThrow$1 = deletePropertyOrThrow$2;
var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1("splice");
var max = Math.max;
var min = Math.min;
$$u({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
  splice: function splice(start, deleteCount) {
    var O = toObject$4(this);
    var len = lengthOfArrayLike$4(O);
    var actualStart = toAbsoluteIndex$1(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity$1(deleteCount), 0), len - actualStart);
    }
    doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O)
        createProperty$1(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O)
          O[to] = O[from];
        else
          deletePropertyOrThrow$1(O, to);
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--)
        deletePropertyOrThrow$1(O, k - 1);
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O)
          O[to] = O[from];
        else
          deletePropertyOrThrow$1(O, to);
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    setArrayLength(O, len - actualDeleteCount + insertCount);
    return A;
  }
});
var entryVirtual$b = entryVirtual$h;
var splice$4 = entryVirtual$b("Array").splice;
var isPrototypeOf$c = objectIsPrototypeOf;
var method$9 = splice$4;
var ArrayPrototype$b = Array.prototype;
var splice$3 = function(it2) {
  var own = it2.splice;
  return it2 === ArrayPrototype$b || isPrototypeOf$c(ArrayPrototype$b, it2) && own === ArrayPrototype$b.splice ? method$9 : own;
};
var parent$C = splice$3;
var splice$2 = parent$C;
var splice$1 = splice$2;
var _spliceInstanceProperty = getDefaultExportFromCjs(splice$1);
var $$t = _export;
var $includes = arrayIncludes.includes;
var fails$c = fails$v;
var BROKEN_ON_SPARSE = fails$c(function() {
  return !Array(1).includes();
});
$$t({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$a = entryVirtual$h;
var includes$4 = entryVirtual$a("Array").includes;
var isObject$6 = isObject$h;
var classof$4 = classofRaw$2;
var wellKnownSymbol$6 = wellKnownSymbol$l;
var MATCH$1 = wellKnownSymbol$6("match");
var isRegexp = function(it2) {
  var isRegExp2;
  return isObject$6(it2) && ((isRegExp2 = it2[MATCH$1]) !== void 0 ? !!isRegExp2 : classof$4(it2) === "RegExp");
};
var isRegExp = isRegexp;
var $TypeError$5 = TypeError;
var notARegexp = function(it2) {
  if (isRegExp(it2)) {
    throw new $TypeError$5("The method doesn't accept regular expressions");
  }
  return it2;
};
var wellKnownSymbol$5 = wellKnownSymbol$l;
var MATCH = wellKnownSymbol$5("match");
var correctIsRegexpLogic = function(METHOD_NAME) {
  var regexp = /./;
  try {
    "/./"[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return "/./"[METHOD_NAME](regexp);
    } catch (error2) {
    }
  }
  return false;
};
var $$s = _export;
var uncurryThis$c = functionUncurryThis;
var notARegExp = notARegexp;
var requireObjectCoercible$2 = requireObjectCoercible$5;
var toString$6 = toString$a;
var correctIsRegExpLogic = correctIsRegexpLogic;
var stringIndexOf = uncurryThis$c("".indexOf);
$$s({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
  includes: function includes2(searchString) {
    return !!~stringIndexOf(
      toString$6(requireObjectCoercible$2(this)),
      toString$6(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : void 0
    );
  }
});
var entryVirtual$9 = entryVirtual$h;
var includes$3 = entryVirtual$9("String").includes;
var isPrototypeOf$b = objectIsPrototypeOf;
var arrayMethod = includes$4;
var stringMethod = includes$3;
var ArrayPrototype$a = Array.prototype;
var StringPrototype = String.prototype;
var includes$2 = function(it2) {
  var own = it2.includes;
  if (it2 === ArrayPrototype$a || isPrototypeOf$b(ArrayPrototype$a, it2) && own === ArrayPrototype$a.includes)
    return arrayMethod;
  if (typeof it2 == "string" || it2 === StringPrototype || isPrototypeOf$b(StringPrototype, it2) && own === StringPrototype.includes) {
    return stringMethod;
  }
  return own;
};
var parent$B = includes$2;
var includes$1 = parent$B;
var includes3 = includes$1;
var _includesInstanceProperty = getDefaultExportFromCjs(includes3);
var $$r = _export;
var fails$b = fails$v;
var toObject$3 = toObject$c;
var nativeGetPrototypeOf = objectGetPrototypeOf$1;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
var FAILS_ON_PRIMITIVES$2 = fails$b(function() {
  nativeGetPrototypeOf(1);
});
$$r({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$2, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it2) {
    return nativeGetPrototypeOf(toObject$3(it2));
  }
});
var path$j = path$t;
var getPrototypeOf$2 = path$j.Object.getPrototypeOf;
var parent$A = getPrototypeOf$2;
var getPrototypeOf$1 = parent$A;
var getPrototypeOf2 = getPrototypeOf$1;
var _Object$getPrototypeOf = getDefaultExportFromCjs(getPrototypeOf2);
var entryVirtual$8 = entryVirtual$h;
var concat$3 = entryVirtual$8("Array").concat;
var isPrototypeOf$a = objectIsPrototypeOf;
var method$8 = concat$3;
var ArrayPrototype$9 = Array.prototype;
var concat$2 = function(it2) {
  var own = it2.concat;
  return it2 === ArrayPrototype$9 || isPrototypeOf$a(ArrayPrototype$9, it2) && own === ArrayPrototype$9.concat ? method$8 : own;
};
var parent$z = concat$2;
var concat$1 = parent$z;
var concat2 = concat$1;
var _concatInstanceProperty = getDefaultExportFromCjs(concat2);
var $$q = _export;
var $filter = arrayIteration.filter;
var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
$$q({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  filter: function filter(callbackfn) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$7 = entryVirtual$h;
var filter$3 = entryVirtual$7("Array").filter;
var isPrototypeOf$9 = objectIsPrototypeOf;
var method$7 = filter$3;
var ArrayPrototype$8 = Array.prototype;
var filter$2 = function(it2) {
  var own = it2.filter;
  return it2 === ArrayPrototype$8 || isPrototypeOf$9(ArrayPrototype$8, it2) && own === ArrayPrototype$8.filter ? method$7 : own;
};
var parent$y = filter$2;
var filter$1 = parent$y;
var filter2 = filter$1;
var _filterInstanceProperty = getDefaultExportFromCjs(filter2);
var DESCRIPTORS$8 = descriptors;
var fails$a = fails$v;
var uncurryThis$b = functionUncurryThis;
var objectGetPrototypeOf = objectGetPrototypeOf$1;
var objectKeys = objectKeys$4;
var toIndexedObject$2 = toIndexedObject$b;
var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
var propertyIsEnumerable3 = uncurryThis$b($propertyIsEnumerable);
var push$1 = uncurryThis$b([].push);
var IE_BUG = DESCRIPTORS$8 && fails$a(function() {
  var O = /* @__PURE__ */ Object.create(null);
  O[2] = 2;
  return !propertyIsEnumerable3(O, 2);
});
var createMethod$3 = function(TO_ENTRIES) {
  return function(it2) {
    var O = toIndexedObject$2(it2);
    var keys4 = objectKeys(O);
    var IE_WORKAROUND = IE_BUG && objectGetPrototypeOf(O) === null;
    var length2 = keys4.length;
    var i = 0;
    var result = [];
    var key;
    while (length2 > i) {
      key = keys4[i++];
      if (!DESCRIPTORS$8 || (IE_WORKAROUND ? key in O : propertyIsEnumerable3(O, key))) {
        push$1(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};
var objectToArray = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod$3(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod$3(false)
};
var $$p = _export;
var $values = objectToArray.values;
$$p({ target: "Object", stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});
var path$i = path$t;
var values$6 = path$i.Object.values;
var parent$x = values$6;
var values$5 = parent$x;
var values$4 = values$5;
var _Object$values = getDefaultExportFromCjs(values$4);
var whitespaces$3 = "	\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF";
var uncurryThis$a = functionUncurryThis;
var requireObjectCoercible$1 = requireObjectCoercible$5;
var toString$5 = toString$a;
var whitespaces$2 = whitespaces$3;
var replace = uncurryThis$a("".replace);
var ltrim = RegExp("^[" + whitespaces$2 + "]+");
var rtrim = RegExp("(^|[^" + whitespaces$2 + "])[" + whitespaces$2 + "]+$");
var createMethod$2 = function(TYPE) {
  return function($this) {
    var string2 = toString$5(requireObjectCoercible$1($this));
    if (TYPE & 1)
      string2 = replace(string2, ltrim, "");
    if (TYPE & 2)
      string2 = replace(string2, rtrim, "$1");
    return string2;
  };
};
var stringTrim = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod$2(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod$2(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod$2(3)
};
var global$9 = global$n;
var fails$9 = fails$v;
var uncurryThis$9 = functionUncurryThis;
var toString$4 = toString$a;
var trim$1 = stringTrim.trim;
var whitespaces$1 = whitespaces$3;
var $parseInt$1 = global$9.parseInt;
var Symbol$4 = global$9.Symbol;
var ITERATOR$3 = Symbol$4 && Symbol$4.iterator;
var hex = /^[+-]?0x/i;
var exec = uncurryThis$9(hex.exec);
var FORCED$6 = $parseInt$1(whitespaces$1 + "08") !== 8 || $parseInt$1(whitespaces$1 + "0x16") !== 22 || ITERATOR$3 && !fails$9(function() {
  $parseInt$1(Object(ITERATOR$3));
});
var numberParseInt = FORCED$6 ? function parseInt2(string2, radix) {
  var S = trim$1(toString$4(string2));
  return $parseInt$1(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
} : $parseInt$1;
var $$o = _export;
var $parseInt = numberParseInt;
$$o({ global: true, forced: parseInt !== $parseInt }, {
  parseInt: $parseInt
});
var path$h = path$t;
var _parseInt$3 = path$h.parseInt;
var parent$w = _parseInt$3;
var _parseInt$2 = parent$w;
var _parseInt = _parseInt$2;
var _parseInt$1 = getDefaultExportFromCjs(_parseInt);
var $$n = _export;
var uncurryThis$8 = functionUncurryThisClause;
var $indexOf = arrayIncludes.indexOf;
var arrayMethodIsStrict$4 = arrayMethodIsStrict$6;
var nativeIndexOf = uncurryThis$8([].indexOf);
var NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;
var FORCED$5 = NEGATIVE_ZERO || !arrayMethodIsStrict$4("indexOf");
$$n({ target: "Array", proto: true, forced: FORCED$5 }, {
  indexOf: function indexOf(searchElement) {
    var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
    return NEGATIVE_ZERO ? nativeIndexOf(this, searchElement, fromIndex) || 0 : $indexOf(this, searchElement, fromIndex);
  }
});
var entryVirtual$6 = entryVirtual$h;
var indexOf$3 = entryVirtual$6("Array").indexOf;
var isPrototypeOf$8 = objectIsPrototypeOf;
var method$6 = indexOf$3;
var ArrayPrototype$7 = Array.prototype;
var indexOf$2 = function(it2) {
  var own = it2.indexOf;
  return it2 === ArrayPrototype$7 || isPrototypeOf$8(ArrayPrototype$7, it2) && own === ArrayPrototype$7.indexOf ? method$6 : own;
};
var parent$v = indexOf$2;
var indexOf$1 = parent$v;
var indexOf2 = indexOf$1;
var _indexOfInstanceProperty = getDefaultExportFromCjs(indexOf2);
var $$m = _export;
var DESCRIPTORS$7 = descriptors;
var create$4 = objectCreate;
$$m({ target: "Object", stat: true, sham: !DESCRIPTORS$7 }, {
  create: create$4
});
var path$g = path$t;
var Object$5 = path$g.Object;
var create$3 = function create3(P, D) {
  return Object$5.create(P, D);
};
var parent$u = create$3;
var create$2 = parent$u;
var create$1 = create$2;
var _Object$create = getDefaultExportFromCjs(create$1);
var path$f = path$t;
var apply$1 = functionApply;
if (!path$f.JSON)
  path$f.JSON = { stringify: JSON.stringify };
var stringify$2 = function stringify(it2, replacer, space) {
  return apply$1(path$f.JSON.stringify, null, arguments);
};
var parent$t = stringify$2;
var stringify$1 = parent$t;
var stringify2 = stringify$1;
var _JSON$stringify = getDefaultExportFromCjs(stringify2);
var engineIsBun = typeof Bun == "function" && Bun && typeof Bun.version == "string";
var $TypeError$4 = TypeError;
var validateArgumentsLength$1 = function(passed, required) {
  if (passed < required)
    throw new $TypeError$4("Not enough arguments");
  return passed;
};
var global$8 = global$n;
var apply = functionApply;
var isCallable$1 = isCallable$h;
var ENGINE_IS_BUN = engineIsBun;
var USER_AGENT = engineUserAgent;
var arraySlice$1 = arraySlice$5;
var validateArgumentsLength = validateArgumentsLength$1;
var Function$1 = global$8.Function;
var WRAP = /MSIE .\./.test(USER_AGENT) || ENGINE_IS_BUN && function() {
  var version2 = global$8.Bun.version.split(".");
  return version2.length < 3 || version2[0] === "0" && (version2[1] < 3 || version2[1] === "3" && version2[2] === "0");
}();
var schedulersFix$2 = function(scheduler, hasTimeArg) {
  var firstParamIndex = hasTimeArg ? 2 : 1;
  return WRAP ? function(handler, timeout) {
    var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;
    var fn = isCallable$1(handler) ? handler : Function$1(handler);
    var params = boundArgs ? arraySlice$1(arguments, firstParamIndex) : [];
    var callback = boundArgs ? function() {
      apply(fn, this, params);
    } : fn;
    return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
  } : scheduler;
};
var $$l = _export;
var global$7 = global$n;
var schedulersFix$1 = schedulersFix$2;
var setInterval$2 = schedulersFix$1(global$7.setInterval, true);
$$l({ global: true, bind: true, forced: global$7.setInterval !== setInterval$2 }, {
  setInterval: setInterval$2
});
var $$k = _export;
var global$6 = global$n;
var schedulersFix = schedulersFix$2;
var setTimeout$3 = schedulersFix(global$6.setTimeout, true);
$$k({ global: true, bind: true, forced: global$6.setTimeout !== setTimeout$3 }, {
  setTimeout: setTimeout$3
});
var path$e = path$t;
var setTimeout$2 = path$e.setTimeout;
var setTimeout$1 = setTimeout$2;
var _setTimeout = getDefaultExportFromCjs(setTimeout$1);
var toObject$2 = toObject$c;
var toAbsoluteIndex = toAbsoluteIndex$5;
var lengthOfArrayLike$3 = lengthOfArrayLike$a;
var arrayFill = function fill(value) {
  var O = toObject$2(this);
  var length2 = lengthOfArrayLike$3(O);
  var argumentsLength = arguments.length;
  var index2 = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length2);
  var end = argumentsLength > 2 ? arguments[2] : void 0;
  var endPos = end === void 0 ? length2 : toAbsoluteIndex(end, length2);
  while (endPos > index2)
    O[index2++] = value;
  return O;
};
var $$j = _export;
var fill$4 = arrayFill;
$$j({ target: "Array", proto: true }, {
  fill: fill$4
});
var entryVirtual$5 = entryVirtual$h;
var fill$3 = entryVirtual$5("Array").fill;
var isPrototypeOf$7 = objectIsPrototypeOf;
var method$5 = fill$3;
var ArrayPrototype$6 = Array.prototype;
var fill$2 = function(it2) {
  var own = it2.fill;
  return it2 === ArrayPrototype$6 || isPrototypeOf$7(ArrayPrototype$6, it2) && own === ArrayPrototype$6.fill ? method$5 : own;
};
var parent$s = fill$2;
var fill$1 = parent$s;
var fill2 = fill$1;
var _fillInstanceProperty = getDefaultExportFromCjs(fill2);
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var assign2;
if (typeof Object.assign !== "function") {
  assign2 = function assign3(target) {
    if (target === void 0 || target === null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    var output = Object(target);
    for (var index2 = 1; index2 < arguments.length; index2++) {
      var source = arguments[index2];
      if (source !== void 0 && source !== null) {
        for (var nextKey in source) {
          if (source.hasOwnProperty(nextKey)) {
            output[nextKey] = source[nextKey];
          }
        }
      }
    }
    return output;
  };
} else {
  assign2 = Object.assign;
}
var assign$1 = assign2;
var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
var TEST_ELEMENT = typeof document === "undefined" ? {
  style: {}
} : document.createElement("div");
var TYPE_FUNCTION = "function";
var round = Math.round;
var abs$1 = Math.abs;
var now2 = Date.now;
function prefixed(obj, property) {
  var prefix;
  var prop;
  var camelProp = property[0].toUpperCase() + property.slice(1);
  var i = 0;
  while (i < VENDOR_PREFIXES.length) {
    prefix = VENDOR_PREFIXES[i];
    prop = prefix ? prefix + camelProp : property;
    if (prop in obj) {
      return prop;
    }
    i++;
  }
  return void 0;
}
var win;
if (typeof window === "undefined") {
  win = {};
} else {
  win = window;
}
var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== void 0;
function getTouchActionProps() {
  if (!NATIVE_TOUCH_ACTION) {
    return false;
  }
  var touchMap = {};
  var cssSupports = win.CSS && win.CSS.supports;
  ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
    return touchMap[val] = cssSupports ? win.CSS.supports("touch-action", val) : true;
  });
  return touchMap;
}
var TOUCH_ACTION_COMPUTE = "compute";
var TOUCH_ACTION_AUTO = "auto";
var TOUCH_ACTION_MANIPULATION = "manipulation";
var TOUCH_ACTION_NONE = "none";
var TOUCH_ACTION_PAN_X = "pan-x";
var TOUCH_ACTION_PAN_Y = "pan-y";
var TOUCH_ACTION_MAP = getTouchActionProps();
var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH = "ontouchstart" in win;
var SUPPORT_POINTER_EVENTS = prefixed(win, "PointerEvent") !== void 0;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
var INPUT_TYPE_TOUCH = "touch";
var INPUT_TYPE_PEN = "pen";
var INPUT_TYPE_MOUSE = "mouse";
var INPUT_TYPE_KINECT = "kinect";
var COMPUTE_INTERVAL = 25;
var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;
var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;
var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
var PROPS_XY = ["x", "y"];
var PROPS_CLIENT_XY = ["clientX", "clientY"];
function each(obj, iterator2, context) {
  var i;
  if (!obj) {
    return;
  }
  if (obj.forEach) {
    obj.forEach(iterator2, context);
  } else if (obj.length !== void 0) {
    i = 0;
    while (i < obj.length) {
      iterator2.call(context, obj[i], i, obj);
      i++;
    }
  } else {
    for (i in obj) {
      obj.hasOwnProperty(i) && iterator2.call(context, obj[i], i, obj);
    }
  }
}
function boolOrFn(val, args) {
  if (typeof val === TYPE_FUNCTION) {
    return val.apply(args ? args[0] || void 0 : void 0, args);
  }
  return val;
}
function inStr(str, find2) {
  return str.indexOf(find2) > -1;
}
function cleanTouchActions(actions) {
  if (inStr(actions, TOUCH_ACTION_NONE)) {
    return TOUCH_ACTION_NONE;
  }
  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
  if (hasPanX && hasPanY) {
    return TOUCH_ACTION_NONE;
  }
  if (hasPanX || hasPanY) {
    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
  }
  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
    return TOUCH_ACTION_MANIPULATION;
  }
  return TOUCH_ACTION_AUTO;
}
var TouchAction = function() {
  function TouchAction2(manager, value) {
    this.manager = manager;
    this.set(value);
  }
  var _proto = TouchAction2.prototype;
  _proto.set = function set2(value) {
    if (value === TOUCH_ACTION_COMPUTE) {
      value = this.compute();
    }
    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
    }
    this.actions = value.toLowerCase().trim();
  };
  _proto.update = function update() {
    this.set(this.manager.options.touchAction);
  };
  _proto.compute = function compute() {
    var actions = [];
    each(this.manager.recognizers, function(recognizer) {
      if (boolOrFn(recognizer.options.enable, [recognizer])) {
        actions = actions.concat(recognizer.getTouchAction());
      }
    });
    return cleanTouchActions(actions.join(" "));
  };
  _proto.preventDefaults = function preventDefaults(input) {
    var srcEvent = input.srcEvent;
    var direction = input.offsetDirection;
    if (this.manager.session.prevented) {
      srcEvent.preventDefault();
      return;
    }
    var actions = this.actions;
    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
    if (hasNone) {
      var isTapPointer = input.pointers.length === 1;
      var isTapMovement = input.distance < 2;
      var isTapTouchTime = input.deltaTime < 250;
      if (isTapPointer && isTapMovement && isTapTouchTime) {
        return;
      }
    }
    if (hasPanX && hasPanY) {
      return;
    }
    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
      return this.preventSrc(srcEvent);
    }
  };
  _proto.preventSrc = function preventSrc(srcEvent) {
    this.manager.session.prevented = true;
    srcEvent.preventDefault();
  };
  return TouchAction2;
}();
function hasParent(node, parent2) {
  while (node) {
    if (node === parent2) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
function getCenter(pointers) {
  var pointersLength = pointers.length;
  if (pointersLength === 1) {
    return {
      x: round(pointers[0].clientX),
      y: round(pointers[0].clientY)
    };
  }
  var x = 0;
  var y = 0;
  var i = 0;
  while (i < pointersLength) {
    x += pointers[i].clientX;
    y += pointers[i].clientY;
    i++;
  }
  return {
    x: round(x / pointersLength),
    y: round(y / pointersLength)
  };
}
function simpleCloneInputData(input) {
  var pointers = [];
  var i = 0;
  while (i < input.pointers.length) {
    pointers[i] = {
      clientX: round(input.pointers[i].clientX),
      clientY: round(input.pointers[i].clientY)
    };
    i++;
  }
  return {
    timeStamp: now2(),
    pointers,
    center: getCenter(pointers),
    deltaX: input.deltaX,
    deltaY: input.deltaY
  };
}
function getDistance(p1, p2, props) {
  if (!props) {
    props = PROPS_XY;
  }
  var x = p2[props[0]] - p1[props[0]];
  var y = p2[props[1]] - p1[props[1]];
  return Math.sqrt(x * x + y * y);
}
function getAngle(p1, p2, props) {
  if (!props) {
    props = PROPS_XY;
  }
  var x = p2[props[0]] - p1[props[0]];
  var y = p2[props[1]] - p1[props[1]];
  return Math.atan2(y, x) * 180 / Math.PI;
}
function getDirection(x, y) {
  if (x === y) {
    return DIRECTION_NONE;
  }
  if (abs$1(x) >= abs$1(y)) {
    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
  }
  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}
function computeDeltaXY(session, input) {
  var center = input.center;
  var offset = session.offsetDelta || {};
  var prevDelta = session.prevDelta || {};
  var prevInput = session.prevInput || {};
  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
    prevDelta = session.prevDelta = {
      x: prevInput.deltaX || 0,
      y: prevInput.deltaY || 0
    };
    offset = session.offsetDelta = {
      x: center.x,
      y: center.y
    };
  }
  input.deltaX = prevDelta.x + (center.x - offset.x);
  input.deltaY = prevDelta.y + (center.y - offset.y);
}
function getVelocity(deltaTime, x, y) {
  return {
    x: x / deltaTime || 0,
    y: y / deltaTime || 0
  };
}
function getScale(start, end) {
  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}
function getRotation(start, end) {
  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}
function computeIntervalInputData(session, input) {
  var last = session.lastInterval || input;
  var deltaTime = input.timeStamp - last.timeStamp;
  var velocity;
  var velocityX;
  var velocityY;
  var direction;
  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === void 0)) {
    var deltaX = input.deltaX - last.deltaX;
    var deltaY = input.deltaY - last.deltaY;
    var v = getVelocity(deltaTime, deltaX, deltaY);
    velocityX = v.x;
    velocityY = v.y;
    velocity = abs$1(v.x) > abs$1(v.y) ? v.x : v.y;
    direction = getDirection(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }
  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}
function computeInputData(manager, input) {
  var session = manager.session;
  var pointers = input.pointers;
  var pointersLength = pointers.length;
  if (!session.firstInput) {
    session.firstInput = simpleCloneInputData(input);
  }
  if (pointersLength > 1 && !session.firstMultiple) {
    session.firstMultiple = simpleCloneInputData(input);
  } else if (pointersLength === 1) {
    session.firstMultiple = false;
  }
  var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  var center = input.center = getCenter(pointers);
  input.timeStamp = now2();
  input.deltaTime = input.timeStamp - firstInput.timeStamp;
  input.angle = getAngle(offsetCenter, center);
  input.distance = getDistance(offsetCenter, center);
  computeDeltaXY(session, input);
  input.offsetDirection = getDirection(input.deltaX, input.deltaY);
  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
  input.overallVelocityX = overallVelocity.x;
  input.overallVelocityY = overallVelocity.y;
  input.overallVelocity = abs$1(overallVelocity.x) > abs$1(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  computeIntervalInputData(session, input);
  var target = manager.element;
  var srcEvent = input.srcEvent;
  var srcEventTarget;
  if (srcEvent.composedPath) {
    srcEventTarget = srcEvent.composedPath()[0];
  } else if (srcEvent.path) {
    srcEventTarget = srcEvent.path[0];
  } else {
    srcEventTarget = srcEvent.target;
  }
  if (hasParent(srcEventTarget, target)) {
    target = srcEventTarget;
  }
  input.target = target;
}
function inputHandler(manager, eventType, input) {
  var pointersLen = input.pointers.length;
  var changedPointersLen = input.changedPointers.length;
  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
  input.isFirst = !!isFirst;
  input.isFinal = !!isFinal;
  if (isFirst) {
    manager.session = {};
  }
  input.eventType = eventType;
  computeInputData(manager, input);
  manager.emit("hammer.input", input);
  manager.recognize(input);
  manager.session.prevInput = input;
}
function splitStr(str) {
  return str.trim().split(/\s+/g);
}
function addEventListeners(target, types, handler) {
  each(splitStr(types), function(type) {
    target.addEventListener(type, handler, false);
  });
}
function removeEventListeners(target, types, handler) {
  each(splitStr(types), function(type) {
    target.removeEventListener(type, handler, false);
  });
}
function getWindowForElement(element) {
  var doc = element.ownerDocument || element;
  return doc.defaultView || doc.parentWindow || window;
}
var Input = function() {
  function Input2(manager, callback) {
    var self2 = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    this.domHandler = function(ev) {
      if (boolOrFn(manager.options.enable, [manager])) {
        self2.handler(ev);
      }
    };
    this.init();
  }
  var _proto = Input2.prototype;
  _proto.handler = function handler() {
  };
  _proto.init = function init() {
    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  };
  _proto.destroy = function destroy() {
    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  };
  return Input2;
}();
function inArray(src, find2, findByKey) {
  if (src.indexOf && !findByKey) {
    return src.indexOf(find2);
  } else {
    var i = 0;
    while (i < src.length) {
      if (findByKey && src[i][findByKey] == find2 || !findByKey && src[i] === find2) {
        return i;
      }
      i++;
    }
    return -1;
  }
}
var POINTER_INPUT_MAP = {
  pointerdown: INPUT_START,
  pointermove: INPUT_MOVE,
  pointerup: INPUT_END,
  pointercancel: INPUT_CANCEL,
  pointerout: INPUT_CANCEL
};
var IE10_POINTER_TYPE_ENUM = {
  2: INPUT_TYPE_TOUCH,
  3: INPUT_TYPE_PEN,
  4: INPUT_TYPE_MOUSE,
  5: INPUT_TYPE_KINECT
  // see https://twitter.com/jacobrossi/status/480596438489890816
};
var POINTER_ELEMENT_EVENTS = "pointerdown";
var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
if (win.MSPointerEvent && !win.PointerEvent) {
  POINTER_ELEMENT_EVENTS = "MSPointerDown";
  POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
}
var PointerEventInput = function(_Input) {
  _inheritsLoose(PointerEventInput2, _Input);
  function PointerEventInput2() {
    var _this;
    var proto = PointerEventInput2.prototype;
    proto.evEl = POINTER_ELEMENT_EVENTS;
    proto.evWin = POINTER_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.store = _this.manager.session.pointerEvents = [];
    return _this;
  }
  var _proto = PointerEventInput2.prototype;
  _proto.handler = function handler(ev) {
    var store = this.store;
    var removePointer = false;
    var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
    var isTouch = pointerType === INPUT_TYPE_TOUCH;
    var storeIndex = inArray(store, ev.pointerId, "pointerId");
    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
      if (storeIndex < 0) {
        store.push(ev);
        storeIndex = store.length - 1;
      }
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
      removePointer = true;
    }
    if (storeIndex < 0) {
      return;
    }
    store[storeIndex] = ev;
    this.callback(this.manager, eventType, {
      pointers: store,
      changedPointers: [ev],
      pointerType,
      srcEvent: ev
    });
    if (removePointer) {
      store.splice(storeIndex, 1);
    }
  };
  return PointerEventInput2;
}(Input);
function toArray(obj) {
  return Array.prototype.slice.call(obj, 0);
}
function uniqueArray(src, key, sort3) {
  var results = [];
  var values3 = [];
  var i = 0;
  while (i < src.length) {
    var val = key ? src[i][key] : src[i];
    if (inArray(values3, val) < 0) {
      results.push(src[i]);
    }
    values3[i] = val;
    i++;
  }
  if (sort3) {
    if (!key) {
      results = results.sort();
    } else {
      results = results.sort(function(a, b) {
        return a[key] > b[key];
      });
    }
  }
  return results;
}
var TOUCH_INPUT_MAP = {
  touchstart: INPUT_START,
  touchmove: INPUT_MOVE,
  touchend: INPUT_END,
  touchcancel: INPUT_CANCEL
};
var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
var TouchInput = function(_Input) {
  _inheritsLoose(TouchInput2, _Input);
  function TouchInput2() {
    var _this;
    TouchInput2.prototype.evTarget = TOUCH_TARGET_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.targetIds = {};
    return _this;
  }
  var _proto = TouchInput2.prototype;
  _proto.handler = function handler(ev) {
    var type = TOUCH_INPUT_MAP[ev.type];
    var touches = getTouches.call(this, ev, type);
    if (!touches) {
      return;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH,
      srcEvent: ev
    });
  };
  return TouchInput2;
}(Input);
function getTouches(ev, type) {
  var allTouches = toArray(ev.touches);
  var targetIds = this.targetIds;
  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
    targetIds[allTouches[0].identifier] = true;
    return [allTouches, allTouches];
  }
  var i;
  var targetTouches;
  var changedTouches = toArray(ev.changedTouches);
  var changedTargetTouches = [];
  var target = this.target;
  targetTouches = allTouches.filter(function(touch) {
    return hasParent(touch.target, target);
  });
  if (type === INPUT_START) {
    i = 0;
    while (i < targetTouches.length) {
      targetIds[targetTouches[i].identifier] = true;
      i++;
    }
  }
  i = 0;
  while (i < changedTouches.length) {
    if (targetIds[changedTouches[i].identifier]) {
      changedTargetTouches.push(changedTouches[i]);
    }
    if (type & (INPUT_END | INPUT_CANCEL)) {
      delete targetIds[changedTouches[i].identifier];
    }
    i++;
  }
  if (!changedTargetTouches.length) {
    return;
  }
  return [
    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
    uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
    changedTargetTouches
  ];
}
var MOUSE_INPUT_MAP = {
  mousedown: INPUT_START,
  mousemove: INPUT_MOVE,
  mouseup: INPUT_END
};
var MOUSE_ELEMENT_EVENTS = "mousedown";
var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
var MouseInput = function(_Input) {
  _inheritsLoose(MouseInput2, _Input);
  function MouseInput2() {
    var _this;
    var proto = MouseInput2.prototype;
    proto.evEl = MOUSE_ELEMENT_EVENTS;
    proto.evWin = MOUSE_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.pressed = false;
    return _this;
  }
  var _proto = MouseInput2.prototype;
  _proto.handler = function handler(ev) {
    var eventType = MOUSE_INPUT_MAP[ev.type];
    if (eventType & INPUT_START && ev.button === 0) {
      this.pressed = true;
    }
    if (eventType & INPUT_MOVE && ev.which !== 1) {
      eventType = INPUT_END;
    }
    if (!this.pressed) {
      return;
    }
    if (eventType & INPUT_END) {
      this.pressed = false;
    }
    this.callback(this.manager, eventType, {
      pointers: [ev],
      changedPointers: [ev],
      pointerType: INPUT_TYPE_MOUSE,
      srcEvent: ev
    });
  };
  return MouseInput2;
}(Input);
var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;
function setLastTouch(eventData) {
  var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
  if (touch.identifier === this.primaryTouch) {
    var lastTouch = {
      x: touch.clientX,
      y: touch.clientY
    };
    var lts = this.lastTouches;
    this.lastTouches.push(lastTouch);
    var removeLastTouch = function removeLastTouch2() {
      var i = lts.indexOf(lastTouch);
      if (i > -1) {
        lts.splice(i, 1);
      }
    };
    setTimeout(removeLastTouch, DEDUP_TIMEOUT);
  }
}
function recordTouches(eventType, eventData) {
  if (eventType & INPUT_START) {
    this.primaryTouch = eventData.changedPointers[0].identifier;
    setLastTouch.call(this, eventData);
  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
    setLastTouch.call(this, eventData);
  }
}
function isSyntheticEvent(eventData) {
  var x = eventData.srcEvent.clientX;
  var y = eventData.srcEvent.clientY;
  for (var i = 0; i < this.lastTouches.length; i++) {
    var t = this.lastTouches[i];
    var dx = Math.abs(x - t.x);
    var dy = Math.abs(y - t.y);
    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
      return true;
    }
  }
  return false;
}
var TouchMouseInput = function() {
  var TouchMouseInput2 = function(_Input) {
    _inheritsLoose(TouchMouseInput3, _Input);
    function TouchMouseInput3(_manager, callback) {
      var _this;
      _this = _Input.call(this, _manager, callback) || this;
      _this.handler = function(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
          return;
        }
        if (isTouch) {
          recordTouches.call(_assertThisInitialized(_assertThisInitialized(_this)), inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized(_assertThisInitialized(_this)), inputData)) {
          return;
        }
        _this.callback(manager, inputEvent, inputData);
      };
      _this.touch = new TouchInput(_this.manager, _this.handler);
      _this.mouse = new MouseInput(_this.manager, _this.handler);
      _this.primaryTouch = null;
      _this.lastTouches = [];
      return _this;
    }
    var _proto = TouchMouseInput3.prototype;
    _proto.destroy = function destroy() {
      this.touch.destroy();
      this.mouse.destroy();
    };
    return TouchMouseInput3;
  }(Input);
  return TouchMouseInput2;
}();
function createInputInstance(manager) {
  var Type;
  var inputClass = manager.options.inputClass;
  if (inputClass) {
    Type = inputClass;
  } else if (SUPPORT_POINTER_EVENTS) {
    Type = PointerEventInput;
  } else if (SUPPORT_ONLY_TOUCH) {
    Type = TouchInput;
  } else if (!SUPPORT_TOUCH) {
    Type = MouseInput;
  } else {
    Type = TouchMouseInput;
  }
  return new Type(manager, inputHandler);
}
function invokeArrayArg(arg, fn, context) {
  if (Array.isArray(arg)) {
    each(arg, context[fn], context);
    return true;
  }
  return false;
}
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;
var _uniqueId = 1;
function uniqueId() {
  return _uniqueId++;
}
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
  var manager = recognizer.manager;
  if (manager) {
    return manager.get(otherRecognizer);
  }
  return otherRecognizer;
}
function stateStr(state) {
  if (state & STATE_CANCELLED) {
    return "cancel";
  } else if (state & STATE_ENDED) {
    return "end";
  } else if (state & STATE_CHANGED) {
    return "move";
  } else if (state & STATE_BEGAN) {
    return "start";
  }
  return "";
}
var Recognizer = function() {
  function Recognizer2(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    this.options = _extends({
      enable: true
    }, options2);
    this.id = uniqueId();
    this.manager = null;
    this.state = STATE_POSSIBLE;
    this.simultaneous = {};
    this.requireFail = [];
  }
  var _proto = Recognizer2.prototype;
  _proto.set = function set2(options2) {
    assign$1(this.options, options2);
    this.manager && this.manager.touchAction.update();
    return this;
  };
  _proto.recognizeWith = function recognizeWith(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
      return this;
    }
    var simultaneous = this.simultaneous;
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    if (!simultaneous[otherRecognizer.id]) {
      simultaneous[otherRecognizer.id] = otherRecognizer;
      otherRecognizer.recognizeWith(this);
    }
    return this;
  };
  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    delete this.simultaneous[otherRecognizer.id];
    return this;
  };
  _proto.requireFailure = function requireFailure(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
      return this;
    }
    var requireFail = this.requireFail;
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    if (inArray(requireFail, otherRecognizer) === -1) {
      requireFail.push(otherRecognizer);
      otherRecognizer.requireFailure(this);
    }
    return this;
  };
  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    var index2 = inArray(this.requireFail, otherRecognizer);
    if (index2 > -1) {
      this.requireFail.splice(index2, 1);
    }
    return this;
  };
  _proto.hasRequireFailures = function hasRequireFailures() {
    return this.requireFail.length > 0;
  };
  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
    return !!this.simultaneous[otherRecognizer.id];
  };
  _proto.emit = function emit(input) {
    var self2 = this;
    var state = this.state;
    function emit2(event) {
      self2.manager.emit(event, input);
    }
    if (state < STATE_ENDED) {
      emit2(self2.options.event + stateStr(state));
    }
    emit2(self2.options.event);
    if (input.additionalEvent) {
      emit2(input.additionalEvent);
    }
    if (state >= STATE_ENDED) {
      emit2(self2.options.event + stateStr(state));
    }
  };
  _proto.tryEmit = function tryEmit(input) {
    if (this.canEmit()) {
      return this.emit(input);
    }
    this.state = STATE_FAILED;
  };
  _proto.canEmit = function canEmit() {
    var i = 0;
    while (i < this.requireFail.length) {
      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
        return false;
      }
      i++;
    }
    return true;
  };
  _proto.recognize = function recognize(inputData) {
    var inputDataClone = assign$1({}, inputData);
    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
      this.reset();
      this.state = STATE_FAILED;
      return;
    }
    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
      this.state = STATE_POSSIBLE;
    }
    this.state = this.process(inputDataClone);
    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
      this.tryEmit(inputDataClone);
    }
  };
  _proto.process = function process2(inputData) {
  };
  _proto.getTouchAction = function getTouchAction() {
  };
  _proto.reset = function reset() {
  };
  return Recognizer2;
}();
var TapRecognizer = function(_Recognizer) {
  _inheritsLoose(TapRecognizer2, _Recognizer);
  function TapRecognizer2(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _Recognizer.call(this, _extends({
      event: "tap",
      pointers: 1,
      taps: 1,
      interval: 300,
      // max time between the multi-tap taps
      time: 250,
      // max time of the pointer to be down (like finger on the screen)
      threshold: 9,
      // a minimal movement is ok, but keep it low
      posThreshold: 10
    }, options2)) || this;
    _this.pTime = false;
    _this.pCenter = false;
    _this._timer = null;
    _this._input = null;
    _this.count = 0;
    return _this;
  }
  var _proto = TapRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_MANIPULATION];
  };
  _proto.process = function process2(input) {
    var _this2 = this;
    var options2 = this.options;
    var validPointers = input.pointers.length === options2.pointers;
    var validMovement = input.distance < options2.threshold;
    var validTouchTime = input.deltaTime < options2.time;
    this.reset();
    if (input.eventType & INPUT_START && this.count === 0) {
      return this.failTimeout();
    }
    if (validMovement && validTouchTime && validPointers) {
      if (input.eventType !== INPUT_END) {
        return this.failTimeout();
      }
      var validInterval = this.pTime ? input.timeStamp - this.pTime < options2.interval : true;
      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options2.posThreshold;
      this.pTime = input.timeStamp;
      this.pCenter = input.center;
      if (!validMultiTap || !validInterval) {
        this.count = 1;
      } else {
        this.count += 1;
      }
      this._input = input;
      var tapCount = this.count % options2.taps;
      if (tapCount === 0) {
        if (!this.hasRequireFailures()) {
          return STATE_RECOGNIZED;
        } else {
          this._timer = setTimeout(function() {
            _this2.state = STATE_RECOGNIZED;
            _this2.tryEmit();
          }, options2.interval);
          return STATE_BEGAN;
        }
      }
    }
    return STATE_FAILED;
  };
  _proto.failTimeout = function failTimeout() {
    var _this3 = this;
    this._timer = setTimeout(function() {
      _this3.state = STATE_FAILED;
    }, this.options.interval);
    return STATE_FAILED;
  };
  _proto.reset = function reset() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit() {
    if (this.state === STATE_RECOGNIZED) {
      this._input.tapCount = this.count;
      this.manager.emit(this.options.event, this._input);
    }
  };
  return TapRecognizer2;
}(Recognizer);
var AttrRecognizer = function(_Recognizer) {
  _inheritsLoose(AttrRecognizer2, _Recognizer);
  function AttrRecognizer2(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _Recognizer.call(this, _extends({
      pointers: 1
    }, options2)) || this;
  }
  var _proto = AttrRecognizer2.prototype;
  _proto.attrTest = function attrTest(input) {
    var optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  };
  _proto.process = function process2(input) {
    var state = this.state;
    var eventType = input.eventType;
    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
    var isValid = this.attrTest(input);
    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
      return state | STATE_CANCELLED;
    } else if (isRecognized || isValid) {
      if (eventType & INPUT_END) {
        return state | STATE_ENDED;
      } else if (!(state & STATE_BEGAN)) {
        return STATE_BEGAN;
      }
      return state | STATE_CHANGED;
    }
    return STATE_FAILED;
  };
  return AttrRecognizer2;
}(Recognizer);
function directionStr(direction) {
  if (direction === DIRECTION_DOWN) {
    return "down";
  } else if (direction === DIRECTION_UP) {
    return "up";
  } else if (direction === DIRECTION_LEFT) {
    return "left";
  } else if (direction === DIRECTION_RIGHT) {
    return "right";
  }
  return "";
}
var PanRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(PanRecognizer2, _AttrRecognizer);
  function PanRecognizer2(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _AttrRecognizer.call(this, _extends({
      event: "pan",
      threshold: 10,
      pointers: 1,
      direction: DIRECTION_ALL
    }, options2)) || this;
    _this.pX = null;
    _this.pY = null;
    return _this;
  }
  var _proto = PanRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    var direction = this.options.direction;
    var actions = [];
    if (direction & DIRECTION_HORIZONTAL) {
      actions.push(TOUCH_ACTION_PAN_Y);
    }
    if (direction & DIRECTION_VERTICAL) {
      actions.push(TOUCH_ACTION_PAN_X);
    }
    return actions;
  };
  _proto.directionTest = function directionTest(input) {
    var options2 = this.options;
    var hasMoved = true;
    var distance = input.distance;
    var direction = input.direction;
    var x = input.deltaX;
    var y = input.deltaY;
    if (!(direction & options2.direction)) {
      if (options2.direction & DIRECTION_HORIZONTAL) {
        direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        hasMoved = x !== this.pX;
        distance = Math.abs(input.deltaX);
      } else {
        direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
        hasMoved = y !== this.pY;
        distance = Math.abs(input.deltaY);
      }
    }
    input.direction = direction;
    return hasMoved && distance > options2.threshold && direction & options2.direction;
  };
  _proto.attrTest = function attrTest(input) {
    return AttrRecognizer.prototype.attrTest.call(this, input) && // replace with a super call
    (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
  };
  _proto.emit = function emit(input) {
    this.pX = input.deltaX;
    this.pY = input.deltaY;
    var direction = directionStr(input.direction);
    if (direction) {
      input.additionalEvent = this.options.event + direction;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PanRecognizer2;
}(AttrRecognizer);
var SwipeRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(SwipeRecognizer2, _AttrRecognizer);
  function SwipeRecognizer2(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "swipe",
      threshold: 10,
      velocity: 0.3,
      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
      pointers: 1
    }, options2)) || this;
  }
  var _proto = SwipeRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return PanRecognizer.prototype.getTouchAction.call(this);
  };
  _proto.attrTest = function attrTest(input) {
    var direction = this.options.direction;
    var velocity;
    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
      velocity = input.overallVelocity;
    } else if (direction & DIRECTION_HORIZONTAL) {
      velocity = input.overallVelocityX;
    } else if (direction & DIRECTION_VERTICAL) {
      velocity = input.overallVelocityY;
    }
    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs$1(velocity) > this.options.velocity && input.eventType & INPUT_END;
  };
  _proto.emit = function emit(input) {
    var direction = directionStr(input.offsetDirection);
    if (direction) {
      this.manager.emit(this.options.event + direction, input);
    }
    this.manager.emit(this.options.event, input);
  };
  return SwipeRecognizer2;
}(AttrRecognizer);
var PinchRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(PinchRecognizer2, _AttrRecognizer);
  function PinchRecognizer2(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "pinch",
      threshold: 0,
      pointers: 2
    }, options2)) || this;
  }
  var _proto = PinchRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
  };
  _proto.emit = function emit(input) {
    if (input.scale !== 1) {
      var inOut = input.scale < 1 ? "in" : "out";
      input.additionalEvent = this.options.event + inOut;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PinchRecognizer2;
}(AttrRecognizer);
var RotateRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(RotateRecognizer2, _AttrRecognizer);
  function RotateRecognizer2(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "rotate",
      threshold: 0,
      pointers: 2
    }, options2)) || this;
  }
  var _proto = RotateRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
  };
  return RotateRecognizer2;
}(AttrRecognizer);
var PressRecognizer = function(_Recognizer) {
  _inheritsLoose(PressRecognizer2, _Recognizer);
  function PressRecognizer2(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _Recognizer.call(this, _extends({
      event: "press",
      pointers: 1,
      time: 251,
      // minimal time of the pointer to be pressed
      threshold: 9
    }, options2)) || this;
    _this._timer = null;
    _this._input = null;
    return _this;
  }
  var _proto = PressRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_AUTO];
  };
  _proto.process = function process2(input) {
    var _this2 = this;
    var options2 = this.options;
    var validPointers = input.pointers.length === options2.pointers;
    var validMovement = input.distance < options2.threshold;
    var validTime = input.deltaTime > options2.time;
    this._input = input;
    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
      this.reset();
    } else if (input.eventType & INPUT_START) {
      this.reset();
      this._timer = setTimeout(function() {
        _this2.state = STATE_RECOGNIZED;
        _this2.tryEmit();
      }, options2.time);
    } else if (input.eventType & INPUT_END) {
      return STATE_RECOGNIZED;
    }
    return STATE_FAILED;
  };
  _proto.reset = function reset() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit(input) {
    if (this.state !== STATE_RECOGNIZED) {
      return;
    }
    if (input && input.eventType & INPUT_END) {
      this.manager.emit(this.options.event + "up", input);
    } else {
      this._input.timeStamp = now2();
      this.manager.emit(this.options.event, this._input);
    }
  };
  return PressRecognizer2;
}(Recognizer);
var defaults = {
  /**
   * @private
   * set if DOM events are being triggered.
   * But this is slower and unused by simple implementations, so disabled by default.
   * @type {Boolean}
   * @default false
   */
  domEvents: false,
  /**
   * @private
   * The value for the touchAction property/fallback.
   * When set to `compute` it will magically set the correct value based on the added recognizers.
   * @type {String}
   * @default compute
   */
  touchAction: TOUCH_ACTION_COMPUTE,
  /**
   * @private
   * @type {Boolean}
   * @default true
   */
  enable: true,
  /**
   * @private
   * EXPERIMENTAL FEATURE -- can be removed/changed
   * Change the parent input target element.
   * If Null, then it is being set the to main element.
   * @type {Null|EventTarget}
   * @default null
   */
  inputTarget: null,
  /**
   * @private
   * force an input class
   * @type {Null|Function}
   * @default null
   */
  inputClass: null,
  /**
   * @private
   * Some CSS properties can be used to improve the working of Hammer.
   * Add them to this method and they will be set when creating a new Manager.
   * @namespace
   */
  cssProps: {
    /**
     * @private
     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
     * @type {String}
     * @default 'none'
     */
    userSelect: "none",
    /**
     * @private
     * Disable the Windows Phone grippers when pressing an element.
     * @type {String}
     * @default 'none'
     */
    touchSelect: "none",
    /**
     * @private
     * Disables the default callout shown when you touch and hold a touch target.
     * On iOS, when you touch and hold a touch target such as a link, Safari displays
     * a callout containing information about the link. This property allows you to disable that callout.
     * @type {String}
     * @default 'none'
     */
    touchCallout: "none",
    /**
     * @private
     * Specifies whether zooming is enabled. Used by IE10>
     * @type {String}
     * @default 'none'
     */
    contentZooming: "none",
    /**
     * @private
     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
     * @type {String}
     * @default 'none'
     */
    userDrag: "none",
    /**
     * @private
     * Overrides the highlight color shown when the user taps a link or a JavaScript
     * clickable element in iOS. This property obeys the alpha value, if specified.
     * @type {String}
     * @default 'rgba(0,0,0,0)'
     */
    tapHighlightColor: "rgba(0,0,0,0)"
  }
};
var preset = [[RotateRecognizer, {
  enable: false
}], [PinchRecognizer, {
  enable: false
}, ["rotate"]], [SwipeRecognizer, {
  direction: DIRECTION_HORIZONTAL
}], [PanRecognizer, {
  direction: DIRECTION_HORIZONTAL
}, ["swipe"]], [TapRecognizer], [TapRecognizer, {
  event: "doubletap",
  taps: 2
}, ["tap"]], [PressRecognizer]];
var STOP = 1;
var FORCED_STOP = 2;
function toggleCssProps(manager, add) {
  var element = manager.element;
  if (!element.style) {
    return;
  }
  var prop;
  each(manager.options.cssProps, function(value, name) {
    prop = prefixed(element.style, name);
    if (add) {
      manager.oldCssProps[prop] = element.style[prop];
      element.style[prop] = value;
    } else {
      element.style[prop] = manager.oldCssProps[prop] || "";
    }
  });
  if (!add) {
    manager.oldCssProps = {};
  }
}
function triggerDomEvent(event, data2) {
  var gestureEvent = document.createEvent("Event");
  gestureEvent.initEvent(event, true, true);
  gestureEvent.gesture = data2;
  data2.target.dispatchEvent(gestureEvent);
}
var Manager = function() {
  function Manager2(element, options2) {
    var _this = this;
    this.options = assign$1({}, defaults, options2 || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};
    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    toggleCssProps(this, true);
    each(this.options.recognizers, function(item) {
      var recognizer = _this.add(new item[0](item[1]));
      item[2] && recognizer.recognizeWith(item[2]);
      item[3] && recognizer.requireFailure(item[3]);
    }, this);
  }
  var _proto = Manager2.prototype;
  _proto.set = function set2(options2) {
    assign$1(this.options, options2);
    if (options2.touchAction) {
      this.touchAction.update();
    }
    if (options2.inputTarget) {
      this.input.destroy();
      this.input.target = options2.inputTarget;
      this.input.init();
    }
    return this;
  };
  _proto.stop = function stop(force) {
    this.session.stopped = force ? FORCED_STOP : STOP;
  };
  _proto.recognize = function recognize(inputData) {
    var session = this.session;
    if (session.stopped) {
      return;
    }
    this.touchAction.preventDefaults(inputData);
    var recognizer;
    var recognizers = this.recognizers;
    var curRecognizer = session.curRecognizer;
    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
      session.curRecognizer = null;
      curRecognizer = null;
    }
    var i = 0;
    while (i < recognizers.length) {
      recognizer = recognizers[i];
      if (session.stopped !== FORCED_STOP && // 1
      (!curRecognizer || recognizer === curRecognizer || // 2
      recognizer.canRecognizeWith(curRecognizer))) {
        recognizer.recognize(inputData);
      } else {
        recognizer.reset();
      }
      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
        session.curRecognizer = recognizer;
        curRecognizer = recognizer;
      }
      i++;
    }
  };
  _proto.get = function get2(recognizer) {
    if (recognizer instanceof Recognizer) {
      return recognizer;
    }
    var recognizers = this.recognizers;
    for (var i = 0; i < recognizers.length; i++) {
      if (recognizers[i].options.event === recognizer) {
        return recognizers[i];
      }
    }
    return null;
  };
  _proto.add = function add(recognizer) {
    if (invokeArrayArg(recognizer, "add", this)) {
      return this;
    }
    var existing = this.get(recognizer.options.event);
    if (existing) {
      this.remove(existing);
    }
    this.recognizers.push(recognizer);
    recognizer.manager = this;
    this.touchAction.update();
    return recognizer;
  };
  _proto.remove = function remove(recognizer) {
    if (invokeArrayArg(recognizer, "remove", this)) {
      return this;
    }
    var targetRecognizer = this.get(recognizer);
    if (recognizer) {
      var recognizers = this.recognizers;
      var index2 = inArray(recognizers, targetRecognizer);
      if (index2 !== -1) {
        recognizers.splice(index2, 1);
        this.touchAction.update();
      }
    }
    return this;
  };
  _proto.on = function on(events, handler) {
    if (events === void 0 || handler === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each(splitStr(events), function(event) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    });
    return this;
  };
  _proto.off = function off(events, handler) {
    if (events === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each(splitStr(events), function(event) {
      if (!handler) {
        delete handlers[event];
      } else {
        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
      }
    });
    return this;
  };
  _proto.emit = function emit(event, data2) {
    if (this.options.domEvents) {
      triggerDomEvent(event, data2);
    }
    var handlers = this.handlers[event] && this.handlers[event].slice();
    if (!handlers || !handlers.length) {
      return;
    }
    data2.type = event;
    data2.preventDefault = function() {
      data2.srcEvent.preventDefault();
    };
    var i = 0;
    while (i < handlers.length) {
      handlers[i](data2);
      i++;
    }
  };
  _proto.destroy = function destroy() {
    this.element && toggleCssProps(this, false);
    this.handlers = {};
    this.session = {};
    this.input.destroy();
    this.element = null;
  };
  return Manager2;
}();
var SINGLE_TOUCH_INPUT_MAP = {
  touchstart: INPUT_START,
  touchmove: INPUT_MOVE,
  touchend: INPUT_END,
  touchcancel: INPUT_CANCEL
};
var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
var SingleTouchInput = function(_Input) {
  _inheritsLoose(SingleTouchInput2, _Input);
  function SingleTouchInput2() {
    var _this;
    var proto = SingleTouchInput2.prototype;
    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.started = false;
    return _this;
  }
  var _proto = SingleTouchInput2.prototype;
  _proto.handler = function handler(ev) {
    var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
    if (type === INPUT_START) {
      this.started = true;
    }
    if (!this.started) {
      return;
    }
    var touches = normalizeSingleTouches.call(this, ev, type);
    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
      this.started = false;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH,
      srcEvent: ev
    });
  };
  return SingleTouchInput2;
}(Input);
function normalizeSingleTouches(ev, type) {
  var all = toArray(ev.touches);
  var changed = toArray(ev.changedTouches);
  if (type & (INPUT_END | INPUT_CANCEL)) {
    all = uniqueArray(all.concat(changed), "identifier", true);
  }
  return [all, changed];
}
function deprecate(method2, name, message) {
  var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
  return function() {
    var e = new Error("get-stack-trace");
    var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
    var log = window.console && (window.console.warn || window.console.log);
    if (log) {
      log.call(window.console, deprecationMessage, stack);
    }
    return method2.apply(this, arguments);
  };
}
var extend = deprecate(function(dest, src, merge2) {
  var keys4 = Object.keys(src);
  var i = 0;
  while (i < keys4.length) {
    if (!merge2 || merge2 && dest[keys4[i]] === void 0) {
      dest[keys4[i]] = src[keys4[i]];
    }
    i++;
  }
  return dest;
}, "extend", "Use `assign`.");
var merge$2 = deprecate(function(dest, src) {
  return extend(dest, src, true);
}, "merge", "Use `assign`.");
function inherit(child, base, properties) {
  var baseP = base.prototype;
  var childP;
  childP = child.prototype = Object.create(baseP);
  childP.constructor = child;
  childP._super = baseP;
  if (properties) {
    assign$1(childP, properties);
  }
}
function bindFn(fn, context) {
  return function boundFn() {
    return fn.apply(context, arguments);
  };
}
var Hammer$2 = function() {
  var Hammer2 = (
    /**
      * @private
      * @const {string}
      */
    function Hammer3(element, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return new Manager(element, _extends({
        recognizers: preset.concat()
      }, options2));
    }
  );
  Hammer2.VERSION = "2.0.17-rc";
  Hammer2.DIRECTION_ALL = DIRECTION_ALL;
  Hammer2.DIRECTION_DOWN = DIRECTION_DOWN;
  Hammer2.DIRECTION_LEFT = DIRECTION_LEFT;
  Hammer2.DIRECTION_RIGHT = DIRECTION_RIGHT;
  Hammer2.DIRECTION_UP = DIRECTION_UP;
  Hammer2.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
  Hammer2.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
  Hammer2.DIRECTION_NONE = DIRECTION_NONE;
  Hammer2.DIRECTION_DOWN = DIRECTION_DOWN;
  Hammer2.INPUT_START = INPUT_START;
  Hammer2.INPUT_MOVE = INPUT_MOVE;
  Hammer2.INPUT_END = INPUT_END;
  Hammer2.INPUT_CANCEL = INPUT_CANCEL;
  Hammer2.STATE_POSSIBLE = STATE_POSSIBLE;
  Hammer2.STATE_BEGAN = STATE_BEGAN;
  Hammer2.STATE_CHANGED = STATE_CHANGED;
  Hammer2.STATE_ENDED = STATE_ENDED;
  Hammer2.STATE_RECOGNIZED = STATE_RECOGNIZED;
  Hammer2.STATE_CANCELLED = STATE_CANCELLED;
  Hammer2.STATE_FAILED = STATE_FAILED;
  Hammer2.Manager = Manager;
  Hammer2.Input = Input;
  Hammer2.TouchAction = TouchAction;
  Hammer2.TouchInput = TouchInput;
  Hammer2.MouseInput = MouseInput;
  Hammer2.PointerEventInput = PointerEventInput;
  Hammer2.TouchMouseInput = TouchMouseInput;
  Hammer2.SingleTouchInput = SingleTouchInput;
  Hammer2.Recognizer = Recognizer;
  Hammer2.AttrRecognizer = AttrRecognizer;
  Hammer2.Tap = TapRecognizer;
  Hammer2.Pan = PanRecognizer;
  Hammer2.Swipe = SwipeRecognizer;
  Hammer2.Pinch = PinchRecognizer;
  Hammer2.Rotate = RotateRecognizer;
  Hammer2.Press = PressRecognizer;
  Hammer2.on = addEventListeners;
  Hammer2.off = removeEventListeners;
  Hammer2.each = each;
  Hammer2.merge = merge$2;
  Hammer2.extend = extend;
  Hammer2.bindFn = bindFn;
  Hammer2.assign = assign$1;
  Hammer2.inherit = inherit;
  Hammer2.bindFn = bindFn;
  Hammer2.prefixed = prefixed;
  Hammer2.toArray = toArray;
  Hammer2.inArray = inArray;
  Hammer2.uniqueArray = uniqueArray;
  Hammer2.splitStr = splitStr;
  Hammer2.boolOrFn = boolOrFn;
  Hammer2.hasParent = hasParent;
  Hammer2.addEventListeners = addEventListeners;
  Hammer2.removeEventListeners = removeEventListeners;
  Hammer2.defaults = assign$1({}, defaults, {
    preset
  });
  return Hammer2;
}();
Hammer$2.defaults;
var RealHammer = Hammer$2;
_Symbol$1("DELETE");
function Alea() {
  for (var _len3 = arguments.length, seed = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    seed[_key3] = arguments[_key3];
  }
  return AleaImplementation(seed.length ? seed : [_Date$now()]);
}
function AleaImplementation(seed) {
  let [s0, s1, s2] = mashSeed(seed);
  let c2 = 1;
  const random = () => {
    const t = 2091639 * s0 + c2 * 23283064365386963e-26;
    s0 = s1;
    s1 = s2;
    return s2 = t - (c2 = t | 0);
  };
  random.uint32 = () => random() * 4294967296;
  random.fract53 = () => random() + (random() * 2097152 | 0) * 11102230246251565e-32;
  random.algorithm = "Alea";
  random.seed = seed;
  random.version = "0.9";
  return random;
}
function mashSeed() {
  const mash = Mash();
  let s0 = mash(" ");
  let s1 = mash(" ");
  let s2 = mash(" ");
  for (let i = 0; i < arguments.length; i++) {
    s0 -= mash(i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    if (s0 < 0) {
      s0 += 1;
    }
    s1 -= mash(i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    if (s1 < 0) {
      s1 += 1;
    }
    s2 -= mash(i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    if (s2 < 0) {
      s2 += 1;
    }
  }
  return [s0, s1, s2];
}
function Mash() {
  let n = 4022871197;
  return function(data2) {
    const string2 = data2.toString();
    for (let i = 0; i < string2.length; i++) {
      n += string2.charCodeAt(i);
      let h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 4294967296;
    }
    return (n >>> 0) * 23283064365386963e-26;
  };
}
function hammerMock() {
  const noop2 = () => {
  };
  return {
    on: noop2,
    off: noop2,
    destroy: noop2,
    emit: noop2,
    get() {
      return {
        set: noop2
      };
    }
  };
}
var Hammer$1 = typeof window !== "undefined" ? window.Hammer || RealHammer : function() {
  return hammerMock();
};
function Activator$1(container) {
  var _context;
  this._cleanupQueue = [];
  this.active = false;
  this._dom = {
    container,
    overlay: document.createElement("div")
  };
  this._dom.overlay.classList.add("vis-overlay");
  this._dom.container.appendChild(this._dom.overlay);
  this._cleanupQueue.push(() => {
    this._dom.overlay.parentNode.removeChild(this._dom.overlay);
  });
  const hammer = Hammer$1(this._dom.overlay);
  hammer.on("tap", _bindInstanceProperty(_context = this._onTapOverlay).call(_context, this));
  this._cleanupQueue.push(() => {
    hammer.destroy();
  });
  const events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
  _forEachInstanceProperty(events).call(events, (event) => {
    hammer.on(event, (event2) => {
      event2.srcEvent.stopPropagation();
    });
  });
  if (document && document.body) {
    this._onClick = (event) => {
      if (!_hasParent(event.target, container)) {
        this.deactivate();
      }
    };
    document.body.addEventListener("click", this._onClick);
    this._cleanupQueue.push(() => {
      document.body.removeEventListener("click", this._onClick);
    });
  }
  this._escListener = (event) => {
    if ("key" in event ? event.key === "Escape" : event.keyCode === 27) {
      this.deactivate();
    }
  };
}
Emitter(Activator$1.prototype);
Activator$1.current = null;
Activator$1.prototype.destroy = function() {
  this.deactivate();
  for (const callback of _reverseInstanceProperty(_context2 = _spliceInstanceProperty(_context3 = this._cleanupQueue).call(_context3, 0)).call(_context2)) {
    var _context2, _context3;
    callback();
  }
};
Activator$1.prototype.activate = function() {
  if (Activator$1.current) {
    Activator$1.current.deactivate();
  }
  Activator$1.current = this;
  this.active = true;
  this._dom.overlay.style.display = "none";
  this._dom.container.classList.add("vis-active");
  this.emit("change");
  this.emit("activate");
  document.body.addEventListener("keydown", this._escListener);
};
Activator$1.prototype.deactivate = function() {
  this.active = false;
  this._dom.overlay.style.display = "block";
  this._dom.container.classList.remove("vis-active");
  document.body.removeEventListener("keydown", this._escListener);
  this.emit("change");
  this.emit("deactivate");
};
Activator$1.prototype._onTapOverlay = function(event) {
  this.activate();
  event.srcEvent.stopPropagation();
};
function _hasParent(element, parent2) {
  while (element) {
    if (element === parent2) {
      return true;
    }
    element = element.parentNode;
  }
  return false;
}
var fullHexRE = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
var shortHexRE = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
var rgbRE = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i;
var rgbaRE = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
function recursiveDOMDelete(DOMobject) {
  if (DOMobject) {
    while (DOMobject.hasChildNodes() === true) {
      const child = DOMobject.firstChild;
      if (child) {
        recursiveDOMDelete(child);
        DOMobject.removeChild(child);
      }
    }
  }
}
function isString(value) {
  return value instanceof String || typeof value === "string";
}
function isObject$5(value) {
  return typeof value === "object" && value !== null;
}
function copyOrDelete(a, b, prop, allowDeletion) {
  let doDeletion = false;
  if (allowDeletion === true) {
    doDeletion = b[prop] === null && a[prop] !== void 0;
  }
  if (doDeletion) {
    delete a[prop];
  } else {
    a[prop] = b[prop];
  }
}
function fillIfDefined(a, b) {
  let allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  for (const prop in a) {
    if (b[prop] !== void 0) {
      if (b[prop] === null || typeof b[prop] !== "object") {
        copyOrDelete(a, b, prop, allowDeletion);
      } else {
        const aProp = a[prop];
        const bProp = b[prop];
        if (isObject$5(aProp) && isObject$5(bProp)) {
          fillIfDefined(aProp, bProp, allowDeletion);
        }
      }
    }
  }
}
function selectiveDeepExtend(props, a, b) {
  let allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (_Array$isArray(b)) {
    throw new TypeError("Arrays are not supported by deepExtend");
  }
  for (let p = 0; p < props.length; p++) {
    const prop = props[p];
    if (Object.prototype.hasOwnProperty.call(b, prop)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === void 0) {
          a[prop] = {};
        }
        if (a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop], false, allowDeletion);
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      } else if (_Array$isArray(b[prop])) {
        throw new TypeError("Arrays are not supported by deepExtend");
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    }
  }
  return a;
}
function selectiveNotDeepExtend(propsToExclude, a, b) {
  let allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (_Array$isArray(b)) {
    throw new TypeError("Arrays are not supported by deepExtend");
  }
  for (const prop in b) {
    if (!Object.prototype.hasOwnProperty.call(b, prop)) {
      continue;
    }
    if (_includesInstanceProperty(propsToExclude).call(propsToExclude, prop)) {
      continue;
    }
    if (b[prop] && b[prop].constructor === Object) {
      if (a[prop] === void 0) {
        a[prop] = {};
      }
      if (a[prop].constructor === Object) {
        deepExtend(a[prop], b[prop]);
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    } else if (_Array$isArray(b[prop])) {
      a[prop] = [];
      for (let i = 0; i < b[prop].length; i++) {
        a[prop].push(b[prop][i]);
      }
    } else {
      copyOrDelete(a, b, prop, allowDeletion);
    }
  }
  return a;
}
function deepExtend(a, b) {
  let protoExtend = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  let allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  for (const prop in b) {
    if (Object.prototype.hasOwnProperty.call(b, prop) || protoExtend === true) {
      if (typeof b[prop] === "object" && b[prop] !== null && _Object$getPrototypeOf(b[prop]) === Object.prototype) {
        if (a[prop] === void 0) {
          a[prop] = deepExtend({}, b[prop], protoExtend);
        } else if (typeof a[prop] === "object" && a[prop] !== null && _Object$getPrototypeOf(a[prop]) === Object.prototype) {
          deepExtend(a[prop], b[prop], protoExtend);
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      } else if (_Array$isArray(b[prop])) {
        var _context4;
        a[prop] = _sliceInstanceProperty(_context4 = b[prop]).call(_context4);
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    }
  }
  return a;
}
function copyAndExtendArray(arr, newValue) {
  return [...arr, newValue];
}
function copyArray(arr) {
  return _sliceInstanceProperty(arr).call(arr);
}
function getAbsoluteLeft(elem) {
  return elem.getBoundingClientRect().left;
}
function getAbsoluteTop(elem) {
  return elem.getBoundingClientRect().top;
}
function forEach$1(object2, callback) {
  if (_Array$isArray(object2)) {
    const len = object2.length;
    for (let i = 0; i < len; i++) {
      callback(object2[i], i, object2);
    }
  } else {
    for (const key in object2) {
      if (Object.prototype.hasOwnProperty.call(object2, key)) {
        callback(object2[key], key, object2);
      }
    }
  }
}
function hexToRGB(hex2) {
  let result;
  switch (hex2.length) {
    case 3:
    case 4:
      result = shortHexRE.exec(hex2);
      return result ? {
        r: _parseInt$1(result[1] + result[1], 16),
        g: _parseInt$1(result[2] + result[2], 16),
        b: _parseInt$1(result[3] + result[3], 16)
      } : null;
    case 6:
    case 7:
      result = fullHexRE.exec(hex2);
      return result ? {
        r: _parseInt$1(result[1], 16),
        g: _parseInt$1(result[2], 16),
        b: _parseInt$1(result[3], 16)
      } : null;
    default:
      return null;
  }
}
function overrideOpacity(color, opacity) {
  if (_includesInstanceProperty(color).call(color, "rgba")) {
    return color;
  } else if (_includesInstanceProperty(color).call(color, "rgb")) {
    const rgb = color.substr(_indexOfInstanceProperty(color).call(color, "(") + 1).replace(")", "").split(",");
    return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
  } else {
    const rgb = hexToRGB(color);
    if (rgb == null) {
      return color;
    } else {
      return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + opacity + ")";
    }
  }
}
function RGBToHex(red, green, blue) {
  var _context5;
  return "#" + _sliceInstanceProperty(_context5 = ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16)).call(_context5, 1);
}
function parseColor(inputColor, defaultColor) {
  if (isString(inputColor)) {
    let colorStr = inputColor;
    if (isValidRGB(colorStr)) {
      var _context6;
      const rgb = _mapInstanceProperty(_context6 = colorStr.substr(4).substr(0, colorStr.length - 5).split(",")).call(_context6, function(value) {
        return _parseInt$1(value);
      });
      colorStr = RGBToHex(rgb[0], rgb[1], rgb[2]);
    }
    if (isValidHex(colorStr) === true) {
      const hsv = hexToHSV(colorStr);
      const lighterColorHSV = {
        h: hsv.h,
        s: hsv.s * 0.8,
        v: Math.min(1, hsv.v * 1.02)
      };
      const darkerColorHSV = {
        h: hsv.h,
        s: Math.min(1, hsv.s * 1.25),
        v: hsv.v * 0.8
      };
      const darkerColorHex = HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
      const lighterColorHex = HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
      return {
        background: colorStr,
        border: darkerColorHex,
        highlight: {
          background: lighterColorHex,
          border: darkerColorHex
        },
        hover: {
          background: lighterColorHex,
          border: darkerColorHex
        }
      };
    } else {
      return {
        background: colorStr,
        border: colorStr,
        highlight: {
          background: colorStr,
          border: colorStr
        },
        hover: {
          background: colorStr,
          border: colorStr
        }
      };
    }
  } else {
    if (defaultColor) {
      const color = {
        background: inputColor.background || defaultColor.background,
        border: inputColor.border || defaultColor.border,
        highlight: isString(inputColor.highlight) ? {
          border: inputColor.highlight,
          background: inputColor.highlight
        } : {
          background: inputColor.highlight && inputColor.highlight.background || defaultColor.highlight.background,
          border: inputColor.highlight && inputColor.highlight.border || defaultColor.highlight.border
        },
        hover: isString(inputColor.hover) ? {
          border: inputColor.hover,
          background: inputColor.hover
        } : {
          border: inputColor.hover && inputColor.hover.border || defaultColor.hover.border,
          background: inputColor.hover && inputColor.hover.background || defaultColor.hover.background
        }
      };
      return color;
    } else {
      const color = {
        background: inputColor.background || void 0,
        border: inputColor.border || void 0,
        highlight: isString(inputColor.highlight) ? {
          border: inputColor.highlight,
          background: inputColor.highlight
        } : {
          background: inputColor.highlight && inputColor.highlight.background || void 0,
          border: inputColor.highlight && inputColor.highlight.border || void 0
        },
        hover: isString(inputColor.hover) ? {
          border: inputColor.hover,
          background: inputColor.hover
        } : {
          border: inputColor.hover && inputColor.hover.border || void 0,
          background: inputColor.hover && inputColor.hover.background || void 0
        }
      };
      return color;
    }
  }
}
function RGBToHSV(red, green, blue) {
  red = red / 255;
  green = green / 255;
  blue = blue / 255;
  const minRGB = Math.min(red, Math.min(green, blue));
  const maxRGB = Math.max(red, Math.max(green, blue));
  if (minRGB === maxRGB) {
    return {
      h: 0,
      s: 0,
      v: minRGB
    };
  }
  const d = red === minRGB ? green - blue : blue === minRGB ? red - green : blue - red;
  const h = red === minRGB ? 3 : blue === minRGB ? 1 : 5;
  const hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
  const saturation = (maxRGB - minRGB) / maxRGB;
  const value = maxRGB;
  return {
    h: hue,
    s: saturation,
    v: value
  };
}
function HSVToRGB(h, s, v) {
  let r;
  let g;
  let b;
  const i = Math.floor(h * 6);
  const f = h * 6 - i;
  const p = v * (1 - s);
  const q = v * (1 - f * s);
  const t = v * (1 - (1 - f) * s);
  switch (i % 6) {
    case 0:
      r = v, g = t, b = p;
      break;
    case 1:
      r = q, g = v, b = p;
      break;
    case 2:
      r = p, g = v, b = t;
      break;
    case 3:
      r = p, g = q, b = v;
      break;
    case 4:
      r = t, g = p, b = v;
      break;
    case 5:
      r = v, g = p, b = q;
      break;
  }
  return {
    r: Math.floor(r * 255),
    g: Math.floor(g * 255),
    b: Math.floor(b * 255)
  };
}
function HSVToHex(h, s, v) {
  const rgb = HSVToRGB(h, s, v);
  return RGBToHex(rgb.r, rgb.g, rgb.b);
}
function hexToHSV(hex2) {
  const rgb = hexToRGB(hex2);
  if (!rgb) {
    throw new TypeError("'".concat(hex2, "' is not a valid color."));
  }
  return RGBToHSV(rgb.r, rgb.g, rgb.b);
}
function isValidHex(hex2) {
  const isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex2);
  return isOk;
}
function isValidRGB(rgb) {
  return rgbRE.test(rgb);
}
function isValidRGBA(rgba) {
  return rgbaRE.test(rgba);
}
function bridgeObject(referenceObject) {
  if (referenceObject === null || typeof referenceObject !== "object") {
    return null;
  }
  if (referenceObject instanceof Element) {
    return referenceObject;
  }
  const objectTo = _Object$create(referenceObject);
  for (const i in referenceObject) {
    if (Object.prototype.hasOwnProperty.call(referenceObject, i)) {
      if (typeof referenceObject[i] == "object") {
        objectTo[i] = bridgeObject(referenceObject[i]);
      }
    }
  }
  return objectTo;
}
function mergeOptions(mergeTarget, options2, option) {
  let globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  const isPresent = function(obj) {
    return obj !== null && obj !== void 0;
  };
  const isObject2 = function(obj) {
    return obj !== null && typeof obj === "object";
  };
  const isEmpty = function(obj) {
    for (const x in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, x)) {
        return false;
      }
    }
    return true;
  };
  if (!isObject2(mergeTarget)) {
    throw new Error("Parameter mergeTarget must be an object");
  }
  if (!isObject2(options2)) {
    throw new Error("Parameter options must be an object");
  }
  if (!isPresent(option)) {
    throw new Error("Parameter option must have a value");
  }
  if (!isObject2(globalOptions)) {
    throw new Error("Parameter globalOptions must be an object");
  }
  const doMerge = function(target, options3, option2) {
    if (!isObject2(target[option2])) {
      target[option2] = {};
    }
    const src = options3[option2];
    const dst = target[option2];
    for (const prop in src) {
      if (Object.prototype.hasOwnProperty.call(src, prop)) {
        dst[prop] = src[prop];
      }
    }
  };
  const srcOption = options2[option];
  const globalPassed = isObject2(globalOptions) && !isEmpty(globalOptions);
  const globalOption = globalPassed ? globalOptions[option] : void 0;
  const globalEnabled = globalOption ? globalOption.enabled : void 0;
  if (srcOption === void 0) {
    return;
  }
  if (typeof srcOption === "boolean") {
    if (!isObject2(mergeTarget[option])) {
      mergeTarget[option] = {};
    }
    mergeTarget[option].enabled = srcOption;
    return;
  }
  if (srcOption === null && !isObject2(mergeTarget[option])) {
    if (isPresent(globalOption)) {
      mergeTarget[option] = _Object$create(globalOption);
    } else {
      return;
    }
  }
  if (!isObject2(srcOption)) {
    return;
  }
  let enabled = true;
  if (srcOption.enabled !== void 0) {
    enabled = srcOption.enabled;
  } else {
    if (globalEnabled !== void 0) {
      enabled = globalOption.enabled;
    }
  }
  doMerge(mergeTarget, options2, option);
  mergeTarget[option].enabled = enabled;
}
var easingFunctions = {
  /**
   * Provides no easing and no acceleration.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  linear(t) {
    return t;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInQuad(t) {
    return t * t;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutQuad(t) {
    return t * (2 - t);
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutQuad(t) {
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInCubic(t) {
    return t * t * t;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutCubic(t) {
    return --t * t * t + 1;
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutCubic(t) {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInQuart(t) {
    return t * t * t * t;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutQuart(t) {
    return 1 - --t * t * t * t;
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutQuart(t) {
    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInQuint(t) {
    return t * t * t * t * t;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutQuint(t) {
    return 1 + --t * t * t * t * t;
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutQuint(t) {
    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
  }
};
function topMost(pile, accessors) {
  let candidate;
  if (!_Array$isArray(accessors)) {
    accessors = [accessors];
  }
  for (const member of pile) {
    if (member) {
      candidate = member[accessors[0]];
      for (let i = 1; i < accessors.length; i++) {
        if (candidate) {
          candidate = candidate[accessors[i]];
        }
      }
      if (typeof candidate !== "undefined") {
        break;
      }
    }
  }
  return candidate;
}
var htmlColors = {
  black: "#000000",
  navy: "#000080",
  darkblue: "#00008B",
  mediumblue: "#0000CD",
  blue: "#0000FF",
  darkgreen: "#006400",
  green: "#008000",
  teal: "#008080",
  darkcyan: "#008B8B",
  deepskyblue: "#00BFFF",
  darkturquoise: "#00CED1",
  mediumspringgreen: "#00FA9A",
  lime: "#00FF00",
  springgreen: "#00FF7F",
  aqua: "#00FFFF",
  cyan: "#00FFFF",
  midnightblue: "#191970",
  dodgerblue: "#1E90FF",
  lightseagreen: "#20B2AA",
  forestgreen: "#228B22",
  seagreen: "#2E8B57",
  darkslategray: "#2F4F4F",
  limegreen: "#32CD32",
  mediumseagreen: "#3CB371",
  turquoise: "#40E0D0",
  royalblue: "#4169E1",
  steelblue: "#4682B4",
  darkslateblue: "#483D8B",
  mediumturquoise: "#48D1CC",
  indigo: "#4B0082",
  darkolivegreen: "#556B2F",
  cadetblue: "#5F9EA0",
  cornflowerblue: "#6495ED",
  mediumaquamarine: "#66CDAA",
  dimgray: "#696969",
  slateblue: "#6A5ACD",
  olivedrab: "#6B8E23",
  slategray: "#708090",
  lightslategray: "#778899",
  mediumslateblue: "#7B68EE",
  lawngreen: "#7CFC00",
  chartreuse: "#7FFF00",
  aquamarine: "#7FFFD4",
  maroon: "#800000",
  purple: "#800080",
  olive: "#808000",
  gray: "#808080",
  skyblue: "#87CEEB",
  lightskyblue: "#87CEFA",
  blueviolet: "#8A2BE2",
  darkred: "#8B0000",
  darkmagenta: "#8B008B",
  saddlebrown: "#8B4513",
  darkseagreen: "#8FBC8F",
  lightgreen: "#90EE90",
  mediumpurple: "#9370D8",
  darkviolet: "#9400D3",
  palegreen: "#98FB98",
  darkorchid: "#9932CC",
  yellowgreen: "#9ACD32",
  sienna: "#A0522D",
  brown: "#A52A2A",
  darkgray: "#A9A9A9",
  lightblue: "#ADD8E6",
  greenyellow: "#ADFF2F",
  paleturquoise: "#AFEEEE",
  lightsteelblue: "#B0C4DE",
  powderblue: "#B0E0E6",
  firebrick: "#B22222",
  darkgoldenrod: "#B8860B",
  mediumorchid: "#BA55D3",
  rosybrown: "#BC8F8F",
  darkkhaki: "#BDB76B",
  silver: "#C0C0C0",
  mediumvioletred: "#C71585",
  indianred: "#CD5C5C",
  peru: "#CD853F",
  chocolate: "#D2691E",
  tan: "#D2B48C",
  lightgrey: "#D3D3D3",
  palevioletred: "#D87093",
  thistle: "#D8BFD8",
  orchid: "#DA70D6",
  goldenrod: "#DAA520",
  crimson: "#DC143C",
  gainsboro: "#DCDCDC",
  plum: "#DDA0DD",
  burlywood: "#DEB887",
  lightcyan: "#E0FFFF",
  lavender: "#E6E6FA",
  darksalmon: "#E9967A",
  violet: "#EE82EE",
  palegoldenrod: "#EEE8AA",
  lightcoral: "#F08080",
  khaki: "#F0E68C",
  aliceblue: "#F0F8FF",
  honeydew: "#F0FFF0",
  azure: "#F0FFFF",
  sandybrown: "#F4A460",
  wheat: "#F5DEB3",
  beige: "#F5F5DC",
  whitesmoke: "#F5F5F5",
  mintcream: "#F5FFFA",
  ghostwhite: "#F8F8FF",
  salmon: "#FA8072",
  antiquewhite: "#FAEBD7",
  linen: "#FAF0E6",
  lightgoldenrodyellow: "#FAFAD2",
  oldlace: "#FDF5E6",
  red: "#FF0000",
  fuchsia: "#FF00FF",
  magenta: "#FF00FF",
  deeppink: "#FF1493",
  orangered: "#FF4500",
  tomato: "#FF6347",
  hotpink: "#FF69B4",
  coral: "#FF7F50",
  darkorange: "#FF8C00",
  lightsalmon: "#FFA07A",
  orange: "#FFA500",
  lightpink: "#FFB6C1",
  pink: "#FFC0CB",
  gold: "#FFD700",
  peachpuff: "#FFDAB9",
  navajowhite: "#FFDEAD",
  moccasin: "#FFE4B5",
  bisque: "#FFE4C4",
  mistyrose: "#FFE4E1",
  blanchedalmond: "#FFEBCD",
  papayawhip: "#FFEFD5",
  lavenderblush: "#FFF0F5",
  seashell: "#FFF5EE",
  cornsilk: "#FFF8DC",
  lemonchiffon: "#FFFACD",
  floralwhite: "#FFFAF0",
  snow: "#FFFAFA",
  yellow: "#FFFF00",
  lightyellow: "#FFFFE0",
  ivory: "#FFFFF0",
  white: "#FFFFFF"
};
var ColorPicker$1 = class ColorPicker {
  /**
   * @param {number} [pixelRatio=1]
   */
  constructor() {
    let pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    this.pixelRatio = pixelRatio;
    this.generated = false;
    this.centerCoordinates = {
      x: 289 / 2,
      y: 289 / 2
    };
    this.r = 289 * 0.49;
    this.color = {
      r: 255,
      g: 255,
      b: 255,
      a: 1
    };
    this.hueCircle = void 0;
    this.initialColor = {
      r: 255,
      g: 255,
      b: 255,
      a: 1
    };
    this.previousColor = void 0;
    this.applied = false;
    this.updateCallback = () => {
    };
    this.closeCallback = () => {
    };
    this._create();
  }
  /**
   * this inserts the colorPicker into a div from the DOM
   *
   * @param {Element} container
   */
  insertTo(container) {
    if (this.hammer !== void 0) {
      this.hammer.destroy();
      this.hammer = void 0;
    }
    this.container = container;
    this.container.appendChild(this.frame);
    this._bindHammer();
    this._setSize();
  }
  /**
   * the callback is executed on apply and save. Bind it to the application
   *
   * @param {Function} callback
   */
  setUpdateCallback(callback) {
    if (typeof callback === "function") {
      this.updateCallback = callback;
    } else {
      throw new Error("Function attempted to set as colorPicker update callback is not a function.");
    }
  }
  /**
   * the callback is executed on apply and save. Bind it to the application
   *
   * @param {Function} callback
   */
  setCloseCallback(callback) {
    if (typeof callback === "function") {
      this.closeCallback = callback;
    } else {
      throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
    }
  }
  /**
   *
   * @param {string} color
   * @returns {string}
   * @private
   */
  _isColorString(color) {
    if (typeof color === "string") {
      return htmlColors[color];
    }
  }
  /**
   * Set the color of the colorPicker
   * Supported formats:
   * 'red'                   --> HTML color string
   * '#ffffff'               --> hex string
   * 'rgb(255,255,255)'      --> rgb string
   * 'rgba(255,255,255,1.0)' --> rgba string
   * {r:255,g:255,b:255}     --> rgb object
   * {r:255,g:255,b:255,a:1.0} --> rgba object
   *
   * @param {string | object} color
   * @param {boolean} [setInitial=true]
   */
  setColor(color) {
    let setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (color === "none") {
      return;
    }
    let rgba;
    const htmlColor = this._isColorString(color);
    if (htmlColor !== void 0) {
      color = htmlColor;
    }
    if (isString(color) === true) {
      if (isValidRGB(color) === true) {
        const rgbaArray = color.substr(4).substr(0, color.length - 5).split(",");
        rgba = {
          r: rgbaArray[0],
          g: rgbaArray[1],
          b: rgbaArray[2],
          a: 1
        };
      } else if (isValidRGBA(color) === true) {
        const rgbaArray = color.substr(5).substr(0, color.length - 6).split(",");
        rgba = {
          r: rgbaArray[0],
          g: rgbaArray[1],
          b: rgbaArray[2],
          a: rgbaArray[3]
        };
      } else if (isValidHex(color) === true) {
        const rgbObj = hexToRGB(color);
        rgba = {
          r: rgbObj.r,
          g: rgbObj.g,
          b: rgbObj.b,
          a: 1
        };
      }
    } else {
      if (color instanceof Object) {
        if (color.r !== void 0 && color.g !== void 0 && color.b !== void 0) {
          const alpha = color.a !== void 0 ? color.a : "1.0";
          rgba = {
            r: color.r,
            g: color.g,
            b: color.b,
            a: alpha
          };
        }
      }
    }
    if (rgba === void 0) {
      throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + _JSON$stringify(color));
    } else {
      this._setColor(rgba, setInitial);
    }
  }
  /**
   * this shows the color picker.
   * The hue circle is constructed once and stored.
   */
  show() {
    if (this.closeCallback !== void 0) {
      this.closeCallback();
      this.closeCallback = void 0;
    }
    this.applied = false;
    this.frame.style.display = "block";
    this._generateHueCircle();
  }
  // ------------------------------------------ PRIVATE ----------------------------- //
  /**
   * Hide the picker. Is called by the cancel button.
   * Optional boolean to store the previous color for easy access later on.
   *
   * @param {boolean} [storePrevious=true]
   * @private
   */
  _hide() {
    let storePrevious = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    if (storePrevious === true) {
      this.previousColor = _Object$assign({}, this.color);
    }
    if (this.applied === true) {
      this.updateCallback(this.initialColor);
    }
    this.frame.style.display = "none";
    _setTimeout(() => {
      if (this.closeCallback !== void 0) {
        this.closeCallback();
        this.closeCallback = void 0;
      }
    }, 0);
  }
  /**
   * bound to the save button. Saves and hides.
   *
   * @private
   */
  _save() {
    this.updateCallback(this.color);
    this.applied = false;
    this._hide();
  }
  /**
   * Bound to apply button. Saves but does not close. Is undone by the cancel button.
   *
   * @private
   */
  _apply() {
    this.applied = true;
    this.updateCallback(this.color);
    this._updatePicker(this.color);
  }
  /**
   * load the color from the previous session.
   *
   * @private
   */
  _loadLast() {
    if (this.previousColor !== void 0) {
      this.setColor(this.previousColor, false);
    } else {
      alert("There is no last color to load...");
    }
  }
  /**
   * set the color, place the picker
   *
   * @param {object} rgba
   * @param {boolean} [setInitial=true]
   * @private
   */
  _setColor(rgba) {
    let setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (setInitial === true) {
      this.initialColor = _Object$assign({}, rgba);
    }
    this.color = rgba;
    const hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
    const angleConvert = 2 * Math.PI;
    const radius = this.r * hsv.s;
    const x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
    const y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);
    this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + "px";
    this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + "px";
    this._updatePicker(rgba);
  }
  /**
   * bound to opacity control
   *
   * @param {number} value
   * @private
   */
  _setOpacity(value) {
    this.color.a = value / 100;
    this._updatePicker(this.color);
  }
  /**
   * bound to brightness control
   *
   * @param {number} value
   * @private
   */
  _setBrightness(value) {
    const hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
    hsv.v = value / 100;
    const rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
    rgba["a"] = this.color.a;
    this.color = rgba;
    this._updatePicker();
  }
  /**
   * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
   *
   * @param {object} rgba
   * @private
   */
  _updatePicker() {
    let rgba = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.color;
    const hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
    const ctx = this.colorPickerCanvas.getContext("2d");
    if (this.pixelRation === void 0) {
      this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
    }
    ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
    const w = this.colorPickerCanvas.clientWidth;
    const h = this.colorPickerCanvas.clientHeight;
    ctx.clearRect(0, 0, w, h);
    ctx.putImageData(this.hueCircle, 0, 0);
    ctx.fillStyle = "rgba(0,0,0," + (1 - hsv.v) + ")";
    ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
    _fillInstanceProperty(ctx).call(ctx);
    this.brightnessRange.value = 100 * hsv.v;
    this.opacityRange.value = 100 * rgba.a;
    this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
    this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
  }
  /**
   * used by create to set the size of the canvas.
   *
   * @private
   */
  _setSize() {
    this.colorPickerCanvas.style.width = "100%";
    this.colorPickerCanvas.style.height = "100%";
    this.colorPickerCanvas.width = 289 * this.pixelRatio;
    this.colorPickerCanvas.height = 289 * this.pixelRatio;
  }
  /**
   * create all dom elements
   * TODO: cleanup, lots of similar dom elements
   *
   * @private
   */
  _create() {
    var _context7, _context8, _context9, _context0;
    this.frame = document.createElement("div");
    this.frame.className = "vis-color-picker";
    this.colorPickerDiv = document.createElement("div");
    this.colorPickerSelector = document.createElement("div");
    this.colorPickerSelector.className = "vis-selector";
    this.colorPickerDiv.appendChild(this.colorPickerSelector);
    this.colorPickerCanvas = document.createElement("canvas");
    this.colorPickerDiv.appendChild(this.colorPickerCanvas);
    if (!this.colorPickerCanvas.getContext) {
      const noCanvas = document.createElement("DIV");
      noCanvas.style.color = "red";
      noCanvas.style.fontWeight = "bold";
      noCanvas.style.padding = "10px";
      noCanvas.innerText = "Error: your browser does not support HTML canvas";
      this.colorPickerCanvas.appendChild(noCanvas);
    } else {
      const ctx = this.colorPickerCanvas.getContext("2d");
      this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
      this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
    }
    this.colorPickerDiv.className = "vis-color";
    this.opacityDiv = document.createElement("div");
    this.opacityDiv.className = "vis-opacity";
    this.brightnessDiv = document.createElement("div");
    this.brightnessDiv.className = "vis-brightness";
    this.arrowDiv = document.createElement("div");
    this.arrowDiv.className = "vis-arrow";
    this.opacityRange = document.createElement("input");
    try {
      this.opacityRange.type = "range";
      this.opacityRange.min = "0";
      this.opacityRange.max = "100";
    } catch (err) {
    }
    this.opacityRange.value = "100";
    this.opacityRange.className = "vis-range";
    this.brightnessRange = document.createElement("input");
    try {
      this.brightnessRange.type = "range";
      this.brightnessRange.min = "0";
      this.brightnessRange.max = "100";
    } catch (err) {
    }
    this.brightnessRange.value = "100";
    this.brightnessRange.className = "vis-range";
    this.opacityDiv.appendChild(this.opacityRange);
    this.brightnessDiv.appendChild(this.brightnessRange);
    const me = this;
    this.opacityRange.onchange = function() {
      me._setOpacity(this.value);
    };
    this.opacityRange.oninput = function() {
      me._setOpacity(this.value);
    };
    this.brightnessRange.onchange = function() {
      me._setBrightness(this.value);
    };
    this.brightnessRange.oninput = function() {
      me._setBrightness(this.value);
    };
    this.brightnessLabel = document.createElement("div");
    this.brightnessLabel.className = "vis-label vis-brightness";
    this.brightnessLabel.innerText = "brightness:";
    this.opacityLabel = document.createElement("div");
    this.opacityLabel.className = "vis-label vis-opacity";
    this.opacityLabel.innerText = "opacity:";
    this.newColorDiv = document.createElement("div");
    this.newColorDiv.className = "vis-new-color";
    this.newColorDiv.innerText = "new";
    this.initialColorDiv = document.createElement("div");
    this.initialColorDiv.className = "vis-initial-color";
    this.initialColorDiv.innerText = "initial";
    this.cancelButton = document.createElement("div");
    this.cancelButton.className = "vis-button vis-cancel";
    this.cancelButton.innerText = "cancel";
    this.cancelButton.onclick = _bindInstanceProperty(_context7 = this._hide).call(_context7, this, false);
    this.applyButton = document.createElement("div");
    this.applyButton.className = "vis-button vis-apply";
    this.applyButton.innerText = "apply";
    this.applyButton.onclick = _bindInstanceProperty(_context8 = this._apply).call(_context8, this);
    this.saveButton = document.createElement("div");
    this.saveButton.className = "vis-button vis-save";
    this.saveButton.innerText = "save";
    this.saveButton.onclick = _bindInstanceProperty(_context9 = this._save).call(_context9, this);
    this.loadButton = document.createElement("div");
    this.loadButton.className = "vis-button vis-load";
    this.loadButton.innerText = "load last";
    this.loadButton.onclick = _bindInstanceProperty(_context0 = this._loadLast).call(_context0, this);
    this.frame.appendChild(this.colorPickerDiv);
    this.frame.appendChild(this.arrowDiv);
    this.frame.appendChild(this.brightnessLabel);
    this.frame.appendChild(this.brightnessDiv);
    this.frame.appendChild(this.opacityLabel);
    this.frame.appendChild(this.opacityDiv);
    this.frame.appendChild(this.newColorDiv);
    this.frame.appendChild(this.initialColorDiv);
    this.frame.appendChild(this.cancelButton);
    this.frame.appendChild(this.applyButton);
    this.frame.appendChild(this.saveButton);
    this.frame.appendChild(this.loadButton);
  }
  /**
   * bind hammer to the color picker
   *
   * @private
   */
  _bindHammer() {
    this.drag = {};
    this.pinch = {};
    this.hammer = new Hammer$1(this.colorPickerCanvas);
    this.hammer.get("pinch").set({
      enable: true
    });
    this.hammer.on("hammer.input", (event) => {
      if (event.isFirst) {
        this._moveSelector(event);
      }
    });
    this.hammer.on("tap", (event) => {
      this._moveSelector(event);
    });
    this.hammer.on("panstart", (event) => {
      this._moveSelector(event);
    });
    this.hammer.on("panmove", (event) => {
      this._moveSelector(event);
    });
    this.hammer.on("panend", (event) => {
      this._moveSelector(event);
    });
  }
  /**
   * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
   *
   * @private
   */
  _generateHueCircle() {
    if (this.generated === false) {
      const ctx = this.colorPickerCanvas.getContext("2d");
      if (this.pixelRation === void 0) {
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
      }
      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      const w = this.colorPickerCanvas.clientWidth;
      const h = this.colorPickerCanvas.clientHeight;
      ctx.clearRect(0, 0, w, h);
      let x, y, hue, sat;
      this.centerCoordinates = {
        x: w * 0.5,
        y: h * 0.5
      };
      this.r = 0.49 * w;
      const angleConvert = 2 * Math.PI / 360;
      const hfac = 1 / 360;
      const sfac = 1 / this.r;
      let rgb;
      for (hue = 0; hue < 360; hue++) {
        for (sat = 0; sat < this.r; sat++) {
          x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
          y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
          rgb = HSVToRGB(hue * hfac, sat * sfac, 1);
          ctx.fillStyle = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
          ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
        }
      }
      ctx.strokeStyle = "rgba(0,0,0,1)";
      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
      ctx.stroke();
      this.hueCircle = ctx.getImageData(0, 0, w, h);
    }
    this.generated = true;
  }
  /**
   * move the selector. This is called by hammer functions.
   *
   * @param {Event}  event   The event
   * @private
   */
  _moveSelector(event) {
    const rect = this.colorPickerDiv.getBoundingClientRect();
    const left = event.center.x - rect.left;
    const top = event.center.y - rect.top;
    const centerY = 0.5 * this.colorPickerDiv.clientHeight;
    const centerX = 0.5 * this.colorPickerDiv.clientWidth;
    const x = left - centerX;
    const y = top - centerY;
    const angle = Math.atan2(x, y);
    const radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);
    const newTop = Math.cos(angle) * radius + centerY;
    const newLeft = Math.sin(angle) * radius + centerX;
    this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + "px";
    this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + "px";
    let h = angle / (2 * Math.PI);
    h = h < 0 ? h + 1 : h;
    const s = radius / this.r;
    const hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
    hsv.h = h;
    hsv.s = s;
    const rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
    rgba["a"] = this.color.a;
    this.color = rgba;
    this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
    this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
  }
};
function wrapInTag() {
  for (var _len5 = arguments.length, rest = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    rest[_key5] = arguments[_key5];
  }
  if (rest.length < 1) {
    throw new TypeError("Invalid arguments.");
  } else if (rest.length === 1) {
    return document.createTextNode(rest[0]);
  } else {
    const element = document.createElement(rest[0]);
    element.appendChild(wrapInTag(..._sliceInstanceProperty(rest).call(rest, 1)));
    return element;
  }
}
var Configurator$1 = class Configurator {
  /**
   * @param {object} parentModule        | the location where parentModule.setOptions() can be called
   * @param {object} defaultContainer    | the default container of the module
   * @param {object} configureOptions    | the fully configured and predefined options set found in allOptions.js
   * @param {number} pixelRatio          | canvas pixel ratio
   * @param {Function} hideOption        | custom logic to dynamically hide options
   */
  constructor(parentModule, defaultContainer, configureOptions2) {
    let pixelRatio = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    let hideOption = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : () => false;
    this.parent = parentModule;
    this.changedOptions = [];
    this.container = defaultContainer;
    this.allowCreation = false;
    this.hideOption = hideOption;
    this.options = {};
    this.initialized = false;
    this.popupCounter = 0;
    this.defaultOptions = {
      enabled: false,
      filter: true,
      container: void 0,
      showButton: true
    };
    _Object$assign(this.options, this.defaultOptions);
    this.configureOptions = configureOptions2;
    this.moduleOptions = {};
    this.domElements = [];
    this.popupDiv = {};
    this.popupLimit = 5;
    this.popupHistory = {};
    this.colorPicker = new ColorPicker$1(pixelRatio);
    this.wrapper = void 0;
  }
  /**
   * refresh all options.
   * Because all modules parse their options by themselves, we just use their options. We copy them here.
   *
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      this.popupHistory = {};
      this._removePopup();
      let enabled = true;
      if (typeof options2 === "string") {
        this.options.filter = options2;
      } else if (_Array$isArray(options2)) {
        this.options.filter = options2.join();
      } else if (typeof options2 === "object") {
        if (options2 == null) {
          throw new TypeError("options cannot be null");
        }
        if (options2.container !== void 0) {
          this.options.container = options2.container;
        }
        if (_filterInstanceProperty(options2) !== void 0) {
          this.options.filter = _filterInstanceProperty(options2);
        }
        if (options2.showButton !== void 0) {
          this.options.showButton = options2.showButton;
        }
        if (options2.enabled !== void 0) {
          enabled = options2.enabled;
        }
      } else if (typeof options2 === "boolean") {
        this.options.filter = true;
        enabled = options2;
      } else if (typeof options2 === "function") {
        this.options.filter = options2;
        enabled = true;
      }
      if (_filterInstanceProperty(this.options) === false) {
        enabled = false;
      }
      this.options.enabled = enabled;
    }
    this._clean();
  }
  /**
   *
   * @param {object} moduleOptions
   */
  setModuleOptions(moduleOptions) {
    this.moduleOptions = moduleOptions;
    if (this.options.enabled === true) {
      this._clean();
      if (this.options.container !== void 0) {
        this.container = this.options.container;
      }
      this._create();
    }
  }
  /**
   * Create all DOM elements
   *
   * @private
   */
  _create() {
    this._clean();
    this.changedOptions = [];
    const filter3 = _filterInstanceProperty(this.options);
    let counter = 0;
    let show = false;
    for (const option in this.configureOptions) {
      if (Object.prototype.hasOwnProperty.call(this.configureOptions, option)) {
        this.allowCreation = false;
        show = false;
        if (typeof filter3 === "function") {
          show = filter3(option, []);
          show = show || this._handleObject(this.configureOptions[option], [option], true);
        } else if (filter3 === true || _indexOfInstanceProperty(filter3).call(filter3, option) !== -1) {
          show = true;
        }
        if (show !== false) {
          this.allowCreation = true;
          if (counter > 0) {
            this._makeItem([]);
          }
          this._makeHeader(option);
          this._handleObject(this.configureOptions[option], [option]);
        }
        counter++;
      }
    }
    this._makeButton();
    this._push();
  }
  /**
   * draw all DOM elements on the screen
   *
   * @private
   */
  _push() {
    this.wrapper = document.createElement("div");
    this.wrapper.className = "vis-configuration-wrapper";
    this.container.appendChild(this.wrapper);
    for (let i = 0; i < this.domElements.length; i++) {
      this.wrapper.appendChild(this.domElements[i]);
    }
    this._showPopupIfNeeded();
  }
  /**
   * delete all DOM elements
   *
   * @private
   */
  _clean() {
    for (let i = 0; i < this.domElements.length; i++) {
      this.wrapper.removeChild(this.domElements[i]);
    }
    if (this.wrapper !== void 0) {
      this.container.removeChild(this.wrapper);
      this.wrapper = void 0;
    }
    this.domElements = [];
    this._removePopup();
  }
  /**
   * get the value from the actualOptions if it exists
   *
   * @param {Array} path    | where to look for the actual option
   * @returns {*}
   * @private
   */
  _getValue(path2) {
    let base = this.moduleOptions;
    for (let i = 0; i < path2.length; i++) {
      if (base[path2[i]] !== void 0) {
        base = base[path2[i]];
      } else {
        base = void 0;
        break;
      }
    }
    return base;
  }
  /**
   * all option elements are wrapped in an item
   *
   * @param {Array} path    | where to look for the actual option
   * @param {Array.<Element>} domElements
   * @returns {number}
   * @private
   */
  _makeItem(path2) {
    if (this.allowCreation === true) {
      const item = document.createElement("div");
      item.className = "vis-configuration vis-config-item vis-config-s" + path2.length;
      for (var _len6 = arguments.length, domElements = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        domElements[_key6 - 1] = arguments[_key6];
      }
      _forEachInstanceProperty(domElements).call(domElements, (element) => {
        item.appendChild(element);
      });
      this.domElements.push(item);
      return this.domElements.length;
    }
    return 0;
  }
  /**
   * header for major subjects
   *
   * @param {string} name
   * @private
   */
  _makeHeader(name) {
    const div = document.createElement("div");
    div.className = "vis-configuration vis-config-header";
    div.innerText = name;
    this._makeItem([], div);
  }
  /**
   * make a label, if it is an object label, it gets different styling.
   *
   * @param {string} name
   * @param {Array} path    | where to look for the actual option
   * @param {string} objectLabel
   * @returns {HTMLElement}
   * @private
   */
  _makeLabel(name, path2) {
    let objectLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const div = document.createElement("div");
    div.className = "vis-configuration vis-config-label vis-config-s" + path2.length;
    if (objectLabel === true) {
      while (div.firstChild) {
        div.removeChild(div.firstChild);
      }
      div.appendChild(wrapInTag("i", "b", name));
    } else {
      div.innerText = name + ":";
    }
    return div;
  }
  /**
   * make a dropdown list for multiple possible string optoins
   *
   * @param {Array.<number>} arr
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _makeDropdown(arr, value, path2) {
    const select = document.createElement("select");
    select.className = "vis-configuration vis-config-select";
    let selectedValue = 0;
    if (value !== void 0) {
      if (_indexOfInstanceProperty(arr).call(arr, value) !== -1) {
        selectedValue = _indexOfInstanceProperty(arr).call(arr, value);
      }
    }
    for (let i = 0; i < arr.length; i++) {
      const option = document.createElement("option");
      option.value = arr[i];
      if (i === selectedValue) {
        option.selected = "selected";
      }
      option.innerText = arr[i];
      select.appendChild(option);
    }
    const me = this;
    select.onchange = function() {
      me._update(this.value, path2);
    };
    const label = this._makeLabel(path2[path2.length - 1], path2);
    this._makeItem(path2, label, select);
  }
  /**
   * make a range object for numeric options
   *
   * @param {Array.<number>} arr
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _makeRange(arr, value, path2) {
    const defaultValue = arr[0];
    const min2 = arr[1];
    const max2 = arr[2];
    const step = arr[3];
    const range = document.createElement("input");
    range.className = "vis-configuration vis-config-range";
    try {
      range.type = "range";
      range.min = min2;
      range.max = max2;
    } catch (err) {
    }
    range.step = step;
    let popupString = "";
    let popupValue = 0;
    if (value !== void 0) {
      const factor = 1.2;
      if (value < 0 && value * factor < min2) {
        range.min = Math.ceil(value * factor);
        popupValue = range.min;
        popupString = "range increased";
      } else if (value / factor < min2) {
        range.min = Math.ceil(value / factor);
        popupValue = range.min;
        popupString = "range increased";
      }
      if (value * factor > max2 && max2 !== 1) {
        range.max = Math.ceil(value * factor);
        popupValue = range.max;
        popupString = "range increased";
      }
      range.value = value;
    } else {
      range.value = defaultValue;
    }
    const input = document.createElement("input");
    input.className = "vis-configuration vis-config-rangeinput";
    input.value = range.value;
    const me = this;
    range.onchange = function() {
      input.value = this.value;
      me._update(Number(this.value), path2);
    };
    range.oninput = function() {
      input.value = this.value;
    };
    const label = this._makeLabel(path2[path2.length - 1], path2);
    const itemIndex = this._makeItem(path2, label, range, input);
    if (popupString !== "" && this.popupHistory[itemIndex] !== popupValue) {
      this.popupHistory[itemIndex] = popupValue;
      this._setupPopup(popupString, itemIndex);
    }
  }
  /**
   * make a button object
   *
   * @private
   */
  _makeButton() {
    if (this.options.showButton === true) {
      const generateButton = document.createElement("div");
      generateButton.className = "vis-configuration vis-config-button";
      generateButton.innerText = "generate options";
      generateButton.onclick = () => {
        this._printOptions();
      };
      generateButton.onmouseover = () => {
        generateButton.className = "vis-configuration vis-config-button hover";
      };
      generateButton.onmouseout = () => {
        generateButton.className = "vis-configuration vis-config-button";
      };
      this.optionsContainer = document.createElement("div");
      this.optionsContainer.className = "vis-configuration vis-config-option-container";
      this.domElements.push(this.optionsContainer);
      this.domElements.push(generateButton);
    }
  }
  /**
   * prepare the popup
   *
   * @param {string} string
   * @param {number} index
   * @private
   */
  _setupPopup(string2, index2) {
    if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
      const div = document.createElement("div");
      div.id = "vis-configuration-popup";
      div.className = "vis-configuration-popup";
      div.innerText = string2;
      div.onclick = () => {
        this._removePopup();
      };
      this.popupCounter += 1;
      this.popupDiv = {
        html: div,
        index: index2
      };
    }
  }
  /**
   * remove the popup from the dom
   *
   * @private
   */
  _removePopup() {
    if (this.popupDiv.html !== void 0) {
      this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
      clearTimeout(this.popupDiv.hideTimeout);
      clearTimeout(this.popupDiv.deleteTimeout);
      this.popupDiv = {};
    }
  }
  /**
   * Show the popup if it is needed.
   *
   * @private
   */
  _showPopupIfNeeded() {
    if (this.popupDiv.html !== void 0) {
      const correspondingElement = this.domElements[this.popupDiv.index];
      const rect = correspondingElement.getBoundingClientRect();
      this.popupDiv.html.style.left = rect.left + "px";
      this.popupDiv.html.style.top = rect.top - 30 + "px";
      document.body.appendChild(this.popupDiv.html);
      this.popupDiv.hideTimeout = _setTimeout(() => {
        this.popupDiv.html.style.opacity = 0;
      }, 1500);
      this.popupDiv.deleteTimeout = _setTimeout(() => {
        this._removePopup();
      }, 1800);
    }
  }
  /**
   * make a checkbox for boolean options.
   *
   * @param {number} defaultValue
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _makeCheckbox(defaultValue, value, path2) {
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.className = "vis-configuration vis-config-checkbox";
    checkbox.checked = defaultValue;
    if (value !== void 0) {
      checkbox.checked = value;
      if (value !== defaultValue) {
        if (typeof defaultValue === "object") {
          if (value !== defaultValue.enabled) {
            this.changedOptions.push({
              path: path2,
              value
            });
          }
        } else {
          this.changedOptions.push({
            path: path2,
            value
          });
        }
      }
    }
    const me = this;
    checkbox.onchange = function() {
      me._update(this.checked, path2);
    };
    const label = this._makeLabel(path2[path2.length - 1], path2);
    this._makeItem(path2, label, checkbox);
  }
  /**
   * make a text input field for string options.
   *
   * @param {number} defaultValue
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _makeTextInput(defaultValue, value, path2) {
    const checkbox = document.createElement("input");
    checkbox.type = "text";
    checkbox.className = "vis-configuration vis-config-text";
    checkbox.value = value;
    if (value !== defaultValue) {
      this.changedOptions.push({
        path: path2,
        value
      });
    }
    const me = this;
    checkbox.onchange = function() {
      me._update(this.value, path2);
    };
    const label = this._makeLabel(path2[path2.length - 1], path2);
    this._makeItem(path2, label, checkbox);
  }
  /**
   * make a color field with a color picker for color fields
   *
   * @param {Array.<number>} arr
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _makeColorField(arr, value, path2) {
    const defaultColor = arr[1];
    const div = document.createElement("div");
    value = value === void 0 ? defaultColor : value;
    if (value !== "none") {
      div.className = "vis-configuration vis-config-colorBlock";
      div.style.backgroundColor = value;
    } else {
      div.className = "vis-configuration vis-config-colorBlock none";
    }
    value = value === void 0 ? defaultColor : value;
    div.onclick = () => {
      this._showColorPicker(value, div, path2);
    };
    const label = this._makeLabel(path2[path2.length - 1], path2);
    this._makeItem(path2, label, div);
  }
  /**
   * used by the color buttons to call the color picker.
   *
   * @param {number} value
   * @param {HTMLElement} div
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _showColorPicker(value, div, path2) {
    div.onclick = function() {
    };
    this.colorPicker.insertTo(div);
    this.colorPicker.show();
    this.colorPicker.setColor(value);
    this.colorPicker.setUpdateCallback((color) => {
      const colorString = "rgba(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
      div.style.backgroundColor = colorString;
      this._update(colorString, path2);
    });
    this.colorPicker.setCloseCallback(() => {
      div.onclick = () => {
        this._showColorPicker(value, div, path2);
      };
    });
  }
  /**
   * parse an object and draw the correct items
   *
   * @param {object} obj
   * @param {Array} [path=[]]    | where to look for the actual option
   * @param {boolean} [checkOnly=false]
   * @returns {boolean}
   * @private
   */
  _handleObject(obj) {
    let path2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    let checkOnly = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    let show = false;
    const filter3 = _filterInstanceProperty(this.options);
    let visibleInSet = false;
    for (const subObj in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, subObj)) {
        show = true;
        const item = obj[subObj];
        const newPath = copyAndExtendArray(path2, subObj);
        if (typeof filter3 === "function") {
          show = filter3(subObj, path2);
          if (show === false) {
            if (!_Array$isArray(item) && typeof item !== "string" && typeof item !== "boolean" && item instanceof Object) {
              this.allowCreation = false;
              show = this._handleObject(item, newPath, true);
              this.allowCreation = checkOnly === false;
            }
          }
        }
        if (show !== false) {
          visibleInSet = true;
          const value = this._getValue(newPath);
          if (_Array$isArray(item)) {
            this._handleArray(item, value, newPath);
          } else if (typeof item === "string") {
            this._makeTextInput(item, value, newPath);
          } else if (typeof item === "boolean") {
            this._makeCheckbox(item, value, newPath);
          } else if (item instanceof Object) {
            if (!this.hideOption(path2, subObj, this.moduleOptions)) {
              if (item.enabled !== void 0) {
                const enabledPath = copyAndExtendArray(newPath, "enabled");
                const enabledValue = this._getValue(enabledPath);
                if (enabledValue === true) {
                  const label = this._makeLabel(subObj, newPath, true);
                  this._makeItem(newPath, label);
                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                } else {
                  this._makeCheckbox(item, enabledValue, newPath);
                }
              } else {
                const label = this._makeLabel(subObj, newPath, true);
                this._makeItem(newPath, label);
                visibleInSet = this._handleObject(item, newPath) || visibleInSet;
              }
            }
          } else {
            console.error("dont know how to handle", item, subObj, newPath);
          }
        }
      }
    }
    return visibleInSet;
  }
  /**
   * handle the array type of option
   *
   * @param {Array.<number>} arr
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _handleArray(arr, value, path2) {
    if (typeof arr[0] === "string" && arr[0] === "color") {
      this._makeColorField(arr, value, path2);
      if (arr[1] !== value) {
        this.changedOptions.push({
          path: path2,
          value
        });
      }
    } else if (typeof arr[0] === "string") {
      this._makeDropdown(arr, value, path2);
      if (arr[0] !== value) {
        this.changedOptions.push({
          path: path2,
          value
        });
      }
    } else if (typeof arr[0] === "number") {
      this._makeRange(arr, value, path2);
      if (arr[0] !== value) {
        this.changedOptions.push({
          path: path2,
          value: Number(value)
        });
      }
    }
  }
  /**
   * called to update the network with the new settings.
   *
   * @param {number} value
   * @param {Array} path    | where to look for the actual option
   * @private
   */
  _update(value, path2) {
    const options2 = this._constructOptions(value, path2);
    if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
      this.parent.body.emitter.emit("configChange", options2);
    }
    this.initialized = true;
    this.parent.setOptions(options2);
  }
  /**
   *
   * @param {string | boolean} value
   * @param {Array.<string>} path
   * @param {{}} optionsObj
   * @returns {{}}
   * @private
   */
  _constructOptions(value, path2) {
    let optionsObj = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let pointer = optionsObj;
    value = value === "true" ? true : value;
    value = value === "false" ? false : value;
    for (let i = 0; i < path2.length; i++) {
      if (path2[i] !== "global") {
        if (pointer[path2[i]] === void 0) {
          pointer[path2[i]] = {};
        }
        if (i !== path2.length - 1) {
          pointer = pointer[path2[i]];
        } else {
          pointer[path2[i]] = value;
        }
      }
    }
    return optionsObj;
  }
  /**
   * @private
   */
  _printOptions() {
    const options2 = this.getOptions();
    while (this.optionsContainer.firstChild) {
      this.optionsContainer.removeChild(this.optionsContainer.firstChild);
    }
    this.optionsContainer.appendChild(wrapInTag("pre", "const options = " + _JSON$stringify(options2, null, 2)));
  }
  /**
   *
   * @returns {{}} options
   */
  getOptions() {
    const options2 = {};
    for (let i = 0; i < this.changedOptions.length; i++) {
      this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options2);
    }
    return options2;
  }
};
var Popup$1 = class Popup {
  /**
   * @param {Element} container       The container object.
   * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')
   */
  constructor(container, overflowMethod) {
    this.container = container;
    this.overflowMethod = overflowMethod || "cap";
    this.x = 0;
    this.y = 0;
    this.padding = 5;
    this.hidden = false;
    this.frame = document.createElement("div");
    this.frame.className = "vis-tooltip";
    this.container.appendChild(this.frame);
  }
  /**
   * @param {number} x   Horizontal position of the popup window
   * @param {number} y   Vertical position of the popup window
   */
  setPosition(x, y) {
    this.x = _parseInt$1(x);
    this.y = _parseInt$1(y);
  }
  /**
   * Set the content for the popup window. This can be HTML code or text.
   *
   * @param {string | Element} content
   */
  setText(content) {
    if (content instanceof Element) {
      while (this.frame.firstChild) {
        this.frame.removeChild(this.frame.firstChild);
      }
      this.frame.appendChild(content);
    } else {
      this.frame.innerText = content;
    }
  }
  /**
   * Show the popup window
   *
   * @param {boolean} [doShow]    Show or hide the window
   */
  show(doShow) {
    if (doShow === void 0) {
      doShow = true;
    }
    if (doShow === true) {
      const height = this.frame.clientHeight;
      const width = this.frame.clientWidth;
      const maxHeight = this.frame.parentNode.clientHeight;
      const maxWidth = this.frame.parentNode.clientWidth;
      let left = 0, top = 0;
      if (this.overflowMethod == "flip") {
        let isLeft = false, isTop = true;
        if (this.y - height < this.padding) {
          isTop = false;
        }
        if (this.x + width > maxWidth - this.padding) {
          isLeft = true;
        }
        if (isLeft) {
          left = this.x - width;
        } else {
          left = this.x;
        }
        if (isTop) {
          top = this.y - height;
        } else {
          top = this.y;
        }
      } else {
        top = this.y - height;
        if (top + height + this.padding > maxHeight) {
          top = maxHeight - height - this.padding;
        }
        if (top < this.padding) {
          top = this.padding;
        }
        left = this.x;
        if (left + width + this.padding > maxWidth) {
          left = maxWidth - width - this.padding;
        }
        if (left < this.padding) {
          left = this.padding;
        }
      }
      this.frame.style.left = left + "px";
      this.frame.style.top = top + "px";
      this.frame.style.visibility = "visible";
      this.hidden = false;
    } else {
      this.hide();
    }
  }
  /**
   * Hide the popup window
   */
  hide() {
    this.hidden = true;
    this.frame.style.left = "0";
    this.frame.style.top = "0";
    this.frame.style.visibility = "hidden";
  }
  /**
   * Remove the popup window
   */
  destroy() {
    this.frame.parentNode.removeChild(this.frame);
  }
};
var errorFound = false;
var allOptions$1;
var VALIDATOR_PRINT_STYLE$1 = "background: #FFeeee; color: #dd0000";
var Validator$1 = class Validator {
  /**
   * Main function to be called
   *
   * @param {object} options
   * @param {object} referenceOptions
   * @param {object} subObject
   * @returns {boolean}
   * @static
   */
  static validate(options2, referenceOptions, subObject) {
    errorFound = false;
    allOptions$1 = referenceOptions;
    let usedOptions = referenceOptions;
    if (subObject !== void 0) {
      usedOptions = referenceOptions[subObject];
    }
    Validator.parse(options2, usedOptions, []);
    return errorFound;
  }
  /**
   * Will traverse an object recursively and check every value
   *
   * @param {object} options
   * @param {object} referenceOptions
   * @param {Array} path    | where to look for the actual option
   * @static
   */
  static parse(options2, referenceOptions, path2) {
    for (const option in options2) {
      if (Object.prototype.hasOwnProperty.call(options2, option)) {
        Validator.check(option, options2, referenceOptions, path2);
      }
    }
  }
  /**
   * Check every value. If the value is an object, call the parse function on that object.
   *
   * @param {string} option
   * @param {object} options
   * @param {object} referenceOptions
   * @param {Array} path    | where to look for the actual option
   * @static
   */
  static check(option, options2, referenceOptions, path2) {
    if (referenceOptions[option] === void 0 && referenceOptions.__any__ === void 0) {
      Validator.getSuggestion(option, referenceOptions, path2);
      return;
    }
    let referenceOption = option;
    let is_object = true;
    if (referenceOptions[option] === void 0 && referenceOptions.__any__ !== void 0) {
      referenceOption = "__any__";
      is_object = Validator.getType(options2[option]) === "object";
    }
    let refOptionObj = referenceOptions[referenceOption];
    if (is_object && refOptionObj.__type__ !== void 0) {
      refOptionObj = refOptionObj.__type__;
    }
    Validator.checkFields(option, options2, referenceOptions, referenceOption, refOptionObj, path2);
  }
  /**
   *
   * @param {string}  option           | the option property
   * @param {object}  options          | The supplied options object
   * @param {object}  referenceOptions | The reference options containing all options and their allowed formats
   * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
   * @param {string}  refOptionObj     | This is the type object from the reference options
   * @param {Array}   path             | where in the object is the option
   * @static
   */
  static checkFields(option, options2, referenceOptions, referenceOption, refOptionObj, path2) {
    const log = function(message) {
      console.error("%c" + message + Validator.printLocation(path2, option), VALIDATOR_PRINT_STYLE$1);
    };
    const optionType = Validator.getType(options2[option]);
    const refOptionType = refOptionObj[optionType];
    if (refOptionType !== void 0) {
      if (Validator.getType(refOptionType) === "array" && _indexOfInstanceProperty(refOptionType).call(refOptionType, options2[option]) === -1) {
        log('Invalid option detected in "' + option + '". Allowed values are:' + Validator.print(refOptionType) + ' not "' + options2[option] + '". ');
        errorFound = true;
      } else if (optionType === "object" && referenceOption !== "__any__") {
        path2 = copyAndExtendArray(path2, option);
        Validator.parse(options2[option], referenceOptions[referenceOption], path2);
      }
    } else if (refOptionObj["any"] === void 0) {
      log('Invalid type received for "' + option + '". Expected: ' + Validator.print(_Object$keys(refOptionObj)) + ". Received [" + optionType + '] "' + options2[option] + '"');
      errorFound = true;
    }
  }
  /**
   *
   * @param {object | boolean | number | string | Array.<number> | Date | Node | Moment | undefined | null} object
   * @returns {string}
   * @static
   */
  static getType(object2) {
    const type = typeof object2;
    if (type === "object") {
      if (object2 === null) {
        return "null";
      }
      if (object2 instanceof Boolean) {
        return "boolean";
      }
      if (object2 instanceof Number) {
        return "number";
      }
      if (object2 instanceof String) {
        return "string";
      }
      if (_Array$isArray(object2)) {
        return "array";
      }
      if (object2 instanceof Date) {
        return "date";
      }
      if (object2.nodeType !== void 0) {
        return "dom";
      }
      if (object2._isAMomentObject === true) {
        return "moment";
      }
      return "object";
    } else if (type === "number") {
      return "number";
    } else if (type === "boolean") {
      return "boolean";
    } else if (type === "string") {
      return "string";
    } else if (type === void 0) {
      return "undefined";
    }
    return type;
  }
  /**
   * @param {string} option
   * @param {object} options
   * @param {Array.<string>} path
   * @static
   */
  static getSuggestion(option, options2, path2) {
    const localSearch = Validator.findInOptions(option, options2, path2, false);
    const globalSearch = Validator.findInOptions(option, allOptions$1, [], true);
    const localSearchThreshold = 8;
    const globalSearchThreshold = 4;
    let msg;
    if (localSearch.indexMatch !== void 0) {
      msg = " in " + Validator.printLocation(localSearch.path, option, "") + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
    } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
      msg = " in " + Validator.printLocation(localSearch.path, option, "") + "Perhaps it was misplaced? Matching option found at: " + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, "");
    } else if (localSearch.distance <= localSearchThreshold) {
      msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator.printLocation(localSearch.path, option);
    } else {
      msg = ". Did you mean one of these: " + Validator.print(_Object$keys(options2)) + Validator.printLocation(path2, option);
    }
    console.error('%cUnknown option detected: "' + option + '"' + msg, VALIDATOR_PRINT_STYLE$1);
    errorFound = true;
  }
  /**
   * traverse the options in search for a match.
   *
   * @param {string} option
   * @param {object} options
   * @param {Array} path    | where to look for the actual option
   * @param {boolean} [recursive=false]
   * @returns {{closestMatch: string, path: Array, distance: number}}
   * @static
   */
  static findInOptions(option, options2, path2) {
    let recursive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    let min2 = 1e9;
    let closestMatch = "";
    let closestMatchPath = [];
    const lowerCaseOption = option.toLowerCase();
    let indexMatch = void 0;
    for (const op in options2) {
      let distance;
      if (options2[op].__type__ !== void 0 && recursive === true) {
        const result = Validator.findInOptions(option, options2[op], copyAndExtendArray(path2, op));
        if (min2 > result.distance) {
          closestMatch = result.closestMatch;
          closestMatchPath = result.path;
          min2 = result.distance;
          indexMatch = result.indexMatch;
        }
      } else {
        var _context1;
        if (_indexOfInstanceProperty(_context1 = op.toLowerCase()).call(_context1, lowerCaseOption) !== -1) {
          indexMatch = op;
        }
        distance = Validator.levenshteinDistance(option, op);
        if (min2 > distance) {
          closestMatch = op;
          closestMatchPath = copyArray(path2);
          min2 = distance;
        }
      }
    }
    return {
      closestMatch,
      path: closestMatchPath,
      distance: min2,
      indexMatch
    };
  }
  /**
   * @param {Array.<string>} path
   * @param {object} option
   * @param {string} prefix
   * @returns {string}
   * @static
   */
  static printLocation(path2, option) {
    let prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "Problem value found at: \n";
    let str = "\n\n" + prefix + "options = {\n";
    for (let i = 0; i < path2.length; i++) {
      for (let j = 0; j < i + 1; j++) {
        str += "  ";
      }
      str += path2[i] + ": {\n";
    }
    for (let j = 0; j < path2.length + 1; j++) {
      str += "  ";
    }
    str += option + "\n";
    for (let i = 0; i < path2.length + 1; i++) {
      for (let j = 0; j < path2.length - i; j++) {
        str += "  ";
      }
      str += "}\n";
    }
    return str + "\n\n";
  }
  /**
   * @param {object} options
   * @returns {string}
   * @static
   */
  static print(options2) {
    return _JSON$stringify(options2).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
  }
  /**
   *  Compute the edit distance between the two given strings
   * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
   *
   * Copyright (c) 2011 Andrei Mackenzie
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   *
   * @param {string} a
   * @param {string} b
   * @returns {Array.<Array.<number>>}}
   * @static
   */
  static levenshteinDistance(a, b) {
    if (a.length === 0)
      return b.length;
    if (b.length === 0)
      return a.length;
    const matrix = [];
    let i;
    for (i = 0; i <= b.length; i++) {
      matrix[i] = [i];
    }
    let j;
    for (j = 0; j <= a.length; j++) {
      matrix[0][j] = j;
    }
    for (i = 1; i <= b.length; i++) {
      for (j = 1; j <= a.length; j++) {
        if (b.charAt(i - 1) == a.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1,
            // substitution
            Math.min(
              matrix[i][j - 1] + 1,
              // insertion
              matrix[i - 1][j] + 1
            )
          );
        }
      }
    }
    return matrix[b.length][a.length];
  }
};
var Activator = Activator$1;
var Configurator2 = Configurator$1;
var Hammer = Hammer$1;
var Popup2 = Popup$1;
var VALIDATOR_PRINT_STYLE = VALIDATOR_PRINT_STYLE$1;
var Validator2 = Validator$1;
function parseDOT(data2) {
  dot = data2;
  return parseGraph();
}
var NODE_ATTR_MAPPING = {
  fontsize: "font.size",
  fontcolor: "font.color",
  labelfontcolor: "font.color",
  fontname: "font.face",
  color: ["color.border", "color.background"],
  fillcolor: "color.background",
  tooltip: "title",
  labeltooltip: "title"
};
var EDGE_ATTR_MAPPING = _Object$create(NODE_ATTR_MAPPING);
EDGE_ATTR_MAPPING.color = "color.color";
EDGE_ATTR_MAPPING.style = "dashes";
var TOKENTYPE = {
  NULL: 0,
  DELIMITER: 1,
  IDENTIFIER: 2,
  UNKNOWN: 3
};
var DELIMITERS = {
  "{": true,
  "}": true,
  "[": true,
  "]": true,
  ";": true,
  "=": true,
  ",": true,
  "->": true,
  "--": true
};
var dot = "";
var index = 0;
var c = "";
var token = "";
var tokenType = TOKENTYPE.NULL;
function first() {
  index = 0;
  c = dot.charAt(0);
}
function next() {
  index++;
  c = dot.charAt(index);
}
function nextPreview() {
  return dot.charAt(index + 1);
}
function isAlphaNumeric(c2) {
  var charCode = c2.charCodeAt(0);
  if (charCode < 47) {
    return charCode === 35 || charCode === 46;
  }
  if (charCode < 59) {
    return charCode > 47;
  }
  if (charCode < 91) {
    return charCode > 64;
  }
  if (charCode < 96) {
    return charCode === 95;
  }
  if (charCode < 123) {
    return charCode > 96;
  }
  return false;
}
function merge$1(a, b) {
  if (!a) {
    a = {};
  }
  if (b) {
    for (var name in b) {
      if (b.hasOwnProperty(name)) {
        a[name] = b[name];
      }
    }
  }
  return a;
}
function setValue(obj, path2, value) {
  var keys4 = path2.split(".");
  var o = obj;
  while (keys4.length) {
    var key = keys4.shift();
    if (keys4.length) {
      if (!o[key]) {
        o[key] = {};
      }
      o = o[key];
    } else {
      o[key] = value;
    }
  }
}
function addNode(graph, node) {
  var i, len;
  var current = null;
  var graphs = [graph];
  var root = graph;
  while (root.parent) {
    graphs.push(root.parent);
    root = root.parent;
  }
  if (root.nodes) {
    for (i = 0, len = root.nodes.length; i < len; i++) {
      if (node.id === root.nodes[i].id) {
        current = root.nodes[i];
        break;
      }
    }
  }
  if (!current) {
    current = {
      id: node.id
    };
    if (graph.node) {
      current.attr = merge$1(current.attr, graph.node);
    }
  }
  for (i = graphs.length - 1; i >= 0; i--) {
    var _context;
    var g = graphs[i];
    if (!g.nodes) {
      g.nodes = [];
    }
    if (_indexOfInstanceProperty(_context = g.nodes).call(_context, current) === -1) {
      g.nodes.push(current);
    }
  }
  if (node.attr) {
    current.attr = merge$1(current.attr, node.attr);
  }
}
function addEdge(graph, edge) {
  if (!graph.edges) {
    graph.edges = [];
  }
  graph.edges.push(edge);
  if (graph.edge) {
    var attr = merge$1({}, graph.edge);
    edge.attr = merge$1(attr, edge.attr);
  }
}
function createEdge(graph, from, to, type, attr) {
  var edge = {
    from,
    to,
    type
  };
  if (graph.edge) {
    edge.attr = merge$1({}, graph.edge);
  }
  edge.attr = merge$1(edge.attr || {}, attr);
  if (attr != null) {
    if (attr.hasOwnProperty("arrows") && attr["arrows"] != null) {
      edge["arrows"] = {
        to: {
          enabled: true,
          type: attr.arrows.type
        }
      };
      attr["arrows"] = null;
    }
  }
  return edge;
}
function getToken() {
  tokenType = TOKENTYPE.NULL;
  token = "";
  while (c === " " || c === "	" || c === "\n" || c === "\r") {
    next();
  }
  do {
    var isComment = false;
    if (c === "#") {
      var i = index - 1;
      while (dot.charAt(i) === " " || dot.charAt(i) === "	") {
        i--;
      }
      if (dot.charAt(i) === "\n" || dot.charAt(i) === "") {
        while (c != "" && c != "\n") {
          next();
        }
        isComment = true;
      }
    }
    if (c === "/" && nextPreview() === "/") {
      while (c != "" && c != "\n") {
        next();
      }
      isComment = true;
    }
    if (c === "/" && nextPreview() === "*") {
      while (c != "") {
        if (c === "*" && nextPreview() === "/") {
          next();
          next();
          break;
        } else {
          next();
        }
      }
      isComment = true;
    }
    while (c === " " || c === "	" || c === "\n" || c === "\r") {
      next();
    }
  } while (isComment);
  if (c === "") {
    tokenType = TOKENTYPE.DELIMITER;
    return;
  }
  var c2 = c + nextPreview();
  if (DELIMITERS[c2]) {
    tokenType = TOKENTYPE.DELIMITER;
    token = c2;
    next();
    next();
    return;
  }
  if (DELIMITERS[c]) {
    tokenType = TOKENTYPE.DELIMITER;
    token = c;
    next();
    return;
  }
  if (isAlphaNumeric(c) || c === "-") {
    token += c;
    next();
    while (isAlphaNumeric(c)) {
      token += c;
      next();
    }
    if (token === "false") {
      token = false;
    } else if (token === "true") {
      token = true;
    } else if (!isNaN(Number(token))) {
      token = Number(token);
    }
    tokenType = TOKENTYPE.IDENTIFIER;
    return;
  }
  if (c === '"') {
    next();
    while (c != "" && (c != '"' || c === '"' && nextPreview() === '"')) {
      if (c === '"') {
        token += c;
        next();
      } else if (c === "\\" && nextPreview() === "n") {
        token += "\n";
        next();
      } else {
        token += c;
      }
      next();
    }
    if (c != '"') {
      throw newSyntaxError('End of string " expected');
    }
    next();
    tokenType = TOKENTYPE.IDENTIFIER;
    return;
  }
  tokenType = TOKENTYPE.UNKNOWN;
  while (c != "") {
    token += c;
    next();
  }
  throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
}
function parseGraph() {
  var graph = {};
  first();
  getToken();
  if (token === "strict") {
    graph.strict = true;
    getToken();
  }
  if (token === "graph" || token === "digraph") {
    graph.type = token;
    getToken();
  }
  if (tokenType === TOKENTYPE.IDENTIFIER) {
    graph.id = token;
    getToken();
  }
  if (token != "{") {
    throw newSyntaxError("Angle bracket { expected");
  }
  getToken();
  parseStatements(graph);
  if (token != "}") {
    throw newSyntaxError("Angle bracket } expected");
  }
  getToken();
  if (token !== "") {
    throw newSyntaxError("End of file expected");
  }
  getToken();
  delete graph.node;
  delete graph.edge;
  delete graph.graph;
  return graph;
}
function parseStatements(graph) {
  while (token !== "" && token != "}") {
    parseStatement(graph);
    if (token === ";") {
      getToken();
    }
  }
}
function parseStatement(graph) {
  var subgraph = parseSubgraph(graph);
  if (subgraph) {
    parseEdge(graph, subgraph);
    return;
  }
  var attr = parseAttributeStatement(graph);
  if (attr) {
    return;
  }
  if (tokenType != TOKENTYPE.IDENTIFIER) {
    throw newSyntaxError("Identifier expected");
  }
  var id2 = token;
  getToken();
  if (token === "=") {
    getToken();
    if (tokenType != TOKENTYPE.IDENTIFIER) {
      throw newSyntaxError("Identifier expected");
    }
    graph[id2] = token;
    getToken();
  } else {
    parseNodeStatement(graph, id2);
  }
}
function parseSubgraph(graph) {
  var subgraph = null;
  if (token === "subgraph") {
    subgraph = {};
    subgraph.type = "subgraph";
    getToken();
    if (tokenType === TOKENTYPE.IDENTIFIER) {
      subgraph.id = token;
      getToken();
    }
  }
  if (token === "{") {
    getToken();
    if (!subgraph) {
      subgraph = {};
    }
    subgraph.parent = graph;
    subgraph.node = graph.node;
    subgraph.edge = graph.edge;
    subgraph.graph = graph.graph;
    parseStatements(subgraph);
    if (token != "}") {
      throw newSyntaxError("Angle bracket } expected");
    }
    getToken();
    delete subgraph.node;
    delete subgraph.edge;
    delete subgraph.graph;
    delete subgraph.parent;
    if (!graph.subgraphs) {
      graph.subgraphs = [];
    }
    graph.subgraphs.push(subgraph);
  }
  return subgraph;
}
function parseAttributeStatement(graph) {
  if (token === "node") {
    getToken();
    graph.node = parseAttributeList();
    return "node";
  } else if (token === "edge") {
    getToken();
    graph.edge = parseAttributeList();
    return "edge";
  } else if (token === "graph") {
    getToken();
    graph.graph = parseAttributeList();
    return "graph";
  }
  return null;
}
function parseNodeStatement(graph, id2) {
  var node = {
    id: id2
  };
  var attr = parseAttributeList();
  if (attr) {
    node.attr = attr;
  }
  addNode(graph, node);
  parseEdge(graph, id2);
}
function parseEdge(graph, from) {
  while (token === "->" || token === "--") {
    var to;
    var type = token;
    getToken();
    var subgraph = parseSubgraph(graph);
    if (subgraph) {
      to = subgraph;
    } else {
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Identifier or subgraph expected");
      }
      to = token;
      addNode(graph, {
        id: to
      });
      getToken();
    }
    var attr = parseAttributeList();
    var edge = createEdge(graph, from, to, type, attr);
    addEdge(graph, edge);
    from = to;
  }
}
function parseAttributeList() {
  var i;
  var attr = null;
  var edgeStyles = {
    dashed: true,
    solid: false,
    dotted: [1, 5]
  };
  var arrowTypes = {
    dot: "circle",
    box: "box",
    crow: "crow",
    curve: "curve",
    icurve: "inv_curve",
    normal: "triangle",
    inv: "inv_triangle",
    diamond: "diamond",
    tee: "bar",
    vee: "vee"
  };
  var attr_list = new Array();
  var attr_names = new Array();
  while (token === "[") {
    getToken();
    attr = {};
    while (token !== "" && token != "]") {
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Attribute name expected");
      }
      var name = token;
      getToken();
      if (token != "=") {
        throw newSyntaxError("Equal sign = expected");
      }
      getToken();
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Attribute value expected");
      }
      var value = token;
      if (name === "style") {
        value = edgeStyles[value];
      }
      var arrowType;
      if (name === "arrowhead") {
        arrowType = arrowTypes[value];
        name = "arrows";
        value = {
          to: {
            enabled: true,
            type: arrowType
          }
        };
      }
      if (name === "arrowtail") {
        arrowType = arrowTypes[value];
        name = "arrows";
        value = {
          from: {
            enabled: true,
            type: arrowType
          }
        };
      }
      attr_list.push({
        attr,
        name,
        value
      });
      attr_names.push(name);
      getToken();
      if (token == ",") {
        getToken();
      }
    }
    if (token != "]") {
      throw newSyntaxError("Bracket ] expected");
    }
    getToken();
  }
  if (_includesInstanceProperty(attr_names).call(attr_names, "dir")) {
    var idx = {};
    idx.arrows = {};
    for (i = 0; i < attr_list.length; i++) {
      if (attr_list[i].name === "arrows") {
        if (attr_list[i].value.to != null) {
          idx.arrows.to = i;
        } else if (attr_list[i].value.from != null) {
          idx.arrows.from = i;
        } else {
          throw newSyntaxError("Invalid value of arrows");
        }
      } else if (attr_list[i].name === "dir") {
        idx.dir = i;
      }
    }
    var dir_type = attr_list[idx.dir].value;
    if (!_includesInstanceProperty(attr_names).call(attr_names, "arrows")) {
      if (dir_type === "both") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            to: {
              enabled: true
            }
          }
        });
        idx.arrows.to = attr_list.length - 1;
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            from: {
              enabled: true
            }
          }
        });
        idx.arrows.from = attr_list.length - 1;
      } else if (dir_type === "forward") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            to: {
              enabled: true
            }
          }
        });
        idx.arrows.to = attr_list.length - 1;
      } else if (dir_type === "back") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            from: {
              enabled: true
            }
          }
        });
        idx.arrows.from = attr_list.length - 1;
      } else if (dir_type === "none") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: ""
        });
        idx.arrows.to = attr_list.length - 1;
      } else {
        throw newSyntaxError('Invalid dir type "' + dir_type + '"');
      }
    }
    var from_type;
    var to_type;
    if (dir_type === "both") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
        _spliceInstanceProperty(attr_list).call(attr_list, idx.arrows.from, 1);
      } else if (idx.arrows.to) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "arrow";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "arrow";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
    } else if (dir_type === "back") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = "";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.to) {
        to_type = "";
        from_type = "arrow";
        idx.arrows.from = idx.arrows.to;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
      attr_list[idx.arrows.from] = {
        attr: attr_list[idx.arrows.from].attr,
        name: attr_list[idx.arrows.from].name,
        value: {
          from: {
            enabled: true,
            type: attr_list[idx.arrows.from].value.from.type
          }
        }
      };
    } else if (dir_type === "none") {
      var idx_arrow;
      if (idx.arrows.to) {
        idx_arrow = idx.arrows.to;
      } else {
        idx_arrow = idx.arrows.from;
      }
      attr_list[idx_arrow] = {
        attr: attr_list[idx_arrow].attr,
        name: attr_list[idx_arrow].name,
        value: ""
      };
    } else if (dir_type === "forward") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.to) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "arrow";
        from_type = "";
        idx.arrows.to = idx.arrows.from;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
      attr_list[idx.arrows.to] = {
        attr: attr_list[idx.arrows.to].attr,
        name: attr_list[idx.arrows.to].name,
        value: {
          to: {
            enabled: true,
            type: attr_list[idx.arrows.to].value.to.type
          }
        }
      };
    } else {
      throw newSyntaxError('Invalid dir type "' + dir_type + '"');
    }
    _spliceInstanceProperty(attr_list).call(attr_list, idx.dir, 1);
  }
  var nof_attr_list;
  if (_includesInstanceProperty(attr_names).call(attr_names, "penwidth")) {
    var tmp_attr_list = [];
    nof_attr_list = attr_list.length;
    for (i = 0; i < nof_attr_list; i++) {
      if (attr_list[i].name !== "width") {
        if (attr_list[i].name === "penwidth") {
          attr_list[i].name = "width";
        }
        tmp_attr_list.push(attr_list[i]);
      }
    }
    attr_list = tmp_attr_list;
  }
  nof_attr_list = attr_list.length;
  for (i = 0; i < nof_attr_list; i++) {
    setValue(attr_list[i].attr, attr_list[i].name, attr_list[i].value);
  }
  return attr;
}
function newSyntaxError(message) {
  return new SyntaxError(message + ', got "' + chop(token, 30) + '" (char ' + index + ")");
}
function chop(text, maxLength) {
  return text.length <= maxLength ? text : text.substr(0, 27) + "...";
}
function forEach2(array1, array2, fn) {
  if (_Array$isArray(array1)) {
    _forEachInstanceProperty(array1).call(array1, function(elem1) {
      if (_Array$isArray(array2)) {
        _forEachInstanceProperty(array2).call(array2, function(elem2) {
          fn(elem1, elem2);
        });
      } else {
        fn(elem1, array2);
      }
    });
  } else {
    if (_Array$isArray(array2)) {
      _forEachInstanceProperty(array2).call(array2, function(elem2) {
        fn(array1, elem2);
      });
    } else {
      fn(array1, array2);
    }
  }
}
function setProp(object2, path2, value) {
  var names = path2.split(".");
  var prop = names.pop();
  var obj = object2;
  for (var i = 0; i < names.length; i++) {
    var name = names[i];
    if (!(name in obj)) {
      obj[name] = {};
    }
    obj = obj[name];
  }
  obj[prop] = value;
  return object2;
}
function convertAttr(attr, mapping) {
  var converted = {};
  for (var prop in attr) {
    if (attr.hasOwnProperty(prop)) {
      var visProp = mapping[prop];
      if (_Array$isArray(visProp)) {
        _forEachInstanceProperty(visProp).call(visProp, function(visPropI) {
          setProp(converted, visPropI, attr[prop]);
        });
      } else if (typeof visProp === "string") {
        setProp(converted, visProp, attr[prop]);
      } else {
        setProp(converted, prop, attr[prop]);
      }
    }
  }
  return converted;
}
function DOTToGraph(data2) {
  var dotData = parseDOT(data2);
  var graphData = {
    nodes: [],
    edges: [],
    options: {}
  };
  if (dotData.nodes) {
    var _context2;
    _forEachInstanceProperty(_context2 = dotData.nodes).call(_context2, function(dotNode) {
      var graphNode = {
        id: dotNode.id,
        label: String(dotNode.label || dotNode.id)
      };
      merge$1(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
      if (graphNode.image) {
        graphNode.shape = "image";
      }
      graphData.nodes.push(graphNode);
    });
  }
  if (dotData.edges) {
    var _context3;
    var convertEdge = function(dotEdge) {
      var graphEdge = {
        from: dotEdge.from,
        to: dotEdge.to
      };
      merge$1(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
      if (graphEdge.arrows == null && dotEdge.type === "->") {
        graphEdge.arrows = "to";
      }
      return graphEdge;
    };
    _forEachInstanceProperty(_context3 = dotData.edges).call(_context3, function(dotEdge) {
      var from, to;
      if (dotEdge.from instanceof Object) {
        from = dotEdge.from.nodes;
      } else {
        from = {
          id: dotEdge.from
        };
      }
      if (dotEdge.to instanceof Object) {
        to = dotEdge.to.nodes;
      } else {
        to = {
          id: dotEdge.to
        };
      }
      if (dotEdge.from instanceof Object && dotEdge.from.edges) {
        var _context4;
        _forEachInstanceProperty(_context4 = dotEdge.from.edges).call(_context4, function(subEdge) {
          var graphEdge = convertEdge(subEdge);
          graphData.edges.push(graphEdge);
        });
      }
      forEach2(from, to, function(from2, to2) {
        var subEdge = createEdge(graphData, from2.id, to2.id, dotEdge.type, dotEdge.attr);
        var graphEdge = convertEdge(subEdge);
        graphData.edges.push(graphEdge);
      });
      if (dotEdge.to instanceof Object && dotEdge.to.edges) {
        var _context5;
        _forEachInstanceProperty(_context5 = dotEdge.to.edges).call(_context5, function(subEdge) {
          var graphEdge = convertEdge(subEdge);
          graphData.edges.push(graphEdge);
        });
      }
    });
  }
  if (dotData.attr) {
    graphData.options = dotData.attr;
  }
  return graphData;
}
var dotparser = Object.freeze({
  __proto__: null,
  DOTToGraph,
  parseDOT
});
function parseGephi(gephiJSON, optionsObj) {
  var _context;
  const options2 = {
    edges: {
      inheritColor: false
    },
    nodes: {
      fixed: false,
      parseColor: false
    }
  };
  if (optionsObj != null) {
    if (optionsObj.fixed != null) {
      options2.nodes.fixed = optionsObj.fixed;
    }
    if (optionsObj.parseColor != null) {
      options2.nodes.parseColor = optionsObj.parseColor;
    }
    if (optionsObj.inheritColor != null) {
      options2.edges.inheritColor = optionsObj.inheritColor;
    }
  }
  const gEdges = gephiJSON.edges;
  const vEdges = _mapInstanceProperty(gEdges).call(gEdges, (gEdge) => {
    const vEdge = {
      from: gEdge.source,
      id: gEdge.id,
      to: gEdge.target
    };
    if (gEdge.attributes != null) {
      vEdge.attributes = gEdge.attributes;
    }
    if (gEdge.label != null) {
      vEdge.label = gEdge.label;
    }
    if (gEdge.attributes != null && gEdge.attributes.title != null) {
      vEdge.title = gEdge.attributes.title;
    }
    if (gEdge.type === "Directed") {
      vEdge.arrows = "to";
    }
    if (gEdge.color && options2.edges.inheritColor === false) {
      vEdge.color = gEdge.color;
    }
    return vEdge;
  });
  const vNodes = _mapInstanceProperty(_context = gephiJSON.nodes).call(_context, (gNode) => {
    const vNode = {
      id: gNode.id,
      fixed: options2.nodes.fixed && gNode.x != null && gNode.y != null
    };
    if (gNode.attributes != null) {
      vNode.attributes = gNode.attributes;
    }
    if (gNode.label != null) {
      vNode.label = gNode.label;
    }
    if (gNode.size != null) {
      vNode.size = gNode.size;
    }
    if (gNode.attributes != null && gNode.attributes.title != null) {
      vNode.title = gNode.attributes.title;
    }
    if (gNode.title != null) {
      vNode.title = gNode.title;
    }
    if (gNode.x != null) {
      vNode.x = gNode.x;
    }
    if (gNode.y != null) {
      vNode.y = gNode.y;
    }
    if (gNode.color != null) {
      if (options2.nodes.parseColor === true) {
        vNode.color = gNode.color;
      } else {
        vNode.color = {
          background: gNode.color,
          border: gNode.color,
          highlight: {
            background: gNode.color,
            border: gNode.color
          },
          hover: {
            background: gNode.color,
            border: gNode.color
          }
        };
      }
    }
    return vNode;
  });
  return {
    nodes: vNodes,
    edges: vEdges
  };
}
var gephiParser = Object.freeze({
  __proto__: null,
  parseGephi
});
var en = {
  addDescription: "Click in an empty space to place a new node.",
  addEdge: "Add Edge",
  addNode: "Add Node",
  back: "Back",
  close: "Close",
  createEdgeError: "Cannot link edges to a cluster.",
  del: "Delete selected",
  deleteClusterError: "Clusters cannot be deleted.",
  edgeDescription: "Click on a node and drag the edge to another node to connect them.",
  edit: "Edit",
  editClusterError: "Clusters cannot be edited.",
  editEdge: "Edit Edge",
  editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
  editNode: "Edit Node"
};
var de = {
  addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
  addEdge: "Kante hinzufÃ¼gen",
  addNode: "Knoten hinzufÃ¼gen",
  back: "ZurÃ¼ck",
  close: "SchlieÃen",
  createEdgeError: "Es ist nicht mÃ¶glich, Kanten mit Clustern zu verbinden.",
  del: "LÃ¶sche Auswahl",
  deleteClusterError: "Cluster kÃ¶nnen nicht gelÃ¶scht werden.",
  edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
  edit: "Editieren",
  editClusterError: "Cluster kÃ¶nnen nicht editiert werden.",
  editEdge: "Kante editieren",
  editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
  editNode: "Knoten editieren"
};
var es = {
  addDescription: "Haga clic en un lugar vacÃ­o para colocar un nuevo nodo.",
  addEdge: "AÃ±adir arista",
  addNode: "AÃ±adir nodo",
  back: "AtrÃ¡s",
  close: "Cerrar",
  createEdgeError: "No se puede conectar una arista a un grupo.",
  del: "Eliminar selecciÃ³n",
  deleteClusterError: "No es posible eliminar grupos.",
  edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
  edit: "Editar",
  editClusterError: "No es posible editar grupos.",
  editEdge: "Editar arista",
  editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
  editNode: "Editar nodo"
};
var it = {
  addDescription: "Clicca per aggiungere un nuovo nodo",
  addEdge: "Aggiungi un vertice",
  addNode: "Aggiungi un nodo",
  back: "Indietro",
  close: "Chiudere",
  createEdgeError: "Non si possono collegare vertici ad un cluster",
  del: "Cancella la selezione",
  deleteClusterError: "I cluster non possono essere cancellati",
  edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
  edit: "Modifica",
  editClusterError: "I clusters non possono essere modificati.",
  editEdge: "Modifica il vertice",
  editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
  editNode: "Modifica il nodo"
};
var nl = {
  addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
  addEdge: "Link toevoegen",
  addNode: "Node toevoegen",
  back: "Terug",
  close: "Sluiten",
  createEdgeError: "Kan geen link maken naar een cluster.",
  del: "Selectie verwijderen",
  deleteClusterError: "Clusters kunnen niet worden verwijderd.",
  edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
  edit: "Wijzigen",
  editClusterError: "Clusters kunnen niet worden aangepast.",
  editEdge: "Link wijzigen",
  editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
  editNode: "Node wijzigen"
};
var pt = {
  addDescription: "Clique em um espaÃ§o em branco para adicionar um novo nÃ³",
  addEdge: "Adicionar aresta",
  addNode: "Adicionar nÃ³",
  back: "Voltar",
  close: "Fechar",
  createEdgeError: "NÃ£o foi possÃ­vel linkar arestas a um cluster.",
  del: "Remover selecionado",
  deleteClusterError: "Clusters nÃ£o puderam ser removidos.",
  edgeDescription: "Clique em um nÃ³ e arraste a aresta atÃ© outro nÃ³ para conectÃ¡-los",
  edit: "Editar",
  editClusterError: "Clusters nÃ£o puderam ser editados.",
  editEdge: "Editar aresta",
  editEdgeDescription: "Clique nos pontos de controle e os arraste para um nÃ³ para conectÃ¡-los",
  editNode: "Editar nÃ³"
};
var ru = {
  addDescription: "ÐÐ»Ð¸ÐºÐ½Ð¸ÑÐµ Ð² ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð¾Ðµ Ð¼ÐµÑÑÐ¾, ÑÑÐ¾Ð±Ñ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹ ÑÐ·ÐµÐ».",
  addEdge: "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐµÐ±ÑÐ¾",
  addNode: "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ·ÐµÐ»",
  back: "ÐÐ°Ð·Ð°Ð´",
  close: "ÐÐ°ÐºÑÑÐ²Ð°ÑÑ",
  createEdgeError: "ÐÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐ¾ÐµÐ´Ð¸Ð½Ð¸ÑÑ ÑÐµÐ±ÑÐ° Ð² ÐºÐ»Ð°ÑÑÐµÑ.",
  del: "Ð£Ð´Ð°Ð»Ð¸ÑÑ Ð²ÑÐ±ÑÐ°Ð½Ð½Ð¾Ðµ",
  deleteClusterError: "ÐÐ»Ð°ÑÑÐµÑÑ Ð½Ðµ Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ ÑÐ´Ð°Ð»ÐµÐ½Ñ",
  edgeDescription: "ÐÐ»Ð¸ÐºÐ½Ð¸ÑÐµ Ð½Ð° ÑÐ·ÐµÐ» Ð¸ Ð¿ÑÐ¾ÑÑÐ½Ð¸ÑÐµ ÑÐµÐ±ÑÐ¾ Ðº Ð´ÑÑÐ³Ð¾Ð¼Ñ ÑÐ·Ð»Ñ, ÑÑÐ¾Ð±Ñ ÑÐ¾ÐµÐ´Ð¸Ð½Ð¸ÑÑ Ð¸Ñ.",
  edit: "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ",
  editClusterError: "ÐÐ»Ð°ÑÑÐµÑÑ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿Ð½Ñ Ð´Ð»Ñ ÑÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ.",
  editEdge: "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐµÐ±ÑÐ¾",
  editEdgeDescription: "ÐÐ»Ð¸ÐºÐ½Ð¸ÑÐµ Ð½Ð° ÐºÐ¾Ð½ÑÑÐ¾Ð»ÑÐ½ÑÐµ ÑÐ¾ÑÐºÐ¸ Ð¸ Ð¿ÐµÑÐµÑÐ°ÑÐ¸ÑÐµ Ð¸Ñ Ð² ÑÐ·ÐµÐ», ÑÑÐ¾Ð±Ñ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ¸ÑÑÑÑ Ðº Ð½ÐµÐ¼Ñ.",
  editNode: "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ·ÐµÐ»"
};
var cn = {
  addDescription: "åå»ç©ºç½å¤æ¾ç½®æ°èç¹ã",
  addEdge: "æ·»å è¿æ¥çº¿",
  addNode: "æ·»å èç¹",
  back: "è¿å",
  close: "éé",
  createEdgeError: "æ æ³å°è¿æ¥çº¿è¿æ¥å°ç¾¤éã",
  del: "å é¤éå®",
  deleteClusterError: "æ æ³å é¤ç¾¤éã",
  edgeDescription: "åå»æä¸ªèç¹å¹¶å°è¯¥è¿æ¥çº¿æå¨å°å¦ä¸ä¸ªèç¹ä»¥è¿æ¥å®ä»¬ã",
  edit: "ç¼è¾",
  editClusterError: "æ æ³ç¼è¾ç¾¤éã",
  editEdge: "ç¼è¾è¿æ¥çº¿",
  editEdgeDescription: "åå»æ§å¶èç¹å¹¶å°å®ä»¬æå°èç¹ä¸è¿æ¥ã",
  editNode: "ç¼è¾èç¹"
};
var uk = {
  addDescription: "KÐ»ÑÐºÐ½ÑÑÑ Ð½Ð° Ð²ÑÐ»ÑÐ½Ðµ Ð¼ÑÑÑÐµ, ÑÐ¾Ð± Ð´Ð¾Ð´Ð°ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ Ð²ÑÐ·Ð¾Ð».",
  addEdge: "ÐÐ¾Ð´Ð°ÑÐ¸ ÐºÑÐ°Ð¹",
  addNode: "ÐÐ¾Ð´Ð°ÑÐ¸ Ð²ÑÐ·Ð¾Ð»",
  back: "ÐÐ°Ð·Ð°Ð´",
  close: "ÐÐ°ÐºÑÐ¸ÑÐ¸",
  createEdgeError: "ÐÐµ Ð¼Ð¾Ð¶Ð»Ð¸Ð²Ð¾ Ð¾Ð±'ÑÐ´Ð½Ð°ÑÐ¸ ÐºÑÐ°Ñ Ð² Ð³ÑÑÐ¿Ñ.",
  del: "ÐÐ¸Ð´Ð°Ð»Ð¸ÑÐ¸ Ð¾Ð±ÑÐ°Ð½Ðµ",
  deleteClusterError: "ÐÑÑÐ¿Ð¸ Ð½Ðµ Ð¼Ð¾Ð¶ÑÑÑ Ð±ÑÑÐ¸ Ð²Ð¸Ð´Ð°Ð»ÐµÐ½Ñ.",
  edgeDescription: "ÐÐ»ÑÐºÐ½ÑÑÑ Ð½Ð° Ð²ÑÐ·Ð¾Ð» Ñ Ð¿ÐµÑÐµÑÑÐ³Ð½ÑÑÑ ÐºÑÐ°Ð¹ Ð´Ð¾ ÑÐ½ÑÐ¾Ð³Ð¾ Ð²ÑÐ·Ð»Ð°, ÑÐ¾Ð± ÑÑ Ð·'ÑÐ´Ð½Ð°ÑÐ¸.",
  edit: "Ð ÐµÐ´Ð°Ð³ÑÐ²Ð°ÑÐ¸",
  editClusterError: "ÐÑÑÐ¿Ð¸ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿Ð½Ñ Ð´Ð»Ñ ÑÐµÐ´Ð°Ð³ÑÐ²Ð°Ð½Ð½Ñ.",
  editEdge: "Ð ÐµÐ´Ð°Ð³ÑÐ²Ð°ÑÐ¸ ÐºÑÐ°Ð¹",
  editEdgeDescription: "ÐÐ»ÑÐºÐ½ÑÑÑ Ð½Ð° ÐºÐ¾Ð½ÑÑÐ¾Ð»ÑÐ½Ñ ÑÐ¾ÑÐºÐ¸ Ñ Ð¿ÐµÑÐµÑÑÐ³Ð½ÑÑÑ ÑÑ Ñ Ð²ÑÐ·Ð¾Ð», ÑÐ¾Ð± Ð¿ÑÐ´ÐºÐ»ÑÑÐ¸ÑÐ¸ÑÑ Ð´Ð¾ Ð½ÑÐ¾Ð³Ð¾.",
  editNode: "Ð ÐµÐ´Ð°Ð³ÑÐ²Ð°ÑÐ¸ Ð²ÑÐ·Ð¾Ð»"
};
var fr = {
  addDescription: "Cliquez dans un endroit vide pour placer un nÅud.",
  addEdge: "Ajouter un lien",
  addNode: "Ajouter un nÅud",
  back: "Retour",
  close: "Fermer",
  createEdgeError: "Impossible de crÃ©er un lien vers un cluster.",
  del: "Effacer la sÃ©lection",
  deleteClusterError: "Les clusters ne peuvent pas Ãªtre effacÃ©s.",
  edgeDescription: "Cliquez sur un nÅud et glissez le lien vers un autre nÅud pour les connecter.",
  edit: "Ãditer",
  editClusterError: "Les clusters ne peuvent pas Ãªtre Ã©ditÃ©s.",
  editEdge: "Ãditer le lien",
  editEdgeDescription: "Cliquez sur les points de contrÃ´le et glissez-les pour connecter un nÅud.",
  editNode: "Ãditer le nÅud"
};
var cs = {
  addDescription: "KluknutÃ­m do prÃ¡zdnÃ©ho prostoru mÅ¯Å¾ete pÅidat novÃ½ vrchol.",
  addEdge: "PÅidat hranu",
  addNode: "PÅidat vrchol",
  back: "ZpÄt",
  close: "ZavÅÃ­t",
  createEdgeError: "Nelze pÅipojit hranu ke shluku.",
  del: "Smazat vÃ½bÄr",
  deleteClusterError: "Nelze mazat shluky.",
  edgeDescription: "PÅetaÅ¾enÃ­m z jednoho vrcholu do druhÃ©ho mÅ¯Å¾ete spojit tyto vrcholy novou hranou.",
  edit: "Upravit",
  editClusterError: "Nelze upravovat shluky.",
  editEdge: "Upravit hranu",
  editEdgeDescription: "PÅetaÅ¾enÃ­m kontrolnÃ­ho vrcholu hrany ji mÅ¯Å¾ete pÅipojit k jinÃ©mu vrcholu.",
  editNode: "Upravit vrchol"
};
var locales = Object.freeze({
  __proto__: null,
  cn,
  cs,
  de,
  en,
  es,
  fr,
  it,
  nl,
  pt,
  ru,
  uk
});
function normalizeLanguageCode(locales2, rawCode) {
  try {
    const [rawLanguage, rawCountry] = rawCode.split(/[-_ /]/, 2);
    const language = rawLanguage != null ? rawLanguage.toLowerCase() : null;
    const country = rawCountry != null ? rawCountry.toUpperCase() : null;
    if (language && country) {
      const code = language + "-" + country;
      if (Object.prototype.hasOwnProperty.call(locales2, code)) {
        return code;
      } else {
        var _context;
        console.warn(_concatInstanceProperty(_context = "Unknown variant ".concat(country, " of language ")).call(_context, language, "."));
      }
    }
    if (language) {
      const code = language;
      if (Object.prototype.hasOwnProperty.call(locales2, code)) {
        return code;
      } else {
        console.warn("Unknown language ".concat(language));
      }
    }
    console.warn("Unknown locale ".concat(rawCode, ", falling back to English."));
    return "en";
  } catch (error) {
    console.error(error);
    console.warn("Unexpected error while normalizing locale ".concat(rawCode, ", falling back to English."));
    return "en";
  }
}
var CachedImage = class {
  /**
   * @ignore
   */
  constructor() {
    this.NUM_ITERATIONS = 4;
    this.image = new Image();
    this.canvas = document.createElement("canvas");
  }
  /**
   * Called when the image has been successfully loaded.
   */
  init() {
    if (this.initialized())
      return;
    this.src = this.image.src;
    const w = this.image.width;
    const h = this.image.height;
    this.width = w;
    this.height = h;
    const h2 = Math.floor(h / 2);
    const h4 = Math.floor(h / 4);
    const h8 = Math.floor(h / 8);
    const h16 = Math.floor(h / 16);
    const w2 = Math.floor(w / 2);
    const w4 = Math.floor(w / 4);
    const w8 = Math.floor(w / 8);
    const w16 = Math.floor(w / 16);
    this.canvas.width = 3 * w4;
    this.canvas.height = h2;
    this.coordinates = [[0, 0, w2, h2], [w2, 0, w4, h4], [w2, h4, w8, h8], [5 * w8, h4, w16, h16]];
    this._fillMipMap();
  }
  /**
   * @returns {boolean} true if init() has been called, false otherwise.
   */
  initialized() {
    return this.coordinates !== void 0;
  }
  /**
   * Redraw main image in various sizes to the context.
   *
   * The rationale behind this is to reduce artefacts due to interpolation
   * at differing zoom levels.
   *
   * Source: http://stackoverflow.com/q/18761404/1223531
   *
   * This methods takes the resizing out of the drawing loop, in order to
   * reduce performance overhead.
   *
   * TODO: The code assumes that a 2D context can always be gotten. This is
   * not necessarily true! OTOH, if not true then usage of this class
   * is senseless.
   * @private
   */
  _fillMipMap() {
    const ctx = this.canvas.getContext("2d");
    const to = this.coordinates[0];
    ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);
    for (let iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {
      const from = this.coordinates[iterations - 1];
      const to2 = this.coordinates[iterations];
      ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], to2[0], to2[1], to2[2], to2[3]);
    }
  }
  /**
   * Draw the image, using the mipmap if necessary.
   *
   * MipMap is only used if param factor > 2; otherwise, original bitmap
   * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1
   *
   * Credits to 'Alex de Mulder' for original implementation.
   * @param {CanvasRenderingContext2D} ctx  context on which to draw zoomed image
   * @param {Float} factor scale factor at which to draw
   * @param {number} left
   * @param {number} top
   * @param {number} width
   * @param {number} height
   */
  drawImageAtPosition(ctx, factor, left, top, width, height) {
    if (!this.initialized())
      return;
    if (factor > 2) {
      factor *= 0.5;
      let iterations = 0;
      while (factor > 2 && iterations < this.NUM_ITERATIONS) {
        factor *= 0.5;
        iterations += 1;
      }
      if (iterations >= this.NUM_ITERATIONS) {
        iterations = this.NUM_ITERATIONS - 1;
      }
      const from = this.coordinates[iterations];
      ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], left, top, width, height);
    } else {
      ctx.drawImage(this.image, left, top, width, height);
    }
  }
};
var Images = class {
  /**
   * @param {ImageCallback} callback
   */
  constructor(callback) {
    this.images = {};
    this.imageBroken = {};
    this.callback = callback;
  }
  /**
   * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image
   * @param {string} brokenUrl                Url the broken image to try and load
   * @param {Image} imageToLoadBrokenUrlOn   The image object
   */
  _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
    if (url === void 0 || imageToLoadBrokenUrlOn === void 0)
      return;
    if (brokenUrl === void 0) {
      console.warn("No broken url image defined");
      return;
    }
    imageToLoadBrokenUrlOn.image.onerror = () => {
      console.error("Could not load brokenImage:", brokenUrl);
    };
    imageToLoadBrokenUrlOn.image.src = brokenUrl;
  }
  /**
   *
   * @param {vis.Image} imageToRedrawWith
   * @private
   */
  _redrawWithImage(imageToRedrawWith) {
    if (this.callback) {
      this.callback(imageToRedrawWith);
    }
  }
  /**
   * @param {string} url          Url of the image
   * @param {string} brokenUrl    Url of an image to use if the url image is not found
   * @returns {Image} img          The image object
   */
  load(url, brokenUrl) {
    const cachedImage = this.images[url];
    if (cachedImage)
      return cachedImage;
    const img = new CachedImage();
    this.images[url] = img;
    img.image.onload = () => {
      this._fixImageCoordinates(img.image);
      img.init();
      this._redrawWithImage(img);
    };
    img.image.onerror = () => {
      console.error("Could not load image:", url);
      this._tryloadBrokenUrl(url, brokenUrl, img);
    };
    img.image.src = url;
    return img;
  }
  /**
   * IE11 fix -- thanks dponch!
   *
   * Local helper function
   * @param {vis.Image} imageToCache
   * @private
   */
  _fixImageCoordinates(imageToCache) {
    if (imageToCache.width === 0) {
      document.body.appendChild(imageToCache);
      imageToCache.width = imageToCache.offsetWidth;
      imageToCache.height = imageToCache.offsetHeight;
      document.body.removeChild(imageToCache);
    }
  }
};
var internalMetadata = { exports: {} };
var fails$8 = fails$v;
var arrayBufferNonExtensible = fails$8(function() {
  if (typeof ArrayBuffer == "function") {
    var buffer = new ArrayBuffer(8);
    if (Object.isExtensible(buffer))
      Object.defineProperty(buffer, "a", { value: 8 });
  }
});
var fails$7 = fails$v;
var isObject$4 = isObject$h;
var classof$3 = classofRaw$2;
var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES$1 = fails$7(function() {
  $isExtensible(1);
});
var objectIsExtensible = FAILS_ON_PRIMITIVES$1 || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it2) {
  if (!isObject$4(it2))
    return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$3(it2) === "ArrayBuffer")
    return false;
  return $isExtensible ? $isExtensible(it2) : true;
} : $isExtensible;
var fails$6 = fails$v;
var freezing = !fails$6(function() {
  return Object.isExtensible(Object.preventExtensions({}));
});
var $$i = _export;
var uncurryThis$7 = functionUncurryThis;
var hiddenKeys = hiddenKeys$6;
var isObject$3 = isObject$h;
var hasOwn$2 = hasOwnProperty_1;
var defineProperty$a = objectDefineProperty.f;
var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
var isExtensible$1 = objectIsExtensible;
var uid = uid$4;
var FREEZING$1 = freezing;
var REQUIRED = false;
var METADATA$1 = uid("meta");
var id$1 = 0;
var setMetadata = function(it2) {
  defineProperty$a(it2, METADATA$1, { value: {
    objectID: "O" + id$1++,
    // object ID
    weakData: {}
    // weak collections IDs
  } });
};
var fastKey$1 = function(it2, create5) {
  if (!isObject$3(it2))
    return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
  if (!hasOwn$2(it2, METADATA$1)) {
    if (!isExtensible$1(it2))
      return "F";
    if (!create5)
      return "E";
    setMetadata(it2);
  }
  return it2[METADATA$1].objectID;
};
var getWeakData$1 = function(it2, create5) {
  if (!hasOwn$2(it2, METADATA$1)) {
    if (!isExtensible$1(it2))
      return true;
    if (!create5)
      return false;
    setMetadata(it2);
  }
  return it2[METADATA$1].weakData;
};
var onFreeze = function(it2) {
  if (FREEZING$1 && REQUIRED && isExtensible$1(it2) && !hasOwn$2(it2, METADATA$1))
    setMetadata(it2);
  return it2;
};
var enable = function() {
  meta.enable = function() {
  };
  REQUIRED = true;
  var getOwnPropertyNames6 = getOwnPropertyNamesModule.f;
  var splice3 = uncurryThis$7([].splice);
  var test2 = {};
  test2[METADATA$1] = 1;
  if (getOwnPropertyNames6(test2).length) {
    getOwnPropertyNamesModule.f = function(it2) {
      var result = getOwnPropertyNames6(it2);
      for (var i = 0, length2 = result.length; i < length2; i++) {
        if (result[i] === METADATA$1) {
          splice3(result, i, 1);
          break;
        }
      }
      return result;
    };
    $$i({ target: "Object", stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};
var meta = internalMetadata.exports = {
  enable,
  fastKey: fastKey$1,
  getWeakData: getWeakData$1,
  onFreeze
};
hiddenKeys[METADATA$1] = true;
var internalMetadataExports = internalMetadata.exports;
var wellKnownSymbol$4 = wellKnownSymbol$l;
var Iterators$1 = iterators;
var ITERATOR$2 = wellKnownSymbol$4("iterator");
var ArrayPrototype$5 = Array.prototype;
var isArrayIteratorMethod$1 = function(it2) {
  return it2 !== void 0 && (Iterators$1.Array === it2 || ArrayPrototype$5[ITERATOR$2] === it2);
};
var classof$2 = classof$c;
var getMethod$1 = getMethod$3;
var isNullOrUndefined$3 = isNullOrUndefined$6;
var Iterators = iterators;
var wellKnownSymbol$3 = wellKnownSymbol$l;
var ITERATOR$1 = wellKnownSymbol$3("iterator");
var getIteratorMethod$2 = function(it2) {
  if (!isNullOrUndefined$3(it2))
    return getMethod$1(it2, ITERATOR$1) || getMethod$1(it2, "@@iterator") || Iterators[classof$2(it2)];
};
var call$2 = functionCall;
var aCallable$2 = aCallable$6;
var anObject$3 = anObject$9;
var tryToString$1 = tryToString$5;
var getIteratorMethod$1 = getIteratorMethod$2;
var $TypeError$3 = TypeError;
var getIterator$1 = function(argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$1(argument) : usingIterator;
  if (aCallable$2(iteratorMethod))
    return anObject$3(call$2(iteratorMethod, argument));
  throw new $TypeError$3(tryToString$1(argument) + " is not iterable");
};
var call$1 = functionCall;
var anObject$2 = anObject$9;
var getMethod = getMethod$3;
var iteratorClose$1 = function(iterator2, kind, value) {
  var innerResult, innerError;
  anObject$2(iterator2);
  try {
    innerResult = getMethod(iterator2, "return");
    if (!innerResult) {
      if (kind === "throw")
        throw value;
      return value;
    }
    innerResult = call$1(innerResult, iterator2);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === "throw")
    throw value;
  if (innerError)
    throw innerResult;
  anObject$2(innerResult);
  return value;
};
var bind$1 = functionBindContext;
var call = functionCall;
var anObject$1 = anObject$9;
var tryToString = tryToString$5;
var isArrayIteratorMethod = isArrayIteratorMethod$1;
var lengthOfArrayLike$2 = lengthOfArrayLike$a;
var isPrototypeOf$6 = objectIsPrototypeOf;
var getIterator = getIterator$1;
var getIteratorMethod = getIteratorMethod$2;
var iteratorClose = iteratorClose$1;
var $TypeError$2 = TypeError;
var Result = function(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype = Result.prototype;
var iterate$3 = function(iterable, unboundFunction, options2) {
  var that = options2 && options2.that;
  var AS_ENTRIES = !!(options2 && options2.AS_ENTRIES);
  var IS_RECORD = !!(options2 && options2.IS_RECORD);
  var IS_ITERATOR = !!(options2 && options2.IS_ITERATOR);
  var INTERRUPTED = !!(options2 && options2.INTERRUPTED);
  var fn = bind$1(unboundFunction, that);
  var iterator2, iterFn, index2, length2, result, next3, step;
  var stop = function(condition) {
    if (iterator2)
      iteratorClose(iterator2, "normal", condition);
    return new Result(true, condition);
  };
  var callFn = function(value) {
    if (AS_ENTRIES) {
      anObject$1(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }
    return INTERRUPTED ? fn(value, stop) : fn(value);
  };
  if (IS_RECORD) {
    iterator2 = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator2 = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn)
      throw new $TypeError$2(tryToString(iterable) + " is not iterable");
    if (isArrayIteratorMethod(iterFn)) {
      for (index2 = 0, length2 = lengthOfArrayLike$2(iterable); length2 > index2; index2++) {
        result = callFn(iterable[index2]);
        if (result && isPrototypeOf$6(ResultPrototype, result))
          return result;
      }
      return new Result(false);
    }
    iterator2 = getIterator(iterable, iterFn);
  }
  next3 = IS_RECORD ? iterable.next : iterator2.next;
  while (!(step = call(next3, iterator2)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator2, "throw", error);
    }
    if (typeof result == "object" && result && isPrototypeOf$6(ResultPrototype, result))
      return result;
  }
  return new Result(false);
};
var isPrototypeOf$5 = objectIsPrototypeOf;
var $TypeError$1 = TypeError;
var anInstance$3 = function(it2, Prototype) {
  if (isPrototypeOf$5(Prototype, it2))
    return it2;
  throw new $TypeError$1("Incorrect invocation");
};
var $$h = _export;
var global$5 = global$n;
var InternalMetadataModule$1 = internalMetadataExports;
var fails$5 = fails$v;
var createNonEnumerableProperty = createNonEnumerableProperty$6;
var iterate$2 = iterate$3;
var anInstance$2 = anInstance$3;
var isCallable = isCallable$h;
var isObject$2 = isObject$h;
var isNullOrUndefined$2 = isNullOrUndefined$6;
var setToStringTag = setToStringTag$6;
var defineProperty$9 = objectDefineProperty.f;
var forEach3 = arrayIteration.forEach;
var DESCRIPTORS$6 = descriptors;
var InternalStateModule$3 = internalState;
var setInternalState$3 = InternalStateModule$3.set;
var internalStateGetterFor$2 = InternalStateModule$3.getterFor;
var collection$3 = function(CONSTRUCTOR_NAME, wrapper2, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
  var ADDER = IS_MAP ? "set" : "add";
  var NativeConstructor = global$5[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;
  if (!DESCRIPTORS$6 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$5(function() {
    new NativeConstructor().entries().next();
  }))) {
    Constructor = common.getConstructor(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule$1.enable();
  } else {
    Constructor = wrapper2(function(target, iterable) {
      setInternalState$3(anInstance$2(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (!isNullOrUndefined$2(iterable))
        iterate$2(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor$2(CONSTRUCTOR_NAME);
    forEach3(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
      var IS_ADDER = KEY === "add" || KEY === "set";
      if (KEY in NativePrototype && !(IS_WEAK && KEY === "clear")) {
        createNonEnumerableProperty(Prototype, KEY, function(a, b) {
          var collection2 = getInternalState2(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject$2(a))
            return KEY === "get" ? void 0 : false;
          var result = collection2[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      }
    });
    IS_WEAK || defineProperty$9(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState2(this).collection.size;
      }
    });
  }
  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
  exported[CONSTRUCTOR_NAME] = Constructor;
  $$h({ global: true, forced: true }, exported);
  if (!IS_WEAK)
    common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
  return Constructor;
};
var defineBuiltIn = defineBuiltIn$5;
var defineBuiltIns$3 = function(target, src, options2) {
  for (var key in src) {
    if (options2 && options2.unsafe && target[key])
      target[key] = src[key];
    else
      defineBuiltIn(target, key, src[key], options2);
  }
  return target;
};
var getBuiltIn$2 = getBuiltIn$b;
var defineBuiltInAccessor$1 = defineBuiltInAccessor$3;
var wellKnownSymbol$2 = wellKnownSymbol$l;
var DESCRIPTORS$5 = descriptors;
var SPECIES = wellKnownSymbol$2("species");
var setSpecies$1 = function(CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn$2(CONSTRUCTOR_NAME);
  if (DESCRIPTORS$5 && Constructor && !Constructor[SPECIES]) {
    defineBuiltInAccessor$1(Constructor, SPECIES, {
      configurable: true,
      get: function() {
        return this;
      }
    });
  }
};
var create4 = objectCreate;
var defineBuiltInAccessor = defineBuiltInAccessor$3;
var defineBuiltIns$2 = defineBuiltIns$3;
var bind2 = functionBindContext;
var anInstance$1 = anInstance$3;
var isNullOrUndefined$1 = isNullOrUndefined$6;
var iterate$1 = iterate$3;
var defineIterator$1 = iteratorDefine;
var createIterResultObject$1 = createIterResultObject$3;
var setSpecies = setSpecies$1;
var DESCRIPTORS$4 = descriptors;
var fastKey = internalMetadataExports.fastKey;
var InternalStateModule$2 = internalState;
var setInternalState$2 = InternalStateModule$2.set;
var internalStateGetterFor$1 = InternalStateModule$2.getterFor;
var collectionStrong$2 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance$1(that, Prototype);
      setInternalState$2(that, {
        type: CONSTRUCTOR_NAME,
        index: create4(null),
        first: void 0,
        last: void 0,
        size: 0
      });
      if (!DESCRIPTORS$4)
        that.size = 0;
      if (!isNullOrUndefined$1(iterable))
        iterate$1(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor$1(CONSTRUCTOR_NAME);
    var define = function(that, key, value) {
      var state = getInternalState2(that);
      var entry = getEntry(that, key);
      var previous, index2;
      if (entry) {
        entry.value = value;
      } else {
        state.last = entry = {
          index: index2 = fastKey(key, true),
          key,
          value,
          previous: previous = state.last,
          next: void 0,
          removed: false
        };
        if (!state.first)
          state.first = entry;
        if (previous)
          previous.next = entry;
        if (DESCRIPTORS$4)
          state.size++;
        else
          that.size++;
        if (index2 !== "F")
          state.index[index2] = entry;
      }
      return that;
    };
    var getEntry = function(that, key) {
      var state = getInternalState2(that);
      var index2 = fastKey(key);
      var entry;
      if (index2 !== "F")
        return state.index[index2];
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key === key)
          return entry;
      }
    };
    defineBuiltIns$2(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState2(that);
        var data2 = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous)
            entry.previous = entry.previous.next = void 0;
          delete data2[entry.index];
          entry = entry.next;
        }
        state.first = state.last = void 0;
        if (DESCRIPTORS$4)
          state.size = 0;
        else
          that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      "delete": function(key) {
        var that = this;
        var state = getInternalState2(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next3 = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev)
            prev.next = next3;
          if (next3)
            next3.previous = prev;
          if (state.first === entry)
            state.first = next3;
          if (state.last === entry)
            state.last = prev;
          if (DESCRIPTORS$4)
            state.size--;
          else
            that.size--;
        }
        return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach4(callbackfn) {
        var state = getInternalState2(this);
        var boundFunction = bind2(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          while (entry && entry.removed)
            entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has2(key) {
        return !!getEntry(this, key);
      }
    });
    defineBuiltIns$2(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get2(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set2(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS$4)
      defineBuiltInAccessor(Prototype, "size", {
        configurable: true,
        get: function() {
          return getInternalState2(this).size;
        }
      });
    return Constructor;
  },
  setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
    var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME);
    defineIterator$1(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
      setInternalState$2(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind,
        last: void 0
      });
    }, function() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      while (entry && entry.removed)
        entry = entry.previous;
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        state.target = void 0;
        return createIterResultObject$1(void 0, true);
      }
      if (kind === "keys")
        return createIterResultObject$1(entry.key, false);
      if (kind === "values")
        return createIterResultObject$1(entry.value, false);
      return createIterResultObject$1([entry.key, entry.value], false);
    }, IS_MAP ? "entries" : "values", !IS_MAP, true);
    setSpecies(CONSTRUCTOR_NAME);
  }
};
var collection$2 = collection$3;
var collectionStrong$1 = collectionStrong$2;
collection$2("Map", function(init) {
  return function Map() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong$1);
var uncurryThis$6 = functionUncurryThis;
var toIntegerOrInfinity = toIntegerOrInfinity$4;
var toString$3 = toString$a;
var requireObjectCoercible = requireObjectCoercible$5;
var charAt$2 = uncurryThis$6("".charAt);
var charCodeAt = uncurryThis$6("".charCodeAt);
var stringSlice = uncurryThis$6("".slice);
var createMethod$1 = function(CONVERT_TO_STRING) {
  return function($this, pos) {
    var S = toString$3(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first2, second;
    if (position < 0 || position >= size)
      return CONVERT_TO_STRING ? "" : void 0;
    first2 = charCodeAt(S, position);
    return first2 < 55296 || first2 > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt$2(S, position) : first2 : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first2 - 55296 << 10) + (second - 56320) + 65536;
  };
};
var stringMultibyte = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod$1(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod$1(true)
};
var charAt$1 = stringMultibyte.charAt;
var toString$2 = toString$a;
var InternalStateModule$1 = internalState;
var defineIterator = iteratorDefine;
var createIterResultObject = createIterResultObject$3;
var STRING_ITERATOR = "String Iterator";
var setInternalState$1 = InternalStateModule$1.set;
var getInternalState = InternalStateModule$1.getterFor(STRING_ITERATOR);
defineIterator(String, "String", function(iterated) {
  setInternalState$1(this, {
    type: STRING_ITERATOR,
    string: toString$2(iterated),
    index: 0
  });
}, function next2() {
  var state = getInternalState(this);
  var string2 = state.string;
  var index2 = state.index;
  var point;
  if (index2 >= string2.length)
    return createIterResultObject(void 0, true);
  point = charAt$1(string2, index2);
  state.index += point.length;
  return createIterResultObject(point, false);
});
var path$d = path$t;
var map$2 = path$d.Map;
var parent$r = map$2;
var map$1 = parent$r;
var map2 = map$1;
var _Map = getDefaultExportFromCjs(map2);
var Groups = class {
  /**
   * @ignore
   */
  constructor() {
    this.clear();
    this._defaultIndex = 0;
    this._groupIndex = 0;
    this._defaultGroups = [
      {
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      },
      // 0: blue
      {
        border: "#FFA500",
        background: "#FFFF00",
        highlight: {
          border: "#FFA500",
          background: "#FFFFA3"
        },
        hover: {
          border: "#FFA500",
          background: "#FFFFA3"
        }
      },
      // 1: yellow
      {
        border: "#FA0A10",
        background: "#FB7E81",
        highlight: {
          border: "#FA0A10",
          background: "#FFAFB1"
        },
        hover: {
          border: "#FA0A10",
          background: "#FFAFB1"
        }
      },
      // 2: red
      {
        border: "#41A906",
        background: "#7BE141",
        highlight: {
          border: "#41A906",
          background: "#A1EC76"
        },
        hover: {
          border: "#41A906",
          background: "#A1EC76"
        }
      },
      // 3: green
      {
        border: "#E129F0",
        background: "#EB7DF4",
        highlight: {
          border: "#E129F0",
          background: "#F0B3F5"
        },
        hover: {
          border: "#E129F0",
          background: "#F0B3F5"
        }
      },
      // 4: magenta
      {
        border: "#7C29F0",
        background: "#AD85E4",
        highlight: {
          border: "#7C29F0",
          background: "#D3BDF0"
        },
        hover: {
          border: "#7C29F0",
          background: "#D3BDF0"
        }
      },
      // 5: purple
      {
        border: "#C37F00",
        background: "#FFA807",
        highlight: {
          border: "#C37F00",
          background: "#FFCA66"
        },
        hover: {
          border: "#C37F00",
          background: "#FFCA66"
        }
      },
      // 6: orange
      {
        border: "#4220FB",
        background: "#6E6EFD",
        highlight: {
          border: "#4220FB",
          background: "#9B9BFD"
        },
        hover: {
          border: "#4220FB",
          background: "#9B9BFD"
        }
      },
      // 7: darkblue
      {
        border: "#FD5A77",
        background: "#FFC0CB",
        highlight: {
          border: "#FD5A77",
          background: "#FFD1D9"
        },
        hover: {
          border: "#FD5A77",
          background: "#FFD1D9"
        }
      },
      // 8: pink
      {
        border: "#4AD63A",
        background: "#C2FABC",
        highlight: {
          border: "#4AD63A",
          background: "#E6FFE3"
        },
        hover: {
          border: "#4AD63A",
          background: "#E6FFE3"
        }
      },
      // 9: mint
      {
        border: "#990000",
        background: "#EE0000",
        highlight: {
          border: "#BB0000",
          background: "#FF3333"
        },
        hover: {
          border: "#BB0000",
          background: "#FF3333"
        }
      },
      // 10:bright red
      {
        border: "#FF6000",
        background: "#FF6000",
        highlight: {
          border: "#FF6000",
          background: "#FF6000"
        },
        hover: {
          border: "#FF6000",
          background: "#FF6000"
        }
      },
      // 12: real orange
      {
        border: "#97C2FC",
        background: "#2B7CE9",
        highlight: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        },
        hover: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        }
      },
      // 13: blue
      {
        border: "#399605",
        background: "#255C03",
        highlight: {
          border: "#399605",
          background: "#255C03"
        },
        hover: {
          border: "#399605",
          background: "#255C03"
        }
      },
      // 14: green
      {
        border: "#B70054",
        background: "#FF007E",
        highlight: {
          border: "#B70054",
          background: "#FF007E"
        },
        hover: {
          border: "#B70054",
          background: "#FF007E"
        }
      },
      // 15: magenta
      {
        border: "#AD85E4",
        background: "#7C29F0",
        highlight: {
          border: "#D3BDF0",
          background: "#7C29F0"
        },
        hover: {
          border: "#D3BDF0",
          background: "#7C29F0"
        }
      },
      // 16: purple
      {
        border: "#4557FA",
        background: "#000EA1",
        highlight: {
          border: "#6E6EFD",
          background: "#000EA1"
        },
        hover: {
          border: "#6E6EFD",
          background: "#000EA1"
        }
      },
      // 17: darkblue
      {
        border: "#FFC0CB",
        background: "#FD5A77",
        highlight: {
          border: "#FFD1D9",
          background: "#FD5A77"
        },
        hover: {
          border: "#FFD1D9",
          background: "#FD5A77"
        }
      },
      // 18: pink
      {
        border: "#C2FABC",
        background: "#74D66A",
        highlight: {
          border: "#E6FFE3",
          background: "#74D66A"
        },
        hover: {
          border: "#E6FFE3",
          background: "#74D66A"
        }
      },
      // 19: mint
      {
        border: "#EE0000",
        background: "#990000",
        highlight: {
          border: "#FF3333",
          background: "#BB0000"
        },
        hover: {
          border: "#FF3333",
          background: "#BB0000"
        }
      }
      // 20:bright red
    ];
    this.options = {};
    this.defaultOptions = {
      useDefaultGroups: true
    };
    _Object$assign(this.options, this.defaultOptions);
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    const optionFields = ["useDefaultGroups"];
    if (options2 !== void 0) {
      for (const groupName in options2) {
        if (Object.prototype.hasOwnProperty.call(options2, groupName)) {
          if (_indexOfInstanceProperty(optionFields).call(optionFields, groupName) === -1) {
            const group = options2[groupName];
            this.add(groupName, group);
          }
        }
      }
    }
  }
  /**
   * Clear all groups
   */
  clear() {
    this._groups = new _Map();
    this._groupNames = [];
  }
  /**
   * Get group options of a groupname.
   * If groupname is not found, a new group may be created.
   * @param {*}       groupname     Can be a number, string, Date, etc.
   * @param {boolean} [shouldCreate] If true, create a new group
   * @returns {object} The found or created group
   */
  get(groupname) {
    let shouldCreate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let group = this._groups.get(groupname);
    if (group === void 0 && shouldCreate) {
      if (this.options.useDefaultGroups === false && this._groupNames.length > 0) {
        const index2 = this._groupIndex % this._groupNames.length;
        ++this._groupIndex;
        group = {};
        group.color = this._groups.get(this._groupNames[index2]);
        this._groups.set(groupname, group);
      } else {
        const index2 = this._defaultIndex % this._defaultGroups.length;
        this._defaultIndex++;
        group = {};
        group.color = this._defaultGroups[index2];
        this._groups.set(groupname, group);
      }
    }
    return group;
  }
  /**
   * Add custom group style.
   * @param {string} groupName - The name of the group, a new group will be
   * created if a group with the same name doesn't exist, otherwise the old
   * groups style will be overwritten.
   * @param {object} style - An object containing borderColor, backgroundColor,
   * etc.
   * @returns {object} The created group object.
   */
  add(groupName, style) {
    if (!this._groups.has(groupName)) {
      this._groupNames.push(groupName);
    }
    this._groups.set(groupName, style);
    return style;
  }
};
var $$g = _export;
$$g({ target: "Number", stat: true }, {
  isNaN: function isNaN2(number2) {
    return number2 !== number2;
  }
});
var path$c = path$t;
var isNan$2 = path$c.Number.isNaN;
var parent$q = isNan$2;
var isNan$1 = parent$q;
var isNan = isNan$1;
var _Number$isNaN = getDefaultExportFromCjs(isNan);
var global$4 = global$n;
var globalIsFinite = global$4.isFinite;
var numberIsFinite$1 = Number.isFinite || function isFinite(it2) {
  return typeof it2 == "number" && globalIsFinite(it2);
};
var $$f = _export;
var numberIsFinite = numberIsFinite$1;
$$f({ target: "Number", stat: true }, { isFinite: numberIsFinite });
var path$b = path$t;
var _isFinite$2 = path$b.Number.isFinite;
var parent$p = _isFinite$2;
var _isFinite$1 = parent$p;
var _isFinite = _isFinite$1;
var _Number$isFinite = getDefaultExportFromCjs(_isFinite);
var $$e = _export;
var $some = arrayIteration.some;
var arrayMethodIsStrict$3 = arrayMethodIsStrict$6;
var STRICT_METHOD$2 = arrayMethodIsStrict$3("some");
$$e({ target: "Array", proto: true, forced: !STRICT_METHOD$2 }, {
  some: function some(callbackfn) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$4 = entryVirtual$h;
var some$3 = entryVirtual$4("Array").some;
var isPrototypeOf$4 = objectIsPrototypeOf;
var method$4 = some$3;
var ArrayPrototype$4 = Array.prototype;
var some$2 = function(it2) {
  var own = it2.some;
  return it2 === ArrayPrototype$4 || isPrototypeOf$4(ArrayPrototype$4, it2) && own === ArrayPrototype$4.some ? method$4 : own;
};
var parent$o = some$2;
var some$1 = parent$o;
var some2 = some$1;
var _someInstanceProperty = getDefaultExportFromCjs(some2);
var defineProperty$8 = { exports: {} };
var $$d = _export;
var DESCRIPTORS$3 = descriptors;
var defineProperty$7 = objectDefineProperty.f;
$$d({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty$7, sham: !DESCRIPTORS$3 }, {
  defineProperty: defineProperty$7
});
var path$a = path$t;
var Object$4 = path$a.Object;
var defineProperty$6 = defineProperty$8.exports = function defineProperty4(it2, key, desc) {
  return Object$4.defineProperty(it2, key, desc);
};
if (Object$4.defineProperty.sham)
  defineProperty$6.sham = true;
var definePropertyExports = defineProperty$8.exports;
var parent$n = definePropertyExports;
var defineProperty$5 = parent$n;
var parent$m = defineProperty$5;
var defineProperty$4 = parent$m;
var parent$l = defineProperty$4;
var defineProperty$3 = parent$l;
var defineProperty$2 = defineProperty$3;
var _Object$defineProperty$1 = getDefaultExportFromCjs(defineProperty$2);
var wellKnownSymbol$1 = wellKnownSymbol$l;
var defineProperty$1 = objectDefineProperty.f;
var METADATA = wellKnownSymbol$1("metadata");
var FunctionPrototype = Function.prototype;
if (FunctionPrototype[METADATA] === void 0) {
  defineProperty$1(FunctionPrototype, METADATA, {
    value: null
  });
}
var defineWellKnownSymbol$7 = wellKnownSymbolDefine;
defineWellKnownSymbol$7("asyncDispose");
var defineWellKnownSymbol$6 = wellKnownSymbolDefine;
defineWellKnownSymbol$6("dispose");
var defineWellKnownSymbol$5 = wellKnownSymbolDefine;
defineWellKnownSymbol$5("metadata");
var parent$k = symbol$4;
var symbol$2 = parent$k;
var getBuiltIn$1 = getBuiltIn$b;
var uncurryThis$5 = functionUncurryThis;
var Symbol$3 = getBuiltIn$1("Symbol");
var keyFor2 = Symbol$3.keyFor;
var thisSymbolValue$1 = uncurryThis$5(Symbol$3.prototype.valueOf);
var symbolIsRegistered = Symbol$3.isRegisteredSymbol || function isRegisteredSymbol(value) {
  try {
    return keyFor2(thisSymbolValue$1(value)) !== void 0;
  } catch (error) {
    return false;
  }
};
var $$c = _export;
var isRegisteredSymbol$1 = symbolIsRegistered;
$$c({ target: "Symbol", stat: true }, {
  isRegisteredSymbol: isRegisteredSymbol$1
});
var shared = sharedExports;
var getBuiltIn = getBuiltIn$b;
var uncurryThis$4 = functionUncurryThis;
var isSymbol = isSymbol$5;
var wellKnownSymbol = wellKnownSymbol$l;
var Symbol$2 = getBuiltIn("Symbol");
var $isWellKnownSymbol = Symbol$2.isWellKnownSymbol;
var getOwnPropertyNames$4 = getBuiltIn("Object", "getOwnPropertyNames");
var thisSymbolValue = uncurryThis$4(Symbol$2.prototype.valueOf);
var WellKnownSymbolsStore = shared("wks");
for (i = 0, symbolKeys = getOwnPropertyNames$4(Symbol$2), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {
  try {
    symbolKey = symbolKeys[i];
    if (isSymbol(Symbol$2[symbolKey]))
      wellKnownSymbol(symbolKey);
  } catch (error) {
  }
}
var symbolKey;
var i;
var symbolKeys;
var symbolKeysLength;
var symbolIsWellKnown = function isWellKnownSymbol(value) {
  if ($isWellKnownSymbol && $isWellKnownSymbol(value))
    return true;
  try {
    var symbol2 = thisSymbolValue(value);
    for (var j = 0, keys4 = getOwnPropertyNames$4(WellKnownSymbolsStore), keysLength = keys4.length; j < keysLength; j++) {
      if (WellKnownSymbolsStore[keys4[j]] == symbol2)
        return true;
    }
  } catch (error) {
  }
  return false;
};
var $$b = _export;
var isWellKnownSymbol$1 = symbolIsWellKnown;
$$b({ target: "Symbol", stat: true, forced: true }, {
  isWellKnownSymbol: isWellKnownSymbol$1
});
var defineWellKnownSymbol$4 = wellKnownSymbolDefine;
defineWellKnownSymbol$4("matcher");
var defineWellKnownSymbol$3 = wellKnownSymbolDefine;
defineWellKnownSymbol$3("observable");
var $$a = _export;
var isRegisteredSymbol2 = symbolIsRegistered;
$$a({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, {
  isRegistered: isRegisteredSymbol2
});
var $$9 = _export;
var isWellKnownSymbol2 = symbolIsWellKnown;
$$9({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, {
  isWellKnown: isWellKnownSymbol2
});
var defineWellKnownSymbol$2 = wellKnownSymbolDefine;
defineWellKnownSymbol$2("metadataKey");
var defineWellKnownSymbol$1 = wellKnownSymbolDefine;
defineWellKnownSymbol$1("patternMatch");
var defineWellKnownSymbol = wellKnownSymbolDefine;
defineWellKnownSymbol("replaceAll");
var parent$j = symbol$2;
var symbol$1 = parent$j;
var symbol = symbol$1;
var _Symbol = getDefaultExportFromCjs(symbol);
var WrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
var iterator$4 = WrappedWellKnownSymbolModule$1.f("iterator");
var parent$i = iterator$4;
var iterator$3 = parent$i;
var parent$h = iterator$3;
var iterator$2 = parent$h;
var parent$g = iterator$2;
var iterator$1 = parent$g;
var iterator = iterator$1;
var _Symbol$iterator = getDefaultExportFromCjs(iterator);
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof _Symbol && "symbol" == typeof _Symbol$iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof _Symbol && o2.constructor === _Symbol && o2 !== _Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
var toPrimitive$4 = WrappedWellKnownSymbolModule.f("toPrimitive");
var parent$f = toPrimitive$4;
var toPrimitive$3 = parent$f;
var parent$e = toPrimitive$3;
var toPrimitive$2 = parent$e;
var parent$d = toPrimitive$2;
var toPrimitive$1 = parent$d;
var toPrimitive = toPrimitive$1;
var _Symbol$toPrimitive = getDefaultExportFromCjs(toPrimitive);
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[_Symbol$toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    _Object$defineProperty$1(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var global$3 = global$n;
var fails$4 = fails$v;
var uncurryThis$3 = functionUncurryThis;
var toString$1 = toString$a;
var trim = stringTrim.trim;
var whitespaces = whitespaces$3;
var charAt = uncurryThis$3("".charAt);
var $parseFloat$1 = global$3.parseFloat;
var Symbol$1 = global$3.Symbol;
var ITERATOR = Symbol$1 && Symbol$1.iterator;
var FORCED$4 = 1 / $parseFloat$1(whitespaces + "-0") !== -Infinity || ITERATOR && !fails$4(function() {
  $parseFloat$1(Object(ITERATOR));
});
var numberParseFloat = FORCED$4 ? function parseFloat2(string2) {
  var trimmedString = trim(toString$1(string2));
  var result = $parseFloat$1(trimmedString);
  return result === 0 && charAt(trimmedString, 0) === "-" ? -0 : result;
} : $parseFloat$1;
var $$8 = _export;
var $parseFloat = numberParseFloat;
$$8({ global: true, forced: parseFloat !== $parseFloat }, {
  parseFloat: $parseFloat
});
var path$9 = path$t;
var _parseFloat$3 = path$9.parseFloat;
var parent$c = _parseFloat$3;
var _parseFloat$2 = parent$c;
var _parseFloat = _parseFloat$2;
var _parseFloat$1 = getDefaultExportFromCjs(_parseFloat);
var $$7 = _export;
var fails$3 = fails$v;
var getOwnPropertyNames$3 = objectGetOwnPropertyNamesExternal.f;
var FAILS_ON_PRIMITIVES = fails$3(function() {
  return !Object.getOwnPropertyNames(1);
});
$$7({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: getOwnPropertyNames$3
});
var path$8 = path$t;
var Object$3 = path$8.Object;
var getOwnPropertyNames$2 = function getOwnPropertyNames4(it2) {
  return Object$3.getOwnPropertyNames(it2);
};
var parent$b = getOwnPropertyNames$2;
var getOwnPropertyNames$1 = parent$b;
var getOwnPropertyNames5 = getOwnPropertyNames$1;
var _Object$getOwnPropertyNames = getDefaultExportFromCjs(getOwnPropertyNames5);
var path$7 = path$t;
var getOwnPropertySymbols$2 = path$7.Object.getOwnPropertySymbols;
var parent$a = getOwnPropertySymbols$2;
var getOwnPropertySymbols$1 = parent$a;
var getOwnPropertySymbols2 = getOwnPropertySymbols$1;
var _Object$getOwnPropertySymbols = getDefaultExportFromCjs(getOwnPropertySymbols2);
var getOwnPropertyDescriptor$3 = { exports: {} };
var $$6 = _export;
var fails$2 = fails$v;
var toIndexedObject$1 = toIndexedObject$b;
var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
var DESCRIPTORS$2 = descriptors;
var FORCED$3 = !DESCRIPTORS$2 || fails$2(function() {
  nativeGetOwnPropertyDescriptor(1);
});
$$6({ target: "Object", stat: true, forced: FORCED$3, sham: !DESCRIPTORS$2 }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor3(it2, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject$1(it2), key);
  }
});
var path$6 = path$t;
var Object$2 = path$6.Object;
var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor$3.exports = function getOwnPropertyDescriptor4(it2, key) {
  return Object$2.getOwnPropertyDescriptor(it2, key);
};
if (Object$2.getOwnPropertyDescriptor.sham)
  getOwnPropertyDescriptor$2.sham = true;
var getOwnPropertyDescriptorExports = getOwnPropertyDescriptor$3.exports;
var parent$9 = getOwnPropertyDescriptorExports;
var getOwnPropertyDescriptor$1 = parent$9;
var getOwnPropertyDescriptor5 = getOwnPropertyDescriptor$1;
var _Object$getOwnPropertyDescriptor = getDefaultExportFromCjs(getOwnPropertyDescriptor5);
var $$5 = _export;
var DESCRIPTORS$1 = descriptors;
var ownKeys$4 = ownKeys$5;
var toIndexedObject = toIndexedObject$b;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var createProperty = createProperty$5;
$$5({ target: "Object", stat: true, sham: !DESCRIPTORS$1 }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object2) {
    var O = toIndexedObject(object2);
    var getOwnPropertyDescriptor6 = getOwnPropertyDescriptorModule.f;
    var keys4 = ownKeys$4(O);
    var result = {};
    var index2 = 0;
    var key, descriptor;
    while (keys4.length > index2) {
      descriptor = getOwnPropertyDescriptor6(O, key = keys4[index2++]);
      if (descriptor !== void 0)
        createProperty(result, key, descriptor);
    }
    return result;
  }
});
var path$5 = path$t;
var getOwnPropertyDescriptors$2 = path$5.Object.getOwnPropertyDescriptors;
var parent$8 = getOwnPropertyDescriptors$2;
var getOwnPropertyDescriptors$1 = parent$8;
var getOwnPropertyDescriptors2 = getOwnPropertyDescriptors$1;
var _Object$getOwnPropertyDescriptors = getDefaultExportFromCjs(getOwnPropertyDescriptors2);
var defineProperties$4 = { exports: {} };
var $$4 = _export;
var DESCRIPTORS = descriptors;
var defineProperties$3 = objectDefineProperties.f;
$$4({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties$3, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties$3
});
var path$4 = path$t;
var Object$1 = path$4.Object;
var defineProperties$2 = defineProperties$4.exports = function defineProperties3(T, D) {
  return Object$1.defineProperties(T, D);
};
if (Object$1.defineProperties.sham)
  defineProperties$2.sham = true;
var definePropertiesExports = defineProperties$4.exports;
var parent$7 = definePropertiesExports;
var defineProperties$1 = parent$7;
var defineProperties4 = defineProperties$1;
var _Object$defineProperties = getDefaultExportFromCjs(defineProperties4);
var defineProperty5 = defineProperty$5;
var _Object$defineProperty = getDefaultExportFromCjs(defineProperty5);
function choosify(subOption, pile) {
  const allowed = ["node", "edge", "label"];
  let value = true;
  const chosen = topMost(pile, "chosen");
  if (typeof chosen === "boolean") {
    value = chosen;
  } else if (typeof chosen === "object") {
    if (_indexOfInstanceProperty(allowed).call(allowed, subOption) === -1) {
      throw new Error("choosify: subOption '" + subOption + "' should be one of '" + allowed.join("', '") + "'");
    }
    const chosenEdge = topMost(pile, ["chosen", subOption]);
    if (typeof chosenEdge === "boolean" || typeof chosenEdge === "function") {
      value = chosenEdge;
    }
  }
  return value;
}
function pointInRect(rect, point, rotationPoint) {
  if (rect.width <= 0 || rect.height <= 0) {
    return false;
  }
  if (rotationPoint !== void 0) {
    const tmp = {
      x: point.x - rotationPoint.x,
      y: point.y - rotationPoint.y
    };
    if (rotationPoint.angle !== 0) {
      const angle = -rotationPoint.angle;
      const tmp2 = {
        x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,
        y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y
      };
      point = tmp2;
    } else {
      point = tmp;
    }
  }
  const right = rect.x + rect.width;
  const bottom = rect.y + rect.width;
  return rect.left < point.x && right > point.x && rect.top < point.y && bottom > point.y;
}
function isValidLabel(text) {
  return typeof text === "string" && text !== "";
}
function getSelfRefCoordinates(ctx, angle, radius, node) {
  let x = node.x;
  let y = node.y;
  if (typeof node.distanceToBorder === "function") {
    const toBorderDist = node.distanceToBorder(ctx, angle);
    const yFromNodeCenter = Math.sin(angle) * toBorderDist;
    const xFromNodeCenter = Math.cos(angle) * toBorderDist;
    if (xFromNodeCenter === toBorderDist) {
      x += toBorderDist;
      y = node.y;
    } else if (yFromNodeCenter === toBorderDist) {
      x = node.x;
      y -= toBorderDist;
    } else {
      x += xFromNodeCenter;
      y -= yFromNodeCenter;
    }
  } else if (node.shape.width > node.shape.height) {
    x = node.x + node.shape.width * 0.5;
    y = node.y - radius;
  } else {
    x = node.x + radius;
    y = node.y - node.shape.height * 0.5;
  }
  return {
    x,
    y
  };
}
var entryVirtual$3 = entryVirtual$h;
var values$3 = entryVirtual$3("Array").values;
var parent$6 = values$3;
var values$2 = parent$6;
var classof$1 = classof$c;
var hasOwn$1 = hasOwnProperty_1;
var isPrototypeOf$3 = objectIsPrototypeOf;
var method$3 = values$2;
var ArrayPrototype$3 = Array.prototype;
var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};
var values$1 = function(it2) {
  var own = it2.values;
  return it2 === ArrayPrototype$3 || isPrototypeOf$3(ArrayPrototype$3, it2) && own === ArrayPrototype$3.values || hasOwn$1(DOMIterables, classof$1(it2)) ? method$3 : own;
};
var values2 = values$1;
var _valuesInstanceProperty = getDefaultExportFromCjs(values2);
var LabelAccumulator = class {
  /**
   * @param {MeasureText} measureText
   */
  constructor(measureText) {
    this.measureText = measureText;
    this.current = 0;
    this.width = 0;
    this.height = 0;
    this.lines = [];
  }
  /**
   * Append given text to the given line.
   * @param {number}  l    index of line to add to
   * @param {string}  text string to append to line
   * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod]
   * @private
   */
  _add(l, text) {
    let mod = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "normal";
    if (this.lines[l] === void 0) {
      this.lines[l] = {
        width: 0,
        height: 0,
        blocks: []
      };
    }
    let tmpText = text;
    if (text === void 0 || text === "")
      tmpText = " ";
    const result = this.measureText(tmpText, mod);
    const block = _Object$assign({}, _valuesInstanceProperty(result));
    block.text = text;
    block.width = result.width;
    block.mod = mod;
    if (text === void 0 || text === "") {
      block.width = 0;
    }
    this.lines[l].blocks.push(block);
    this.lines[l].width += block.width;
  }
  /**
   * Returns the width in pixels of the current line.
   * @returns {number}
   */
  curWidth() {
    const line = this.lines[this.current];
    if (line === void 0)
      return 0;
    return line.width;
  }
  /**
   * Add text in block to current line
   * @param {string} text
   * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod]
   */
  append(text) {
    let mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
    this._add(this.current, text, mod);
  }
  /**
   * Add text in block to current line and start a new line
   * @param {string} text
   * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod]
   */
  newLine(text) {
    let mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
    this._add(this.current, text, mod);
    this.current++;
  }
  /**
   * Determine and set the heights of all the lines currently contained in this instance
   *
   * Note that width has already been set.
   * @private
   */
  determineLineHeights() {
    for (let k = 0; k < this.lines.length; k++) {
      const line = this.lines[k];
      let height = 0;
      if (line.blocks !== void 0) {
        for (let l = 0; l < line.blocks.length; l++) {
          const block = line.blocks[l];
          if (height < block.height) {
            height = block.height;
          }
        }
      }
      line.height = height;
    }
  }
  /**
   * Determine the full size of the label text, as determined by current lines and blocks
   * @private
   */
  determineLabelSize() {
    let width = 0;
    let height = 0;
    for (let k = 0; k < this.lines.length; k++) {
      const line = this.lines[k];
      if (line.width > width) {
        width = line.width;
      }
      height += line.height;
    }
    this.width = width;
    this.height = height;
  }
  /**
   * Remove all empty blocks and empty lines we don't need
   *
   * This must be done after the width/height determination,
   * so that these are set properly for processing here.
   * @returns {Array<Line>} Lines with empty blocks (and some empty lines) removed
   * @private
   */
  removeEmptyBlocks() {
    const tmpLines = [];
    for (let k = 0; k < this.lines.length; k++) {
      const line = this.lines[k];
      if (line.blocks.length === 0)
        continue;
      if (k === this.lines.length - 1) {
        if (line.width === 0)
          continue;
      }
      const tmpLine = {};
      _Object$assign(tmpLine, line);
      tmpLine.blocks = [];
      let firstEmptyBlock;
      const tmpBlocks = [];
      for (let l = 0; l < line.blocks.length; l++) {
        const block = line.blocks[l];
        if (block.width !== 0) {
          tmpBlocks.push(block);
        } else {
          if (firstEmptyBlock === void 0) {
            firstEmptyBlock = block;
          }
        }
      }
      if (tmpBlocks.length === 0 && firstEmptyBlock !== void 0) {
        tmpBlocks.push(firstEmptyBlock);
      }
      tmpLine.blocks = tmpBlocks;
      tmpLines.push(tmpLine);
    }
    return tmpLines;
  }
  /**
   * Set the sizes for all lines and the whole thing.
   * @returns {{width: (number|*), height: (number|*), lines: Array}}
   */
  finalize() {
    this.determineLineHeights();
    this.determineLabelSize();
    const tmpLines = this.removeEmptyBlocks();
    return {
      width: this.width,
      height: this.height,
      lines: tmpLines
    };
  }
};
var tagPattern = {
  // HTML
  "<b>": /<b>/,
  "<i>": /<i>/,
  "<code>": /<code>/,
  "</b>": /<\/b>/,
  "</i>": /<\/i>/,
  "</code>": /<\/code>/,
  // Markdown
  "*": /\*/,
  // bold
  _: /_/,
  // ital
  "`": /`/,
  // mono
  afterBold: /[^*]/,
  afterItal: /[^_]/,
  afterMono: /[^`]/
};
var MarkupAccumulator = class {
  /**
   * Create an instance
   * @param {string} text  text to parse for markup
   */
  constructor(text) {
    this.text = text;
    this.bold = false;
    this.ital = false;
    this.mono = false;
    this.spacing = false;
    this.position = 0;
    this.buffer = "";
    this.modStack = [];
    this.blocks = [];
  }
  /**
   * Return the mod label currently on the top of the stack
   * @returns {string}  label of topmost mod
   * @private
   */
  mod() {
    return this.modStack.length === 0 ? "normal" : this.modStack[0];
  }
  /**
   * Return the mod label currently active
   * @returns {string}  label of active mod
   * @private
   */
  modName() {
    if (this.modStack.length === 0)
      return "normal";
    else if (this.modStack[0] === "mono")
      return "mono";
    else {
      if (this.bold && this.ital) {
        return "boldital";
      } else if (this.bold) {
        return "bold";
      } else if (this.ital) {
        return "ital";
      }
    }
  }
  /**
   * @private
   */
  emitBlock() {
    if (this.spacing) {
      this.add(" ");
      this.spacing = false;
    }
    if (this.buffer.length > 0) {
      this.blocks.push({
        text: this.buffer,
        mod: this.modName()
      });
      this.buffer = "";
    }
  }
  /**
   * Output text to buffer
   * @param {string} text  text to add
   * @private
   */
  add(text) {
    if (text === " ") {
      this.spacing = true;
    }
    if (this.spacing) {
      this.buffer += " ";
      this.spacing = false;
    }
    if (text != " ") {
      this.buffer += text;
    }
  }
  /**
   * Handle parsing of whitespace
   * @param {string} ch  the character to check
   * @returns {boolean} true if the character was processed as whitespace, false otherwise
   */
  parseWS(ch) {
    if (/[ \t]/.test(ch)) {
      if (!this.mono) {
        this.spacing = true;
      } else {
        this.add(ch);
      }
      return true;
    }
    return false;
  }
  /**
   * @param {string} tagName  label for block type to set
   * @private
   */
  setTag(tagName) {
    this.emitBlock();
    this[tagName] = true;
    this.modStack.unshift(tagName);
  }
  /**
   * @param {string} tagName  label for block type to unset
   * @private
   */
  unsetTag(tagName) {
    this.emitBlock();
    this[tagName] = false;
    this.modStack.shift();
  }
  /**
   * @param {string} tagName label for block type we are currently processing
   * @param {string|RegExp} tag string to match in text
   * @returns {boolean} true if the tag was processed, false otherwise
   */
  parseStartTag(tagName, tag) {
    if (!this.mono && !this[tagName] && this.match(tag)) {
      this.setTag(tagName);
      return true;
    }
    return false;
  }
  /**
   * @param {string|RegExp} tag
   * @param {number} [advance] if set, advance current position in text
   * @returns {boolean} true if match at given position, false otherwise
   * @private
   */
  match(tag) {
    let advance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const [regExp, length2] = this.prepareRegExp(tag);
    const matched = regExp.test(this.text.substr(this.position, length2));
    if (matched && advance) {
      this.position += length2 - 1;
    }
    return matched;
  }
  /**
   * @param {string} tagName label for block type we are currently processing
   * @param {string|RegExp} tag string to match in text
   * @param {RegExp} [nextTag] regular expression to match for characters *following* the current tag
   * @returns {boolean} true if the tag was processed, false otherwise
   */
  parseEndTag(tagName, tag, nextTag) {
    let checkTag = this.mod() === tagName;
    if (tagName === "mono") {
      checkTag = checkTag && this.mono;
    } else {
      checkTag = checkTag && !this.mono;
    }
    if (checkTag && this.match(tag)) {
      if (nextTag !== void 0) {
        if (this.position === this.text.length - 1 || this.match(nextTag, false)) {
          this.unsetTag(tagName);
        }
      } else {
        this.unsetTag(tagName);
      }
      return true;
    }
    return false;
  }
  /**
   * @param {string|RegExp} tag  string to match in text
   * @param {value} value  string to replace tag with, if found at current position
   * @returns {boolean} true if the tag was processed, false otherwise
   */
  replace(tag, value) {
    if (this.match(tag)) {
      this.add(value);
      this.position += length - 1;
      return true;
    }
    return false;
  }
  /**
   * Create a regular expression for the tag if it isn't already one.
   *
   * The return value is an array `[RegExp, number]`, with exactly two value, where:
   * - RegExp is the regular expression to use
   * - number is the lenth of the input string to match
   * @param {string|RegExp} tag  string to match in text
   * @returns {Array}  regular expression to use and length of input string to match
   * @private
   */
  prepareRegExp(tag) {
    let length2;
    let regExp;
    if (tag instanceof RegExp) {
      regExp = tag;
      length2 = 1;
    } else {
      const prepared = tagPattern[tag];
      if (prepared !== void 0) {
        regExp = prepared;
      } else {
        regExp = new RegExp(tag);
      }
      length2 = tag.length;
    }
    return [regExp, length2];
  }
};
var LabelSplitter = class {
  /**
   * @param {CanvasRenderingContext2D} ctx Canvas rendering context
   * @param {Label} parent reference to the Label instance using current instance
   * @param {boolean} selected
   * @param {boolean} hover
   */
  constructor(ctx, parent2, selected, hover) {
    this.ctx = ctx;
    this.parent = parent2;
    this.selected = selected;
    this.hover = hover;
    const textWidth = (text, mod) => {
      if (text === void 0)
        return 0;
      const values3 = this.parent.getFormattingValues(ctx, selected, hover, mod);
      let width = 0;
      if (text !== "") {
        const measure = this.ctx.measureText(text);
        width = measure.width;
      }
      return {
        width,
        values: values3
      };
    };
    this.lines = new LabelAccumulator(textWidth);
  }
  /**
   * Split passed text of a label into lines and blocks.
   *
   * # NOTE
   *
   * The handling of spacing is option dependent:
   *
   * - if `font.multi : false`, all spaces are retained
   * - if `font.multi : true`, every sequence of spaces is compressed to a single space
   *
   * This might not be the best way to do it, but this is as it has been working till now.
   * In order not to break existing functionality, for the time being this behaviour will
   * be retained in any code changes.
   * @param {string} text  text to split
   * @returns {Array<line>}
   */
  process(text) {
    if (!isValidLabel(text)) {
      return this.lines.finalize();
    }
    const font = this.parent.fontOptions;
    text = text.replace(/\r\n/g, "\n");
    text = text.replace(/\r/g, "\n");
    const nlLines = String(text).split("\n");
    const lineCount = nlLines.length;
    if (font.multi) {
      for (let i = 0; i < lineCount; i++) {
        const blocks = this.splitBlocks(nlLines[i], font.multi);
        if (blocks === void 0)
          continue;
        if (blocks.length === 0) {
          this.lines.newLine("");
          continue;
        }
        if (font.maxWdt > 0) {
          for (let j = 0; j < blocks.length; j++) {
            const mod = blocks[j].mod;
            const text2 = blocks[j].text;
            this.splitStringIntoLines(text2, mod, true);
          }
        } else {
          for (let j = 0; j < blocks.length; j++) {
            const mod = blocks[j].mod;
            const text2 = blocks[j].text;
            this.lines.append(text2, mod);
          }
        }
        this.lines.newLine();
      }
    } else {
      if (font.maxWdt > 0) {
        for (let i = 0; i < lineCount; i++) {
          this.splitStringIntoLines(nlLines[i]);
        }
      } else {
        for (let i = 0; i < lineCount; i++) {
          this.lines.newLine(nlLines[i]);
        }
      }
    }
    return this.lines.finalize();
  }
  /**
   * normalize the markup system
   * @param {boolean|'md'|'markdown'|'html'} markupSystem
   * @returns {string}
   */
  decodeMarkupSystem(markupSystem) {
    let system = "none";
    if (markupSystem === "markdown" || markupSystem === "md") {
      system = "markdown";
    } else if (markupSystem === true || markupSystem === "html") {
      system = "html";
    }
    return system;
  }
  /**
   *
   * @param {string} text
   * @returns {Array}
   */
  splitHtmlBlocks(text) {
    const s = new MarkupAccumulator(text);
    const parseEntities = (ch) => {
      if (/&/.test(ch)) {
        const parsed = s.replace(s.text, "&lt;", "<") || s.replace(s.text, "&amp;", "&");
        if (!parsed) {
          s.add("&");
        }
        return true;
      }
      return false;
    };
    while (s.position < s.text.length) {
      const ch = s.text.charAt(s.position);
      const parsed = s.parseWS(ch) || /</.test(ch) && (s.parseStartTag("bold", "<b>") || s.parseStartTag("ital", "<i>") || s.parseStartTag("mono", "<code>") || s.parseEndTag("bold", "</b>") || s.parseEndTag("ital", "</i>") || s.parseEndTag("mono", "</code>")) || parseEntities(ch);
      if (!parsed) {
        s.add(ch);
      }
      s.position++;
    }
    s.emitBlock();
    return s.blocks;
  }
  /**
   *
   * @param {string} text
   * @returns {Array}
   */
  splitMarkdownBlocks(text) {
    const s = new MarkupAccumulator(text);
    let beginable = true;
    const parseOverride = (ch) => {
      if (/\\/.test(ch)) {
        if (s.position < this.text.length + 1) {
          s.position++;
          ch = this.text.charAt(s.position);
          if (/ \t/.test(ch)) {
            s.spacing = true;
          } else {
            s.add(ch);
            beginable = false;
          }
        }
        return true;
      }
      return false;
    };
    while (s.position < s.text.length) {
      const ch = s.text.charAt(s.position);
      const parsed = s.parseWS(ch) || parseOverride(ch) || (beginable || s.spacing) && (s.parseStartTag("bold", "*") || s.parseStartTag("ital", "_") || s.parseStartTag("mono", "`")) || s.parseEndTag("bold", "*", "afterBold") || s.parseEndTag("ital", "_", "afterItal") || s.parseEndTag("mono", "`", "afterMono");
      if (!parsed) {
        s.add(ch);
        beginable = false;
      }
      s.position++;
    }
    s.emitBlock();
    return s.blocks;
  }
  /**
   * Explodes a piece of text into single-font blocks using a given markup
   * @param {string} text
   * @param {boolean|'md'|'markdown'|'html'} markupSystem
   * @returns {Array.<{text: string, mod: string}>}
   * @private
   */
  splitBlocks(text, markupSystem) {
    const system = this.decodeMarkupSystem(markupSystem);
    if (system === "none") {
      return [{
        text,
        mod: "normal"
      }];
    } else if (system === "markdown") {
      return this.splitMarkdownBlocks(text);
    } else if (system === "html") {
      return this.splitHtmlBlocks(text);
    }
  }
  /**
   * @param {string} text
   * @returns {boolean} true if text length over the current max with
   * @private
   */
  overMaxWidth(text) {
    const width = this.ctx.measureText(text).width;
    return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;
  }
  /**
   * Determine the longest part of the sentence which still fits in the
   * current max width.
   * @param {Array} words  Array of strings signifying a text lines
   * @returns {number}      index of first item in string making string go over max
   * @private
   */
  getLongestFit(words) {
    let text = "";
    let w = 0;
    while (w < words.length) {
      const pre = text === "" ? "" : " ";
      const newText = text + pre + words[w];
      if (this.overMaxWidth(newText))
        break;
      text = newText;
      w++;
    }
    return w;
  }
  /**
   * Determine the longest part of the string which still fits in the
   * current max width.
   * @param {Array} words Array of strings signifying a text lines
   * @returns {number} index of first item in string making string go over max
   */
  getLongestFitWord(words) {
    let w = 0;
    while (w < words.length) {
      if (this.overMaxWidth(_sliceInstanceProperty(words).call(words, 0, w)))
        break;
      w++;
    }
    return w;
  }
  /**
   * Split the passed text into lines, according to width constraint (if any).
   *
   * The method assumes that the input string is a single line, i.e. without lines break.
   *
   * This method retains spaces, if still present (case `font.multi: false`).
   * A space which falls on an internal line break, will be replaced by a newline.
   * There is no special handling of tabs; these go along with the flow.
   * @param {string} str
   * @param {string} [mod]
   * @param {boolean} [appendLast]
   * @private
   */
  splitStringIntoLines(str) {
    let mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
    let appendLast = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    this.parent.getFormattingValues(this.ctx, this.selected, this.hover, mod);
    str = str.replace(/^( +)/g, "$1\r");
    str = str.replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r");
    let words = str.split("\r");
    while (words.length > 0) {
      let w = this.getLongestFit(words);
      if (w === 0) {
        const word = words[0];
        const x = this.getLongestFitWord(word);
        this.lines.newLine(_sliceInstanceProperty(word).call(word, 0, x), mod);
        words[0] = _sliceInstanceProperty(word).call(word, x);
      } else {
        let newW = w;
        if (words[w - 1] === " ") {
          w--;
        } else if (words[newW] === " ") {
          newW++;
        }
        const text = _sliceInstanceProperty(words).call(words, 0, w).join("");
        if (w == words.length && appendLast) {
          this.lines.append(text, mod);
        } else {
          this.lines.newLine(text, mod);
        }
        words = _sliceInstanceProperty(words).call(words, newW);
      }
    }
  }
};
var multiFontStyle = ["bold", "ital", "boldital", "mono"];
var Label = class _Label {
  /**
   * @param {object} body
   * @param {object} options
   * @param {boolean} [edgelabel]
   */
  constructor(body, options2) {
    let edgelabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    this.body = body;
    this.pointToSelf = false;
    this.baseSize = void 0;
    this.fontOptions = {};
    this.setOptions(options2);
    this.size = {
      top: 0,
      left: 0,
      width: 0,
      height: 0,
      yLine: 0
    };
    this.isEdgeLabel = edgelabel;
  }
  /**
   * @param {object} options the options of the parent Node-instance
   */
  setOptions(options2) {
    this.elementOptions = options2;
    this.initFontOptions(options2.font);
    if (isValidLabel(options2.label)) {
      this.labelDirty = true;
    } else {
      options2.label = void 0;
    }
    if (options2.font !== void 0 && options2.font !== null) {
      if (typeof options2.font === "string") {
        this.baseSize = this.fontOptions.size;
      } else if (typeof options2.font === "object") {
        const size = options2.font.size;
        if (size !== void 0) {
          this.baseSize = size;
        }
      }
    }
  }
  /**
   * Init the font Options structure.
   *
   * Member fontOptions serves as an accumulator for the current font options.
   * As such, it needs to be completely separated from the node options.
   * @param {object} newFontOptions the new font options to process
   * @private
   */
  initFontOptions(newFontOptions) {
    forEach$1(multiFontStyle, (style) => {
      this.fontOptions[style] = {};
    });
    if (_Label.parseFontString(this.fontOptions, newFontOptions)) {
      this.fontOptions.vadjust = 0;
      return;
    }
    forEach$1(newFontOptions, (prop, n) => {
      if (prop !== void 0 && prop !== null && typeof prop !== "object") {
        this.fontOptions[n] = prop;
      }
    });
  }
  /**
   * If in-variable is a string, parse it as a font specifier.
   *
   * Note that following is not done here and have to be done after the call:
   * - Not all font options are set (vadjust, mod)
   * @param {object} outOptions  out-parameter, object in which to store the parse results (if any)
   * @param {object} inOptions  font options to parse
   * @returns {boolean} true if font parsed as string, false otherwise
   * @static
   */
  static parseFontString(outOptions, inOptions) {
    if (!inOptions || typeof inOptions !== "string")
      return false;
    const newOptionsArray = inOptions.split(" ");
    outOptions.size = +newOptionsArray[0].replace("px", "");
    outOptions.face = newOptionsArray[1];
    outOptions.color = newOptionsArray[2];
    return true;
  }
  /**
   * Set the width and height constraints based on 'nearest' value
   * @param {Array} pile array of option objects to consider
   * @returns {object} the actual constraint values to use
   * @private
   */
  constrain(pile) {
    const fontOptions = {
      constrainWidth: false,
      maxWdt: -1,
      minWdt: -1,
      constrainHeight: false,
      minHgt: -1,
      valign: "middle"
    };
    const widthConstraint = topMost(pile, "widthConstraint");
    if (typeof widthConstraint === "number") {
      fontOptions.maxWdt = Number(widthConstraint);
      fontOptions.minWdt = Number(widthConstraint);
    } else if (typeof widthConstraint === "object") {
      const widthConstraintMaximum = topMost(pile, ["widthConstraint", "maximum"]);
      if (typeof widthConstraintMaximum === "number") {
        fontOptions.maxWdt = Number(widthConstraintMaximum);
      }
      const widthConstraintMinimum = topMost(pile, ["widthConstraint", "minimum"]);
      if (typeof widthConstraintMinimum === "number") {
        fontOptions.minWdt = Number(widthConstraintMinimum);
      }
    }
    const heightConstraint = topMost(pile, "heightConstraint");
    if (typeof heightConstraint === "number") {
      fontOptions.minHgt = Number(heightConstraint);
    } else if (typeof heightConstraint === "object") {
      const heightConstraintMinimum = topMost(pile, ["heightConstraint", "minimum"]);
      if (typeof heightConstraintMinimum === "number") {
        fontOptions.minHgt = Number(heightConstraintMinimum);
      }
      const heightConstraintValign = topMost(pile, ["heightConstraint", "valign"]);
      if (typeof heightConstraintValign === "string") {
        if (heightConstraintValign === "top" || heightConstraintValign === "bottom") {
          fontOptions.valign = heightConstraintValign;
        }
      }
    }
    return fontOptions;
  }
  /**
   * Set options and update internal state
   * @param {object} options  options to set
   * @param {Array}  pile     array of option objects to consider for option 'chosen'
   */
  update(options2, pile) {
    this.setOptions(options2, true);
    this.propagateFonts(pile);
    deepExtend(this.fontOptions, this.constrain(pile));
    this.fontOptions.chooser = choosify("label", pile);
  }
  /**
   * When margins are set in an element, adjust sizes is called to remove them
   * from the width/height constraints. This must be done prior to label sizing.
   * @param {{top: number, right: number, bottom: number, left: number}} margins
   */
  adjustSizes(margins) {
    const widthBias = margins ? margins.right + margins.left : 0;
    if (this.fontOptions.constrainWidth) {
      this.fontOptions.maxWdt -= widthBias;
      this.fontOptions.minWdt -= widthBias;
    }
    const heightBias = margins ? margins.top + margins.bottom : 0;
    if (this.fontOptions.constrainHeight) {
      this.fontOptions.minHgt -= heightBias;
    }
  }
  /////////////////////////////////////////////////////////
  // Methods for handling options piles
  // Eventually, these will be moved to a separate class
  /////////////////////////////////////////////////////////
  /**
   * Add the font members of the passed list of option objects to the pile.
   * @param {Pile} dstPile  pile of option objects add to
   * @param {Pile} srcPile  pile of option objects to take font options from
   * @private
   */
  addFontOptionsToPile(dstPile, srcPile) {
    for (let i = 0; i < srcPile.length; ++i) {
      this.addFontToPile(dstPile, srcPile[i]);
    }
  }
  /**
   * Add given font option object to the list of objects (the 'pile') to consider for determining
   * multi-font option values.
   * @param {Pile} pile  pile of option objects to use
   * @param {object} options  instance to add to pile
   * @private
   */
  addFontToPile(pile, options2) {
    if (options2 === void 0)
      return;
    if (options2.font === void 0 || options2.font === null)
      return;
    const item = options2.font;
    pile.push(item);
  }
  /**
   * Collect all own-property values from the font pile that aren't multi-font option objectss.
   * @param {Pile} pile  pile of option objects to use
   * @returns {object} object with all current own basic font properties
   * @private
   */
  getBasicOptions(pile) {
    const ret = {};
    for (let n = 0; n < pile.length; ++n) {
      let fontOptions = pile[n];
      const tmpShorthand = {};
      if (_Label.parseFontString(tmpShorthand, fontOptions)) {
        fontOptions = tmpShorthand;
      }
      forEach$1(fontOptions, (opt, name) => {
        if (opt === void 0)
          return;
        if (Object.prototype.hasOwnProperty.call(ret, name))
          return;
        if (_indexOfInstanceProperty(multiFontStyle).call(multiFontStyle, name) !== -1) {
          ret[name] = {};
        } else {
          ret[name] = opt;
        }
      });
    }
    return ret;
  }
  /**
   * Return the value for given option for the given multi-font.
   *
   * All available option objects are trawled in the set order to construct the option values.
   *
   * ---------------------------------------------------------------------
   * ## Traversal of pile for multi-fonts
   *
   * The determination of multi-font option values is a special case, because any values not
   * present in the multi-font options should by definition be taken from the main font options,
   * i.e. from the current 'parent' object of the multi-font option.
   *
   * ### Search order for multi-fonts
   *
   * 'bold' used as example:
   *
   * - search in option group 'bold' in local properties
   * - search in main font option group in local properties
   *
   * ---------------------------------------------------------------------
   * @param {Pile} pile  pile of option objects to use
   * @param {MultiFontStyle} multiName sub path for the multi-font
   * @param {string} option  the option to search for, for the given multi-font
   * @returns {string|number} the value for the given option
   * @private
   */
  getFontOption(pile, multiName, option) {
    let multiFont;
    for (let n = 0; n < pile.length; ++n) {
      const fontOptions = pile[n];
      if (Object.prototype.hasOwnProperty.call(fontOptions, multiName)) {
        multiFont = fontOptions[multiName];
        if (multiFont === void 0 || multiFont === null)
          continue;
        const tmpShorthand = {};
        if (_Label.parseFontString(tmpShorthand, multiFont)) {
          multiFont = tmpShorthand;
        }
        if (Object.prototype.hasOwnProperty.call(multiFont, option)) {
          return multiFont[option];
        }
      }
    }
    if (Object.prototype.hasOwnProperty.call(this.fontOptions, option)) {
      return this.fontOptions[option];
    }
    throw new Error("Did not find value for multi-font for property: '" + option + "'");
  }
  /**
   * Return all options values for the given multi-font.
   *
   * All available option objects are trawled in the set order to construct the option values.
   * @param {Pile} pile  pile of option objects to use
   * @param {MultiFontStyle} multiName sub path for the mod-font
   * @returns {MultiFontOptions}
   * @private
   */
  getFontOptions(pile, multiName) {
    const result = {};
    const optionNames = ["color", "size", "face", "mod", "vadjust"];
    for (let i = 0; i < optionNames.length; ++i) {
      const mod = optionNames[i];
      result[mod] = this.getFontOption(pile, multiName, mod);
    }
    return result;
  }
  /////////////////////////////////////////////////////////
  // End methods for handling options piles
  /////////////////////////////////////////////////////////
  /**
   * Collapse the font options for the multi-font to single objects, from
   * the chain of option objects passed (the 'pile').
   * @param {Pile} pile  sequence of option objects to consider.
   *                     First item in list assumed to be the newly set options.
   */
  propagateFonts(pile) {
    const fontPile = [];
    this.addFontOptionsToPile(fontPile, pile);
    this.fontOptions = this.getBasicOptions(fontPile);
    for (let i = 0; i < multiFontStyle.length; ++i) {
      const mod = multiFontStyle[i];
      const modOptions = this.fontOptions[mod];
      const tmpMultiFontOptions = this.getFontOptions(fontPile, mod);
      forEach$1(tmpMultiFontOptions, (option, n) => {
        modOptions[n] = option;
      });
      modOptions.size = Number(modOptions.size);
      modOptions.vadjust = Number(modOptions.vadjust);
    }
  }
  /**
   * Main function. This is called from anything that wants to draw a label.
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x
   * @param {number} y
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {string} [baseline]
   */
  draw(ctx, x, y, selected, hover) {
    let baseline = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "middle";
    if (this.elementOptions.label === void 0)
      return;
    let viewFontSize = this.fontOptions.size * this.body.view.scale;
    if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1)
      return;
    if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {
      viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;
    }
    this.calculateLabelSize(ctx, selected, hover, x, y, baseline);
    this._drawBackground(ctx);
    this._drawText(ctx, x, this.size.yLine, baseline, viewFontSize);
  }
  /**
   * Draws the label background
   * @param {CanvasRenderingContext2D} ctx
   * @private
   */
  _drawBackground(ctx) {
    if (this.fontOptions.background !== void 0 && this.fontOptions.background !== "none") {
      ctx.fillStyle = this.fontOptions.background;
      const size = this.getSize();
      ctx.fillRect(size.left, size.top, size.width, size.height);
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x
   * @param {number} y
   * @param {string} [baseline]
   * @param {number} viewFontSize
   * @private
   */
  _drawText(ctx, x, y) {
    let baseline = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "middle";
    let viewFontSize = arguments.length > 4 ? arguments[4] : void 0;
    [x, y] = this._setAlignment(ctx, x, y, baseline);
    ctx.textAlign = "left";
    x = x - this.size.width / 2;
    if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {
      if (this.fontOptions.valign === "top") {
        y -= (this.size.height - this.size.labelHeight) / 2;
      }
      if (this.fontOptions.valign === "bottom") {
        y += (this.size.height - this.size.labelHeight) / 2;
      }
    }
    for (let i = 0; i < this.lineCount; i++) {
      const line = this.lines[i];
      if (line && line.blocks) {
        let width = 0;
        if (this.isEdgeLabel || this.fontOptions.align === "center") {
          width += (this.size.width - line.width) / 2;
        } else if (this.fontOptions.align === "right") {
          width += this.size.width - line.width;
        }
        for (let j = 0; j < line.blocks.length; j++) {
          const block = line.blocks[j];
          ctx.font = block.font;
          const [fontColor, strokeColor] = this._getColor(block.color, viewFontSize, block.strokeColor);
          if (block.strokeWidth > 0) {
            ctx.lineWidth = block.strokeWidth;
            ctx.strokeStyle = strokeColor;
            ctx.lineJoin = "round";
          }
          ctx.fillStyle = fontColor;
          if (block.strokeWidth > 0) {
            ctx.strokeText(block.text, x + width, y + block.vadjust);
          }
          ctx.fillText(block.text, x + width, y + block.vadjust);
          width += block.width;
        }
        y += line.height;
      }
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x
   * @param {number} y
   * @param {string} baseline
   * @returns {Array.<number>}
   * @private
   */
  _setAlignment(ctx, x, y, baseline) {
    if (this.isEdgeLabel && this.fontOptions.align !== "horizontal" && this.pointToSelf === false) {
      x = 0;
      y = 0;
      const lineMargin = 2;
      if (this.fontOptions.align === "top") {
        ctx.textBaseline = "alphabetic";
        y -= 2 * lineMargin;
      } else if (this.fontOptions.align === "bottom") {
        ctx.textBaseline = "hanging";
        y += 2 * lineMargin;
      } else {
        ctx.textBaseline = "middle";
      }
    } else {
      ctx.textBaseline = baseline;
    }
    return [x, y];
  }
  /**
   * fade in when relative scale is between threshold and threshold - 1.
   * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
   * @param {string} color  The font color to use
   * @param {number} viewFontSize
   * @param {string} initialStrokeColor
   * @returns {Array.<string>} An array containing the font color and stroke color
   * @private
   */
  _getColor(color, viewFontSize, initialStrokeColor) {
    let fontColor = color || "#000000";
    let strokeColor = initialStrokeColor || "#ffffff";
    if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {
      const opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));
      fontColor = overrideOpacity(fontColor, opacity);
      strokeColor = overrideOpacity(strokeColor, opacity);
    }
    return [fontColor, strokeColor];
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   * @returns {{width: number, height: number}}
   */
  getTextSize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    this._processLabel(ctx, selected, hover);
    return {
      width: this.size.width,
      height: this.size.height,
      lineCount: this.lineCount
    };
  }
  /**
   * Get the current dimensions of the label
   * @returns {rect}
   */
  getSize() {
    const lineMargin = 2;
    let x = this.size.left;
    let y = this.size.top - 0.5 * lineMargin;
    if (this.isEdgeLabel) {
      const x2 = -this.size.width * 0.5;
      switch (this.fontOptions.align) {
        case "middle":
          x = x2;
          y = -this.size.height * 0.5;
          break;
        case "top":
          x = x2;
          y = -(this.size.height + lineMargin);
          break;
        case "bottom":
          x = x2;
          y = lineMargin;
          break;
      }
    }
    const ret = {
      left: x,
      top: y,
      width: this.size.width,
      height: this.size.height
    };
    return ret;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {number} [x]
   * @param {number} [y]
   * @param {'middle'|'hanging'} [baseline]
   */
  calculateLabelSize(ctx, selected, hover) {
    let x = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    let y = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    let baseline = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "middle";
    this._processLabel(ctx, selected, hover);
    this.size.left = x - this.size.width * 0.5;
    this.size.top = y - this.size.height * 0.5;
    this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
    if (baseline === "hanging") {
      this.size.top += 0.5 * this.fontOptions.size;
      this.size.top += 4;
      this.size.yLine += 4;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {string} mod
   * @returns {{color, size, face, mod, vadjust, strokeWidth: *, strokeColor: (*|string|allOptions.edges.font.strokeColor|{string}|allOptions.nodes.font.strokeColor|Array)}}
   */
  getFormattingValues(ctx, selected, hover, mod) {
    const getValue = function(fontOptions, mod2, option) {
      if (mod2 === "normal") {
        if (option === "mod")
          return "";
        return fontOptions[option];
      }
      if (fontOptions[mod2][option] !== void 0) {
        return fontOptions[mod2][option];
      } else {
        return fontOptions[option];
      }
    };
    const values3 = {
      color: getValue(this.fontOptions, mod, "color"),
      size: getValue(this.fontOptions, mod, "size"),
      face: getValue(this.fontOptions, mod, "face"),
      mod: getValue(this.fontOptions, mod, "mod"),
      vadjust: getValue(this.fontOptions, mod, "vadjust"),
      strokeWidth: this.fontOptions.strokeWidth,
      strokeColor: this.fontOptions.strokeColor
    };
    if (selected || hover) {
      if (mod === "normal" && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {
        values3.mod = "bold";
      } else {
        if (typeof this.fontOptions.chooser === "function") {
          this.fontOptions.chooser(values3, this.elementOptions.id, selected, hover);
        }
      }
    }
    let fontString = "";
    if (values3.mod !== void 0 && values3.mod !== "") {
      fontString += values3.mod + " ";
    }
    fontString += values3.size + "px " + values3.face;
    ctx.font = fontString.replace(/"/g, "");
    values3.font = ctx.font;
    values3.height = values3.size;
    return values3;
  }
  /**
   *
   * @param {boolean} selected
   * @param {boolean} hover
   * @returns {boolean}
   */
  differentState(selected, hover) {
    return selected !== this.selectedState || hover !== this.hoverState;
  }
  /**
   * This explodes the passed text into lines and determines the width, height and number of lines.
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {string} inText  the text to explode
   * @returns {{width, height, lines}|*}
   * @private
   */
  _processLabelText(ctx, selected, hover, inText) {
    const splitter = new LabelSplitter(ctx, this, selected, hover);
    return splitter.process(inText);
  }
  /**
   * This explodes the label string into lines and sets the width, height and number of lines.
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   * @private
   */
  _processLabel(ctx, selected, hover) {
    if (this.labelDirty === false && !this.differentState(selected, hover))
      return;
    const state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);
    if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {
      state.width = this.fontOptions.minWdt;
    }
    this.size.labelHeight = state.height;
    if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {
      state.height = this.fontOptions.minHgt;
    }
    this.lines = state.lines;
    this.lineCount = state.lines.length;
    this.size.width = state.width;
    this.size.height = state.height;
    this.selectedState = selected;
    this.hoverState = hover;
    this.labelDirty = false;
  }
  /**
   * Check if this label is visible
   * @returns {boolean} true if this label will be show, false otherwise
   */
  visible() {
    if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === void 0) {
      return false;
    }
    const viewFontSize = this.fontOptions.size * this.body.view.scale;
    if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {
      return false;
    }
    return true;
  }
};
var NodeBase = class {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    this.body = body;
    this.labelModule = labelModule;
    this.setOptions(options2);
    this.top = void 0;
    this.left = void 0;
    this.height = void 0;
    this.width = void 0;
    this.radius = void 0;
    this.margin = void 0;
    this.refreshNeeded = true;
    this.boundingBox = {
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
  }
  /**
   *
   * @param {Label} labelModule
   * @private
   */
  _setMargins(labelModule) {
    this.margin = {};
    if (this.options.margin) {
      if (typeof this.options.margin == "object") {
        this.margin.top = this.options.margin.top;
        this.margin.right = this.options.margin.right;
        this.margin.bottom = this.options.margin.bottom;
        this.margin.left = this.options.margin.left;
      } else {
        this.margin.top = this.options.margin;
        this.margin.right = this.options.margin;
        this.margin.bottom = this.options.margin;
        this.margin.left = this.options.margin;
      }
    }
    labelModule.adjustSizes(this.margin);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   * @private
   */
  _distanceToBorder(ctx, angle) {
    const borderWidth = this.options.borderWidth;
    if (ctx) {
      this.resize(ctx);
    }
    return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  enableShadow(ctx, values3) {
    if (values3.shadow) {
      ctx.shadowColor = values3.shadowColor;
      ctx.shadowBlur = values3.shadowSize;
      ctx.shadowOffsetX = values3.shadowX;
      ctx.shadowOffsetY = values3.shadowY;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  disableShadow(ctx, values3) {
    if (values3.shadow) {
      ctx.shadowColor = "rgba(0,0,0,0)";
      ctx.shadowBlur = 0;
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  enableBorderDashes(ctx, values3) {
    if (values3.borderDashes !== false) {
      if (ctx.setLineDash !== void 0) {
        let dashes = values3.borderDashes;
        if (dashes === true) {
          dashes = [5, 15];
        }
        ctx.setLineDash(dashes);
      } else {
        console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
        this.options.shapeProperties.borderDashes = false;
        values3.borderDashes = false;
      }
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  disableBorderDashes(ctx, values3) {
    if (values3.borderDashes !== false) {
      if (ctx.setLineDash !== void 0) {
        ctx.setLineDash([0]);
      } else {
        console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
        this.options.shapeProperties.borderDashes = false;
        values3.borderDashes = false;
      }
    }
  }
  /**
   * Determine if the shape of a node needs to be recalculated.
   * @param {boolean} selected
   * @param {boolean} hover
   * @returns {boolean}
   * @protected
   */
  needsRefresh(selected, hover) {
    if (this.refreshNeeded === true) {
      this.refreshNeeded = false;
      return true;
    }
    return this.width === void 0 || this.labelModule.differentState(selected, hover);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  initContextForDraw(ctx, values3) {
    const borderWidth = values3.borderWidth / this.body.view.scale;
    ctx.lineWidth = Math.min(this.width, borderWidth);
    ctx.strokeStyle = values3.borderColor;
    ctx.fillStyle = values3.color;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  performStroke(ctx, values3) {
    const borderWidth = values3.borderWidth / this.body.view.scale;
    ctx.save();
    if (borderWidth > 0) {
      this.enableBorderDashes(ctx, values3);
      ctx.stroke();
      this.disableBorderDashes(ctx, values3);
    }
    ctx.restore();
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   */
  performFill(ctx, values3) {
    ctx.save();
    ctx.fillStyle = values3.color;
    this.enableShadow(ctx, values3);
    _fillInstanceProperty(ctx).call(ctx);
    this.disableShadow(ctx, values3);
    ctx.restore();
    this.performStroke(ctx, values3);
  }
  /**
   *
   * @param {number} margin
   * @private
   */
  _addBoundingBoxMargin(margin) {
    this.boundingBox.left -= margin;
    this.boundingBox.top -= margin;
    this.boundingBox.bottom += margin;
    this.boundingBox.right += margin;
  }
  /**
   * Actual implementation of this method call.
   *
   * Doing it like this makes it easier to override
   * in the child classes.
   * @param {number} x width
   * @param {number} y height
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   * @private
   */
  _updateBoundingBox(x, y, ctx, selected, hover) {
    if (ctx !== void 0) {
      this.resize(ctx, selected, hover);
    }
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this.boundingBox.left = this.left;
    this.boundingBox.top = this.top;
    this.boundingBox.bottom = this.top + this.height;
    this.boundingBox.right = this.left + this.width;
  }
  /**
   * Default implementation of this method call.
   * This acts as a stub which can be overridden.
   * @param {number} x width
   * @param {number} y height
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   */
  updateBoundingBox(x, y, ctx, selected, hover) {
    this._updateBoundingBox(x, y, ctx, selected, hover);
  }
  /**
   * Determine the dimensions to use for nodes with an internal label
   *
   * Currently, these are: Circle, Ellipse, Database, Box
   * The other nodes have external labels, and will not call this method
   *
   * If there is no label, decent default values are supplied.
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   * @returns {{width:number, height:number}}
   */
  getDimensionsFromLabel(ctx, selected, hover) {
    this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
    let width = this.textSize.width;
    let height = this.textSize.height;
    const DEFAULT_SIZE = 14;
    if (width === 0) {
      width = DEFAULT_SIZE;
      height = DEFAULT_SIZE;
    }
    return {
      width,
      height
    };
  }
};
var Box$1 = class Box extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this._setMargins(labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   */
  resize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
    if (this.needsRefresh(selected, hover)) {
      const dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
      this.width = dimensions.width + this.margin.right + this.margin.left;
      this.height = dimensions.height + this.margin.top + this.margin.bottom;
      this.radius = this.width / 2;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover);
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this.initContextForDraw(ctx, values3);
    drawRoundRect(ctx, this.left, this.top, this.width, this.height, values3.borderRadius);
    this.performFill(ctx, values3);
    this.updateBoundingBox(x, y, ctx, selected, hover);
    this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
  }
  /**
   *
   * @param {number} x width
   * @param {number} y height
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   */
  updateBoundingBox(x, y, ctx, selected, hover) {
    this._updateBoundingBox(x, y, ctx, selected, hover);
    const borderRadius = this.options.shapeProperties.borderRadius;
    this._addBoundingBoxMargin(borderRadius);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    if (ctx) {
      this.resize(ctx);
    }
    const borderWidth = this.options.borderWidth;
    return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
  }
};
var CircleImageBase = class extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this.labelOffset = 0;
    this.selected = false;
  }
  /**
   *
   * @param {object} options
   * @param {object} [imageObj]
   * @param {object} [imageObjAlt]
   */
  setOptions(options2, imageObj, imageObjAlt) {
    this.options = options2;
    if (!(imageObj === void 0 && imageObjAlt === void 0)) {
      this.setImages(imageObj, imageObjAlt);
    }
  }
  /**
   * Set the images for this node.
   *
   * The images can be updated after the initial setting of options;
   * therefore, this method needs to be reentrant.
   *
   * For correct working in error cases, it is necessary to properly set
   * field 'nodes.brokenImage' in the options.
   * @param {Image} imageObj  required; main image to show for this node
   * @param {Image|undefined} imageObjAlt optional; image to show when node is selected
   */
  setImages(imageObj, imageObjAlt) {
    if (imageObjAlt && this.selected) {
      this.imageObj = imageObjAlt;
      this.imageObjAlt = imageObj;
    } else {
      this.imageObj = imageObj;
      this.imageObjAlt = imageObjAlt;
    }
  }
  /**
   * Set selection and switch between the base and the selected image.
   *
   * Do the switch only if imageObjAlt exists.
   * @param {boolean} selected value of new selected state for current node
   */
  switchImages(selected) {
    const selection_changed = selected && !this.selected || !selected && this.selected;
    this.selected = selected;
    if (this.imageObjAlt !== void 0 && selection_changed) {
      const imageTmp = this.imageObj;
      this.imageObj = this.imageObjAlt;
      this.imageObjAlt = imageTmp;
    }
  }
  /**
   * Returns Image Padding from node options
   * @returns {{top: number,left: number,bottom: number,right: number}} image padding inside this shape
   * @private
   */
  _getImagePadding() {
    const imgPadding = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
    if (this.options.imagePadding) {
      const optImgPadding = this.options.imagePadding;
      if (typeof optImgPadding == "object") {
        imgPadding.top = optImgPadding.top;
        imgPadding.right = optImgPadding.right;
        imgPadding.bottom = optImgPadding.bottom;
        imgPadding.left = optImgPadding.left;
      } else {
        imgPadding.top = optImgPadding;
        imgPadding.right = optImgPadding;
        imgPadding.bottom = optImgPadding;
        imgPadding.left = optImgPadding;
      }
    }
    return imgPadding;
  }
  /**
   * Adjust the node dimensions for a loaded image.
   *
   * Pre: this.imageObj is valid
   */
  _resizeImage() {
    let width, height;
    if (this.options.shapeProperties.useImageSize === false) {
      let ratio_width = 1;
      let ratio_height = 1;
      if (this.imageObj.width && this.imageObj.height) {
        if (this.imageObj.width > this.imageObj.height) {
          ratio_width = this.imageObj.width / this.imageObj.height;
        } else {
          ratio_height = this.imageObj.height / this.imageObj.width;
        }
      }
      width = this.options.size * 2 * ratio_width;
      height = this.options.size * 2 * ratio_height;
    } else {
      const imgPadding = this._getImagePadding();
      width = this.imageObj.width + imgPadding.left + imgPadding.right;
      height = this.imageObj.height + imgPadding.top + imgPadding.bottom;
    }
    this.width = width;
    this.height = height;
    this.radius = 0.5 * this.width;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {ArrowOptions} values
   * @private
   */
  _drawRawCircle(ctx, x, y, values3) {
    this.initContextForDraw(ctx, values3);
    drawCircle(ctx, x, y, values3.size);
    this.performFill(ctx, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {ArrowOptions} values
   * @private
   */
  _drawImageAtPosition(ctx, values3) {
    if (this.imageObj.width != 0) {
      ctx.globalAlpha = values3.opacity !== void 0 ? values3.opacity : 1;
      this.enableShadow(ctx, values3);
      let factor = 1;
      if (this.options.shapeProperties.interpolation === true) {
        factor = this.imageObj.width / this.width / this.body.view.scale;
      }
      const imgPadding = this._getImagePadding();
      const imgPosLeft = this.left + imgPadding.left;
      const imgPosTop = this.top + imgPadding.top;
      const imgWidth = this.width - imgPadding.left - imgPadding.right;
      const imgHeight = this.height - imgPadding.top - imgPadding.bottom;
      this.imageObj.drawImageAtPosition(ctx, factor, imgPosLeft, imgPosTop, imgWidth, imgHeight);
      this.disableShadow(ctx, values3);
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @private
   */
  _drawImageLabel(ctx, x, y, selected, hover) {
    let offset = 0;
    if (this.height !== void 0) {
      offset = this.height * 0.5;
      const labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);
      if (labelDimensions.lineCount >= 1) {
        offset += labelDimensions.height / 2;
      }
    }
    const yLabel = y + offset;
    if (this.options.label) {
      this.labelOffset = offset;
    }
    this.labelModule.draw(ctx, x, yLabel, selected, hover, "hanging");
  }
};
var Circle$1 = class Circle extends CircleImageBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this._setMargins(labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   */
  resize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
    if (this.needsRefresh(selected, hover)) {
      const dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
      const diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);
      this.options.size = diameter / 2;
      this.width = diameter;
      this.height = diameter;
      this.radius = this.width / 2;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover);
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this._drawRawCircle(ctx, x, y, values3);
    this.updateBoundingBox(x, y);
    this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);
  }
  /**
   *
   * @param {number} x width
   * @param {number} y height
   */
  updateBoundingBox(x, y) {
    this.boundingBox.top = y - this.options.size;
    this.boundingBox.left = x - this.options.size;
    this.boundingBox.right = x + this.options.size;
    this.boundingBox.bottom = y + this.options.size;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @returns {number}
   */
  distanceToBorder(ctx) {
    if (ctx) {
      this.resize(ctx);
    }
    return this.width * 0.5;
  }
};
var CircularImage = class extends CircleImageBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   * @param {Image} imageObj
   * @param {Image} imageObjAlt
   */
  constructor(options2, body, labelModule, imageObj, imageObjAlt) {
    super(options2, body, labelModule);
    this.setImages(imageObj, imageObjAlt);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   */
  resize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
    const imageAbsent = this.imageObj.src === void 0 || this.imageObj.width === void 0 || this.imageObj.height === void 0;
    if (imageAbsent) {
      const diameter = this.options.size * 2;
      this.width = diameter;
      this.height = diameter;
      this.radius = 0.5 * this.width;
      return;
    }
    if (this.needsRefresh(selected, hover)) {
      this._resizeImage();
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.switchImages(selected);
    this.resize();
    let labelX = x, labelY = y;
    if (this.options.shapeProperties.coordinateOrigin === "top-left") {
      this.left = x;
      this.top = y;
      labelX += this.width / 2;
      labelY += this.height / 2;
    } else {
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
    }
    this._drawRawCircle(ctx, labelX, labelY, values3);
    ctx.save();
    ctx.clip();
    this._drawImageAtPosition(ctx, values3);
    ctx.restore();
    this._drawImageLabel(ctx, labelX, labelY, selected, hover);
    this.updateBoundingBox(x, y);
  }
  // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here
  /**
   *
   * @param {number} x width
   * @param {number} y height
   */
  updateBoundingBox(x, y) {
    if (this.options.shapeProperties.coordinateOrigin === "top-left") {
      this.boundingBox.top = y;
      this.boundingBox.left = x;
      this.boundingBox.right = x + this.options.size * 2;
      this.boundingBox.bottom = y + this.options.size * 2;
    } else {
      this.boundingBox.top = y - this.options.size;
      this.boundingBox.left = x - this.options.size;
      this.boundingBox.right = x + this.options.size;
      this.boundingBox.bottom = y + this.options.size;
    }
    this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
    this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
    this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @returns {number}
   */
  distanceToBorder(ctx) {
    if (ctx) {
      this.resize(ctx);
    }
    return this.width * 0.5;
  }
};
var ShapeBase = class extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   * @param {object} [values]
   */
  resize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
    let values3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      size: this.options.size
    };
    if (this.needsRefresh(selected, hover)) {
      var _this$customSizeWidth, _this$customSizeHeigh;
      this.labelModule.getTextSize(ctx, selected, hover);
      const size = 2 * values3.size;
      this.width = (_this$customSizeWidth = this.customSizeWidth) !== null && _this$customSizeWidth !== void 0 ? _this$customSizeWidth : size;
      this.height = (_this$customSizeHeigh = this.customSizeHeight) !== null && _this$customSizeHeigh !== void 0 ? _this$customSizeHeigh : size;
      this.radius = 0.5 * this.width;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {string} shape
   * @param {number} sizeMultiplier - Unused! TODO: Remove next major release
   * @param {number} x
   * @param {number} y
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @private
   * @returns {object} Callbacks to draw later on higher layers.
   */
  _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover, values3);
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this.initContextForDraw(ctx, values3);
    getShape(shape)(ctx, x, y, values3.size);
    this.performFill(ctx, values3);
    if (this.options.icon !== void 0) {
      if (this.options.icon.code !== void 0) {
        ctx.font = (selected ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome");
        ctx.fillStyle = this.options.icon.color || "black";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.fillText(this.options.icon.code, x, y);
      }
    }
    return {
      drawExternalLabel: () => {
        if (this.options.label !== void 0) {
          this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, "hanging");
          const yLabel = y + 0.5 * this.height + 0.5 * this.labelModule.size.height;
          this.labelModule.draw(ctx, x, yLabel, selected, hover, "hanging");
        }
        this.updateBoundingBox(x, y);
      }
    };
  }
  /**
   *
   * @param {number} x
   * @param {number} y
   */
  updateBoundingBox(x, y) {
    this.boundingBox.top = y - this.options.size;
    this.boundingBox.left = x - this.options.size;
    this.boundingBox.right = x + this.options.size;
    this.boundingBox.bottom = y + this.options.size;
    if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);
    }
  }
};
function ownKeys$3(e, r) {
  var t = _Object$keys(e);
  if (_Object$getOwnPropertySymbols) {
    var o = _Object$getOwnPropertySymbols(e);
    r && (o = _filterInstanceProperty(o).call(o, function(r2) {
      return _Object$getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var _context, _context2;
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? _forEachInstanceProperty(_context = ownKeys$3(Object(t), true)).call(_context, function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$3(Object(t))).call(_context2, function(r2) {
      _Object$defineProperty(e, r2, _Object$getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var CustomShape = class extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   * @param {Function} ctxRenderer
   */
  constructor(options2, body, labelModule, ctxRenderer) {
    super(options2, body, labelModule, ctxRenderer);
    this.ctxRenderer = ctxRenderer;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on different layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover, values3);
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    ctx.save();
    const drawLater = this.ctxRenderer({
      ctx,
      id: this.options.id,
      x,
      y,
      state: {
        selected,
        hover
      },
      style: _objectSpread$3({}, values3),
      label: this.options.label
    });
    if (drawLater.drawNode != null) {
      drawLater.drawNode();
    }
    ctx.restore();
    if (drawLater.drawExternalLabel) {
      const drawExternalLabel = drawLater.drawExternalLabel;
      drawLater.drawExternalLabel = () => {
        ctx.save();
        drawExternalLabel();
        ctx.restore();
      };
    }
    if (drawLater.nodeDimensions) {
      this.customSizeWidth = drawLater.nodeDimensions.width;
      this.customSizeHeight = drawLater.nodeDimensions.height;
    }
    return drawLater;
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Database = class extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this._setMargins(labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   */
  resize(ctx, selected, hover) {
    if (this.needsRefresh(selected, hover)) {
      const dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
      const size = dimensions.width + this.margin.right + this.margin.left;
      this.width = size;
      this.height = size;
      this.radius = this.width / 2;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover);
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this.initContextForDraw(ctx, values3);
    drawDatabase(ctx, x - this.width / 2, y - this.height / 2, this.width, this.height);
    this.performFill(ctx, values3);
    this.updateBoundingBox(x, y, ctx, selected, hover);
    this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Diamond$1 = class Diamond extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "diamond", 4, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Dot = class extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "circle", 2, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @returns {number}
   */
  distanceToBorder(ctx) {
    if (ctx) {
      this.resize(ctx);
    }
    return this.options.size;
  }
};
var Ellipse = class extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   */
  resize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
    if (this.needsRefresh(selected, hover)) {
      const dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
      this.height = dimensions.height * 2;
      this.width = dimensions.width + dimensions.height;
      this.radius = 0.5 * this.width;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover);
    this.left = x - this.width * 0.5;
    this.top = y - this.height * 0.5;
    this.initContextForDraw(ctx, values3);
    drawEllipse(ctx, this.left, this.top, this.width, this.height);
    this.performFill(ctx, values3);
    this.updateBoundingBox(x, y, ctx, selected, hover);
    this.labelModule.draw(ctx, x, y, selected, hover);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    if (ctx) {
      this.resize(ctx);
    }
    const a = this.width * 0.5;
    const b = this.height * 0.5;
    const w = Math.sin(angle) * a;
    const h = Math.cos(angle) * b;
    return a * b / Math.sqrt(w * w + h * h);
  }
};
var Icon = class extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this._setMargins(labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx - Unused.
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   */
  resize(ctx, selected, hover) {
    if (this.needsRefresh(selected, hover)) {
      this.iconSize = {
        width: Number(this.options.icon.size),
        height: Number(this.options.icon.size)
      };
      this.width = this.iconSize.width + this.margin.right + this.margin.left;
      this.height = this.iconSize.height + this.margin.top + this.margin.bottom;
      this.radius = 0.5 * this.width;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover);
    this.options.icon.size = this.options.icon.size || 50;
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this._icon(ctx, x, y, selected, hover, values3);
    return {
      drawExternalLabel: () => {
        if (this.options.label !== void 0) {
          const iconTextSpacing = 5;
          this.labelModule.draw(ctx, this.left + this.iconSize.width / 2 + this.margin.left, y + this.height / 2 + iconTextSpacing, selected);
        }
        this.updateBoundingBox(x, y);
      }
    };
  }
  /**
   *
   * @param {number} x
   * @param {number} y
   */
  updateBoundingBox(x, y) {
    this.boundingBox.top = y - this.options.icon.size * 0.5;
    this.boundingBox.left = x - this.options.icon.size * 0.5;
    this.boundingBox.right = x + this.options.icon.size * 0.5;
    this.boundingBox.bottom = y + this.options.icon.size * 0.5;
    if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
      const iconTextSpacing = 5;
      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover - Unused
   * @param {ArrowOptions} values
   */
  _icon(ctx, x, y, selected, hover, values3) {
    const iconSize = Number(this.options.icon.size);
    if (this.options.icon.code !== void 0) {
      ctx.font = [
        this.options.icon.weight != null ? this.options.icon.weight : selected ? "bold" : "",
        // If the weight is forced (for example to make Font Awesome 5 work
        // properly) substitute slightly bigger size for bold font face.
        (this.options.icon.weight != null && selected ? 5 : 0) + iconSize + "px",
        this.options.icon.face
      ].join(" ");
      ctx.fillStyle = this.options.icon.color || "black";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      this.enableShadow(ctx, values3);
      ctx.fillText(this.options.icon.code, x, y);
      this.disableShadow(ctx, values3);
    } else {
      console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Image$2 = class Image2 extends CircleImageBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   * @param {Image} imageObj
   * @param {Image} imageObjAlt
   */
  constructor(options2, body, labelModule, imageObj, imageObjAlt) {
    super(options2, body, labelModule);
    this.setImages(imageObj, imageObjAlt);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx - Unused.
   * @param {boolean} [selected]
   * @param {boolean} [hover]
   */
  resize(ctx) {
    let selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
    let hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
    const imageAbsent = this.imageObj.src === void 0 || this.imageObj.width === void 0 || this.imageObj.height === void 0;
    if (imageAbsent) {
      const side = this.options.size * 2;
      this.width = side;
      this.height = side;
      return;
    }
    if (this.needsRefresh(selected, hover)) {
      this._resizeImage();
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    ctx.save();
    this.switchImages(selected);
    this.resize();
    let labelX = x, labelY = y;
    if (this.options.shapeProperties.coordinateOrigin === "top-left") {
      this.left = x;
      this.top = y;
      labelX += this.width / 2;
      labelY += this.height / 2;
    } else {
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
    }
    if (this.options.shapeProperties.useBorderWithImage === true) {
      const neutralborderWidth = this.options.borderWidth;
      const selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
      const borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
      ctx.lineWidth = Math.min(this.width, borderWidth);
      ctx.beginPath();
      let strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;
      let fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
      if (values3.opacity !== void 0) {
        strokeStyle = overrideOpacity(strokeStyle, values3.opacity);
        fillStyle = overrideOpacity(fillStyle, values3.opacity);
      }
      ctx.strokeStyle = strokeStyle;
      ctx.fillStyle = fillStyle;
      ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
      _fillInstanceProperty(ctx).call(ctx);
      this.performStroke(ctx, values3);
      ctx.closePath();
    }
    this._drawImageAtPosition(ctx, values3);
    this._drawImageLabel(ctx, labelX, labelY, selected, hover);
    this.updateBoundingBox(x, y);
    ctx.restore();
  }
  /**
   *
   * @param {number} x
   * @param {number} y
   */
  updateBoundingBox(x, y) {
    this.resize();
    if (this.options.shapeProperties.coordinateOrigin === "top-left") {
      this.left = x;
      this.top = y;
    } else {
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
    }
    this.boundingBox.left = this.left;
    this.boundingBox.top = this.top;
    this.boundingBox.bottom = this.top + this.height;
    this.boundingBox.right = this.left + this.width;
    if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Square = class extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "square", 2, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Hexagon = class extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "hexagon", 4, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Star = class extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "star", 4, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Text = class extends NodeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this._setMargins(labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {boolean} selected
   * @param {boolean} hover
   */
  resize(ctx, selected, hover) {
    if (this.needsRefresh(selected, hover)) {
      this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
      this.width = this.textSize.width + this.margin.right + this.margin.left;
      this.height = this.textSize.height + this.margin.top + this.margin.bottom;
      this.radius = 0.5 * this.width;
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x width
   * @param {number} y height
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   */
  draw(ctx, x, y, selected, hover, values3) {
    this.resize(ctx, selected, hover);
    this.left = x - this.width / 2;
    this.top = y - this.height / 2;
    this.enableShadow(ctx, values3);
    this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
    this.disableShadow(ctx, values3);
    this.updateBoundingBox(x, y, ctx, selected, hover);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var Triangle$1 = class Triangle extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x
   * @param {number} y
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "triangle", 3, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
var TriangleDown = class extends ShapeBase {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Label} labelModule
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} x
   * @param {number} y
   * @param {boolean} selected
   * @param {boolean} hover
   * @param {ArrowOptions} values
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx, x, y, selected, hover, values3) {
    return this._drawShape(ctx, "triangleDown", 3, x, y, selected, hover, values3);
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {number} angle
   * @returns {number}
   */
  distanceToBorder(ctx, angle) {
    return this._distanceToBorder(ctx, angle);
  }
};
function ownKeys$2(e, r) {
  var t = _Object$keys(e);
  if (_Object$getOwnPropertySymbols) {
    var o = _Object$getOwnPropertySymbols(e);
    r && (o = _filterInstanceProperty(o).call(o, function(r2) {
      return _Object$getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var _context5, _context6;
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? _forEachInstanceProperty(_context5 = ownKeys$2(Object(t), true)).call(_context5, function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context6 = ownKeys$2(Object(t))).call(_context6, function(r2) {
      _Object$defineProperty(e, r2, _Object$getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var Node = class _Node {
  /**
   *
   * @param {object} options An object containing options for the node. All
   *                            options are optional, except for the id.
   *                              {number} id     Id of the node. Required
   *                              {string} label  Text label for the node
   *                              {number} x      Horizontal position of the node
   *                              {number} y      Vertical position of the node
   *                              {string} shape  Node shape
   *                              {string} image  An image url
   *                              {string} title  A title text, can be HTML
   *                              {anytype} group A group name or number
   * @param {object} body               Shared state of current network instance
   * @param {Network.Images} imagelist  A list with images. Only needed when the node has an image
   * @param {Groups} grouplist          A list with groups. Needed for retrieving group options
   * @param {object} globalOptions      Current global node options; these serve as defaults for the node instance
   * @param {object} defaultOptions     Global default options for nodes; note that this is also the prototype
   *                                    for parameter `globalOptions`.
   */
  constructor(options2, body, imagelist, grouplist, globalOptions, defaultOptions) {
    this.options = bridgeObject(globalOptions);
    this.globalOptions = globalOptions;
    this.defaultOptions = defaultOptions;
    this.body = body;
    this.edges = [];
    this.id = void 0;
    this.imagelist = imagelist;
    this.grouplist = grouplist;
    this.x = void 0;
    this.y = void 0;
    this.baseSize = this.options.size;
    this.baseFontSize = this.options.font.size;
    this.predefinedPosition = false;
    this.selected = false;
    this.hover = false;
    this.labelModule = new Label(
      this.body,
      this.options,
      false
      /* Not edge label */
    );
    this.setOptions(options2);
  }
  /**
   * Attach a edge to the node
   * @param {Edge} edge
   */
  attachEdge(edge) {
    var _context;
    if (_indexOfInstanceProperty(_context = this.edges).call(_context, edge) === -1) {
      this.edges.push(edge);
    }
  }
  /**
   * Detach a edge from the node
   * @param {Edge} edge
   */
  detachEdge(edge) {
    var _context2;
    const index2 = _indexOfInstanceProperty(_context2 = this.edges).call(_context2, edge);
    if (index2 != -1) {
      var _context3;
      _spliceInstanceProperty(_context3 = this.edges).call(_context3, index2, 1);
    }
  }
  /**
   * Set or overwrite options for the node
   * @param {object} options an object with options
   * @returns {null|boolean}
   */
  setOptions(options2) {
    const currentShape = this.options.shape;
    if (!options2) {
      return;
    }
    if (typeof options2.color !== "undefined") {
      this._localColor = options2.color;
    }
    if (options2.id !== void 0) {
      this.id = options2.id;
    }
    if (this.id === void 0) {
      throw new Error("Node must have an id");
    }
    _Node.checkMass(options2, this.id);
    if (options2.x !== void 0) {
      if (options2.x === null) {
        this.x = void 0;
        this.predefinedPosition = false;
      } else {
        this.x = _parseInt$1(options2.x);
        this.predefinedPosition = true;
      }
    }
    if (options2.y !== void 0) {
      if (options2.y === null) {
        this.y = void 0;
        this.predefinedPosition = false;
      } else {
        this.y = _parseInt$1(options2.y);
        this.predefinedPosition = true;
      }
    }
    if (options2.size !== void 0) {
      this.baseSize = options2.size;
    }
    if (options2.value !== void 0) {
      options2.value = _parseFloat$1(options2.value);
    }
    _Node.parseOptions(this.options, options2, true, this.globalOptions, this.grouplist);
    const pile = [options2, this.options, this.defaultOptions];
    this.chooser = choosify("node", pile);
    this._load_images();
    this.updateLabelModule(options2);
    if (options2.opacity !== void 0 && _Node.checkOpacity(options2.opacity)) {
      this.options.opacity = options2.opacity;
    }
    this.updateShape(currentShape);
    return options2.hidden !== void 0 || options2.physics !== void 0;
  }
  /**
   * Load the images from the options, for the nodes that need them.
   *
   * Images are always loaded, even if they are not used in the current shape.
   * The user may switch to an image shape later on.
   * @private
   */
  _load_images() {
    if (this.options.shape === "circularImage" || this.options.shape === "image") {
      if (this.options.image === void 0) {
        throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
      }
    }
    if (this.options.image === void 0) {
      return;
    }
    if (this.imagelist === void 0) {
      throw new Error("Internal Error: No images provided");
    }
    if (typeof this.options.image === "string") {
      this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
    } else {
      if (this.options.image.unselected === void 0) {
        throw new Error("No unselected image provided");
      }
      this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);
      if (this.options.image.selected !== void 0) {
        this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);
      } else {
        this.imageObjAlt = void 0;
      }
    }
  }
  /**
   * Check that opacity is only between 0 and 1
   * @param {number} opacity
   * @returns {boolean}
   */
  static checkOpacity(opacity) {
    return 0 <= opacity && opacity <= 1;
  }
  /**
   * Check that origin is 'center' or 'top-left'
   * @param {string} origin
   * @returns {boolean}
   */
  static checkCoordinateOrigin(origin) {
    return origin === void 0 || origin === "center" || origin === "top-left";
  }
  /**
   * Copy group option values into the node options.
   *
   * The group options override the global node options, so the copy of group options
   * must happen *after* the global node options have been set.
   *
   * This method must also be called also if the global node options have changed and the group options did not.
   * @param {object} parentOptions
   * @param {object} newOptions  new values for the options, currently only passed in for check
   * @param {object} groupList
   */
  static updateGroupOptions(parentOptions, newOptions, groupList) {
    var _context4;
    if (groupList === void 0)
      return;
    const group = parentOptions.group;
    if (newOptions !== void 0 && newOptions.group !== void 0 && group !== newOptions.group) {
      throw new Error("updateGroupOptions: group values in options don't match.");
    }
    const hasGroup = typeof group === "number" || typeof group === "string" && group != "";
    if (!hasGroup)
      return;
    const groupObj = groupList.get(group);
    if (groupObj.opacity !== void 0 && newOptions.opacity === void 0) {
      if (!_Node.checkOpacity(groupObj.opacity)) {
        console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + groupObj.opacity);
        groupObj.opacity = void 0;
      }
    }
    const skipProperties = _filterInstanceProperty(_context4 = _Object$getOwnPropertyNames(newOptions)).call(_context4, (p) => newOptions[p] != null);
    skipProperties.push("font");
    selectiveNotDeepExtend(skipProperties, parentOptions, groupObj);
    parentOptions.color = parseColor(parentOptions.color);
  }
  /**
   * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
   * Static so it can also be used by the handler.
   * @param {object} parentOptions
   * @param {object} newOptions
   * @param {boolean} [allowDeletion]
   * @param {object} [globalOptions]
   * @param {object} [groupList]
   * @static
   */
  static parseOptions(parentOptions, newOptions) {
    let allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    let globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let groupList = arguments.length > 4 ? arguments[4] : void 0;
    const fields = ["color", "fixed", "shadow"];
    selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);
    _Node.checkMass(newOptions);
    if (parentOptions.opacity !== void 0) {
      if (!_Node.checkOpacity(parentOptions.opacity)) {
        console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + parentOptions.opacity);
        parentOptions.opacity = void 0;
      }
    }
    if (newOptions.opacity !== void 0) {
      if (!_Node.checkOpacity(newOptions.opacity)) {
        console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + newOptions.opacity);
        newOptions.opacity = void 0;
      }
    }
    if (newOptions.shapeProperties && !_Node.checkCoordinateOrigin(newOptions.shapeProperties.coordinateOrigin)) {
      console.error("Invalid option for node coordinateOrigin, found: " + newOptions.shapeProperties.coordinateOrigin);
    }
    mergeOptions(parentOptions, newOptions, "shadow", globalOptions);
    if (newOptions.color !== void 0 && newOptions.color !== null) {
      const parsedColor = parseColor(newOptions.color);
      fillIfDefined(parentOptions.color, parsedColor);
    } else if (allowDeletion === true && newOptions.color === null) {
      parentOptions.color = bridgeObject(globalOptions.color);
    }
    if (newOptions.fixed !== void 0 && newOptions.fixed !== null) {
      if (typeof newOptions.fixed === "boolean") {
        parentOptions.fixed.x = newOptions.fixed;
        parentOptions.fixed.y = newOptions.fixed;
      } else {
        if (newOptions.fixed.x !== void 0 && typeof newOptions.fixed.x === "boolean") {
          parentOptions.fixed.x = newOptions.fixed.x;
        }
        if (newOptions.fixed.y !== void 0 && typeof newOptions.fixed.y === "boolean") {
          parentOptions.fixed.y = newOptions.fixed.y;
        }
      }
    }
    if (allowDeletion === true && newOptions.font === null) {
      parentOptions.font = bridgeObject(globalOptions.font);
    }
    _Node.updateGroupOptions(parentOptions, newOptions, groupList);
    if (newOptions.scaling !== void 0) {
      mergeOptions(parentOptions.scaling, newOptions.scaling, "label", globalOptions.scaling);
    }
  }
  /**
   *
   * @returns {{color: *, borderWidth: *, borderColor: *, size: *, borderDashes: (boolean|Array|allOptions.nodes.shapeProperties.borderDashes|{boolean, array}), borderRadius: (number|allOptions.nodes.shapeProperties.borderRadius|{number}|Array), shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *}}
   */
  getFormattingValues() {
    const values3 = {
      color: this.options.color.background,
      opacity: this.options.opacity,
      borderWidth: this.options.borderWidth,
      borderColor: this.options.color.border,
      size: this.options.size,
      borderDashes: this.options.shapeProperties.borderDashes,
      borderRadius: this.options.shapeProperties.borderRadius,
      shadow: this.options.shadow.enabled,
      shadowColor: this.options.shadow.color,
      shadowSize: this.options.shadow.size,
      shadowX: this.options.shadow.x,
      shadowY: this.options.shadow.y
    };
    if (this.selected || this.hover) {
      if (this.chooser === true) {
        if (this.selected) {
          if (this.options.borderWidthSelected != null) {
            values3.borderWidth = this.options.borderWidthSelected;
          } else {
            values3.borderWidth *= 2;
          }
          values3.color = this.options.color.highlight.background;
          values3.borderColor = this.options.color.highlight.border;
          values3.shadow = this.options.shadow.enabled;
        } else if (this.hover) {
          values3.color = this.options.color.hover.background;
          values3.borderColor = this.options.color.hover.border;
          values3.shadow = this.options.shadow.enabled;
        }
      } else if (typeof this.chooser === "function") {
        this.chooser(values3, this.options.id, this.selected, this.hover);
        if (values3.shadow === false) {
          if (values3.shadowColor !== this.options.shadow.color || values3.shadowSize !== this.options.shadow.size || values3.shadowX !== this.options.shadow.x || values3.shadowY !== this.options.shadow.y) {
            values3.shadow = true;
          }
        }
      }
    } else {
      values3.shadow = this.options.shadow.enabled;
    }
    if (this.options.opacity !== void 0) {
      const opacity = this.options.opacity;
      values3.borderColor = overrideOpacity(values3.borderColor, opacity);
      values3.color = overrideOpacity(values3.color, opacity);
      values3.shadowColor = overrideOpacity(values3.shadowColor, opacity);
    }
    return values3;
  }
  /**
   *
   * @param {object} options
   */
  updateLabelModule(options2) {
    if (this.options.label === void 0 || this.options.label === null) {
      this.options.label = "";
    }
    _Node.updateGroupOptions(this.options, _objectSpread$2(_objectSpread$2({}, options2), {}, {
      color: options2 && options2.color || this._localColor || void 0
    }), this.grouplist);
    const currentGroup = this.grouplist.get(this.options.group, false);
    const pile = [
      options2,
      // new options
      this.options,
      // current node options, see comment above for prototype
      currentGroup,
      // group options, if any
      this.globalOptions,
      // Currently set global node options
      this.defaultOptions
      // Default global node options
    ];
    this.labelModule.update(this.options, pile);
    if (this.labelModule.baseSize !== void 0) {
      this.baseFontSize = this.labelModule.baseSize;
    }
  }
  /**
   *
   * @param {string} currentShape
   */
  updateShape(currentShape) {
    if (currentShape === this.options.shape && this.shape) {
      this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
    } else {
      switch (this.options.shape) {
        case "box":
          this.shape = new Box$1(this.options, this.body, this.labelModule);
          break;
        case "circle":
          this.shape = new Circle$1(this.options, this.body, this.labelModule);
          break;
        case "circularImage":
          this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
          break;
        case "custom":
          this.shape = new CustomShape(this.options, this.body, this.labelModule, this.options.ctxRenderer);
          break;
        case "database":
          this.shape = new Database(this.options, this.body, this.labelModule);
          break;
        case "diamond":
          this.shape = new Diamond$1(this.options, this.body, this.labelModule);
          break;
        case "dot":
          this.shape = new Dot(this.options, this.body, this.labelModule);
          break;
        case "ellipse":
          this.shape = new Ellipse(this.options, this.body, this.labelModule);
          break;
        case "icon":
          this.shape = new Icon(this.options, this.body, this.labelModule);
          break;
        case "image":
          this.shape = new Image$2(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
          break;
        case "square":
          this.shape = new Square(this.options, this.body, this.labelModule);
          break;
        case "hexagon":
          this.shape = new Hexagon(this.options, this.body, this.labelModule);
          break;
        case "star":
          this.shape = new Star(this.options, this.body, this.labelModule);
          break;
        case "text":
          this.shape = new Text(this.options, this.body, this.labelModule);
          break;
        case "triangle":
          this.shape = new Triangle$1(this.options, this.body, this.labelModule);
          break;
        case "triangleDown":
          this.shape = new TriangleDown(this.options, this.body, this.labelModule);
          break;
        default:
          this.shape = new Ellipse(this.options, this.body, this.labelModule);
          break;
      }
    }
    this.needsRefresh();
  }
  /**
   * select this node
   */
  select() {
    this.selected = true;
    this.needsRefresh();
  }
  /**
   * unselect this node
   */
  unselect() {
    this.selected = false;
    this.needsRefresh();
  }
  /**
   * Reset the calculated size of the node, forces it to recalculate its size
   */
  needsRefresh() {
    this.shape.refreshNeeded = true;
  }
  /**
   * get the title of this node.
   * @returns {string} title    The title of the node, or undefined when no title
   *                           has been set.
   */
  getTitle() {
    return this.options.title;
  }
  /**
   * Calculate the distance to the border of the Node
   * @param {CanvasRenderingContext2D}   ctx
   * @param {number} angle        Angle in radians
   * @returns {number} distance   Distance to the border in pixels
   */
  distanceToBorder(ctx, angle) {
    return this.shape.distanceToBorder(ctx, angle);
  }
  /**
   * Check if this node has a fixed x and y position
   * @returns {boolean}      true if fixed, false if not
   */
  isFixed() {
    return this.options.fixed.x && this.options.fixed.y;
  }
  /**
   * check if this node is selecte
   * @returns {boolean} selected   True if node is selected, else false
   */
  isSelected() {
    return this.selected;
  }
  /**
   * Retrieve the value of the node. Can be undefined
   * @returns {number} value
   */
  getValue() {
    return this.options.value;
  }
  /**
   * Get the current dimensions of the label
   * @returns {rect}
   */
  getLabelSize() {
    return this.labelModule.size();
  }
  /**
   * Adjust the value range of the node. The node will adjust it's size
   * based on its value.
   * @param {number} min
   * @param {number} max
   * @param {number} total
   */
  setValueRange(min2, max2, total) {
    if (this.options.value !== void 0) {
      const scale = this.options.scaling.customScalingFunction(min2, max2, total, this.options.value);
      const sizeDiff = this.options.scaling.max - this.options.scaling.min;
      if (this.options.scaling.label.enabled === true) {
        const fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
        this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
      }
      this.options.size = this.options.scaling.min + scale * sizeDiff;
    } else {
      this.options.size = this.baseSize;
      this.options.font.size = this.baseFontSize;
    }
    this.updateLabelModule();
  }
  /**
   * Draw this node in the given canvas
   * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
   * @param {CanvasRenderingContext2D}   ctx
   * @returns {object} Callbacks to draw later on higher layers.
   */
  draw(ctx) {
    const values3 = this.getFormattingValues();
    return this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values3) || {};
  }
  /**
   * Update the bounding box of the shape
   * @param {CanvasRenderingContext2D}   ctx
   */
  updateBoundingBox(ctx) {
    this.shape.updateBoundingBox(this.x, this.y, ctx);
  }
  /**
   * Recalculate the size of this node in the given canvas
   * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
   * @param {CanvasRenderingContext2D}   ctx
   */
  resize(ctx) {
    const values3 = this.getFormattingValues();
    this.shape.resize(ctx, this.selected, this.hover, values3);
  }
  /**
   * Determine all visual elements of this node instance, in which the given
   * point falls within the bounding shape.
   * @param {point} point
   * @returns {Array.<nodeClickItem|nodeLabelClickItem>} list with the items which are on the point
   */
  getItemsOnPoint(point) {
    const ret = [];
    if (this.labelModule.visible()) {
      if (pointInRect(this.labelModule.getSize(), point)) {
        ret.push({
          nodeId: this.id,
          labelId: 0
        });
      }
    }
    if (pointInRect(this.shape.boundingBox, point)) {
      ret.push({
        nodeId: this.id
      });
    }
    return ret;
  }
  /**
   * Check if this object is overlapping with the provided object
   * @param {object} obj   an object with parameters left, top, right, bottom
   * @returns {boolean}     True if location is located on node
   */
  isOverlappingWith(obj) {
    return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
  }
  /**
   * Check if this object is overlapping with the provided object
   * @param {object} obj   an object with parameters left, top, right, bottom
   * @returns {boolean}     True if location is located on node
   */
  isBoundingBoxOverlappingWith(obj) {
    return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
  }
  /**
   * Check valid values for mass
   *
   * The mass may not be negative or zero. If it is, reset to 1
   * @param {object} options
   * @param {Node.id} id
   * @static
   */
  static checkMass(options2, id2) {
    if (options2.mass !== void 0 && options2.mass <= 0) {
      let strId = "";
      if (id2 !== void 0) {
        strId = " in node id: " + id2;
      }
      console.error("%cNegative or zero mass disallowed" + strId + ", setting mass to 1.", VALIDATOR_PRINT_STYLE);
      options2.mass = 1;
    }
  }
};
var NodesHandler = class {
  /**
   * @param {object} body
   * @param {Images} images
   * @param {Array.<Group>} groups
   * @param {LayoutEngine} layoutEngine
   */
  constructor(body, images, groups, layoutEngine) {
    var _context;
    this.body = body;
    this.images = images;
    this.groups = groups;
    this.layoutEngine = layoutEngine;
    this.body.functions.createNode = _bindInstanceProperty(_context = this.create).call(_context, this);
    this.nodesListeners = {
      add: (event, params) => {
        this.add(params.items);
      },
      update: (event, params) => {
        this.update(params.items, params.data, params.oldData);
      },
      remove: (event, params) => {
        this.remove(params.items);
      }
    };
    this.defaultOptions = {
      borderWidth: 1,
      borderWidthSelected: void 0,
      brokenImage: void 0,
      color: {
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      },
      opacity: void 0,
      // number between 0 and 1
      fixed: {
        x: false,
        y: false
      },
      font: {
        color: "#343434",
        size: 14,
        // px
        face: "arial",
        background: "none",
        strokeWidth: 0,
        // px
        strokeColor: "#ffffff",
        align: "center",
        vadjust: 0,
        multi: false,
        bold: {
          mod: "bold"
        },
        boldital: {
          mod: "bold italic"
        },
        ital: {
          mod: "italic"
        },
        mono: {
          mod: "",
          size: 15,
          // px
          face: "monospace",
          vadjust: 2
        }
      },
      group: void 0,
      hidden: false,
      icon: {
        face: "FontAwesome",
        //'FontAwesome',
        code: void 0,
        //'\uf007',
        size: 50,
        //50,
        color: "#2B7CE9"
        //'#aa00ff'
      },
      image: void 0,
      // --> URL
      imagePadding: {
        // only for image shape
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      label: void 0,
      labelHighlightBold: true,
      level: void 0,
      margin: {
        top: 5,
        right: 5,
        bottom: 5,
        left: 5
      },
      mass: 1,
      physics: true,
      scaling: {
        min: 10,
        max: 30,
        label: {
          enabled: false,
          min: 14,
          max: 30,
          maxVisible: 30,
          drawThreshold: 5
        },
        customScalingFunction: function(min2, max2, total, value) {
          if (max2 === min2) {
            return 0.5;
          } else {
            const scale = 1 / (max2 - min2);
            return Math.max(0, (value - min2) * scale);
          }
        }
      },
      shadow: {
        enabled: false,
        color: "rgba(0,0,0,0.5)",
        size: 10,
        x: 5,
        y: 5
      },
      shape: "ellipse",
      shapeProperties: {
        borderDashes: false,
        // only for borders
        borderRadius: 6,
        // only for box shape
        interpolation: true,
        // only for image and circularImage shapes
        useImageSize: false,
        // only for image and circularImage shapes
        useBorderWithImage: false,
        // only for image shape
        coordinateOrigin: "center"
        // only for image and circularImage shapes
      },
      size: 25,
      title: void 0,
      value: void 0,
      x: void 0,
      y: void 0
    };
    if (this.defaultOptions.mass <= 0) {
      throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
    }
    this.options = bridgeObject(this.defaultOptions);
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    var _context2, _context3;
    this.body.emitter.on("refreshNodes", _bindInstanceProperty(_context2 = this.refresh).call(_context2, this));
    this.body.emitter.on("refresh", _bindInstanceProperty(_context3 = this.refresh).call(_context3, this));
    this.body.emitter.on("destroy", () => {
      forEach$1(this.nodesListeners, (callback, event) => {
        if (this.body.data.nodes)
          this.body.data.nodes.off(event, callback);
      });
      delete this.body.functions.createNode;
      delete this.nodesListeners.add;
      delete this.nodesListeners.update;
      delete this.nodesListeners.remove;
      delete this.nodesListeners;
    });
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      Node.parseOptions(this.options, options2);
      if (options2.opacity !== void 0) {
        if (_Number$isNaN(options2.opacity) || !_Number$isFinite(options2.opacity) || options2.opacity < 0 || options2.opacity > 1) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + options2.opacity);
        } else {
          this.options.opacity = options2.opacity;
        }
      }
      if (options2.shape !== void 0) {
        for (const nodeId in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
            this.body.nodes[nodeId].updateShape();
          }
        }
      }
      if (typeof options2.font !== "undefined" || typeof options2.widthConstraint !== "undefined" || typeof options2.heightConstraint !== "undefined") {
        for (const nodeId of _Object$keys(this.body.nodes)) {
          this.body.nodes[nodeId].updateLabelModule();
          this.body.nodes[nodeId].needsRefresh();
        }
      }
      if (options2.size !== void 0) {
        for (const nodeId in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
            this.body.nodes[nodeId].needsRefresh();
          }
        }
      }
      if (options2.hidden !== void 0 || options2.physics !== void 0) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }
  /**
   * Set a data set with nodes for the network
   * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
   * @param {boolean} [doNotEmit] - Suppress data changed event.
   * @private
   */
  setData(nodes) {
    let doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const oldNodesData = this.body.data.nodes;
    if (isDataViewLike("id", nodes)) {
      this.body.data.nodes = nodes;
    } else if (_Array$isArray(nodes)) {
      this.body.data.nodes = new DataSet();
      this.body.data.nodes.add(nodes);
    } else if (!nodes) {
      this.body.data.nodes = new DataSet();
    } else {
      throw new TypeError("Array or DataSet expected");
    }
    if (oldNodesData) {
      forEach$1(this.nodesListeners, function(callback, event) {
        oldNodesData.off(event, callback);
      });
    }
    this.body.nodes = {};
    if (this.body.data.nodes) {
      const me = this;
      forEach$1(this.nodesListeners, function(callback, event) {
        me.body.data.nodes.on(event, callback);
      });
      const ids = this.body.data.nodes.getIds();
      this.add(ids, true);
    }
    if (doNotEmit === false) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   * Add nodes
   * @param {number[] | string[]} ids
   * @param {boolean} [doNotEmit]
   * @private
   */
  add(ids) {
    let doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    let id2;
    const newNodes = [];
    for (let i = 0; i < ids.length; i++) {
      id2 = ids[i];
      const properties = this.body.data.nodes.get(id2);
      const node = this.create(properties);
      newNodes.push(node);
      this.body.nodes[id2] = node;
    }
    this.layoutEngine.positionInitially(newNodes);
    if (doNotEmit === false) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   * Update existing nodes, or create them when not yet existing
   * @param {number[] | string[]} ids id's of changed nodes
   * @param {Array} changedData array with changed data
   * @param {Array|undefined} oldData optional; array with previous data
   * @private
   */
  update(ids, changedData, oldData) {
    const nodes = this.body.nodes;
    let dataChanged = false;
    for (let i = 0; i < ids.length; i++) {
      const id2 = ids[i];
      let node = nodes[id2];
      const data2 = changedData[i];
      if (node !== void 0) {
        if (node.setOptions(data2)) {
          dataChanged = true;
        }
      } else {
        dataChanged = true;
        node = this.create(data2);
        nodes[id2] = node;
      }
    }
    if (!dataChanged && oldData !== void 0) {
      dataChanged = _someInstanceProperty(changedData).call(changedData, function(newValue, index2) {
        const oldValue = oldData[index2];
        return oldValue && oldValue.level !== newValue.level;
      });
    }
    if (dataChanged === true) {
      this.body.emitter.emit("_dataChanged");
    } else {
      this.body.emitter.emit("_dataUpdated");
    }
  }
  /**
   * Remove existing nodes. If nodes do not exist, the method will just ignore it.
   * @param {number[] | string[]} ids
   * @private
   */
  remove(ids) {
    const nodes = this.body.nodes;
    for (let i = 0; i < ids.length; i++) {
      const id2 = ids[i];
      delete nodes[id2];
    }
    this.body.emitter.emit("_dataChanged");
  }
  /**
   * create a node
   * @param {object} properties
   * @param {class} [constructorClass]
   * @returns {*}
   */
  create(properties) {
    let constructorClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Node;
    return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);
  }
  /**
   *
   * @param {boolean} [clearPositions]
   */
  refresh() {
    let clearPositions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    forEach$1(this.body.nodes, (node, nodeId) => {
      const data2 = this.body.data.nodes.get(nodeId);
      if (data2 !== void 0) {
        if (clearPositions === true) {
          node.setOptions({
            x: null,
            y: null
          });
        }
        node.setOptions({
          fixed: false
        });
        node.setOptions(data2);
      }
    });
  }
  /**
   * Returns the positions of the nodes.
   * @param {Array.<Node.id> | string} [ids]  --> optional, can be array of nodeIds, can be string
   * @returns {{}}
   */
  getPositions(ids) {
    const dataArray = {};
    if (ids !== void 0) {
      if (_Array$isArray(ids) === true) {
        for (let i = 0; i < ids.length; i++) {
          if (this.body.nodes[ids[i]] !== void 0) {
            const node = this.body.nodes[ids[i]];
            dataArray[ids[i]] = {
              x: Math.round(node.x),
              y: Math.round(node.y)
            };
          }
        }
      } else {
        if (this.body.nodes[ids] !== void 0) {
          const node = this.body.nodes[ids];
          dataArray[ids] = {
            x: Math.round(node.x),
            y: Math.round(node.y)
          };
        }
      }
    } else {
      for (let i = 0; i < this.body.nodeIndices.length; i++) {
        const node = this.body.nodes[this.body.nodeIndices[i]];
        dataArray[this.body.nodeIndices[i]] = {
          x: Math.round(node.x),
          y: Math.round(node.y)
        };
      }
    }
    return dataArray;
  }
  /**
   * Retrieves the x y position of a specific id.
   * @param {string} id The id to retrieve.
   * @throws {TypeError} If no id is included.
   * @throws {ReferenceError} If an invalid id is provided.
   * @returns {{ x: number, y: number }} Returns X, Y canvas position of the node with given id.
   */
  getPosition(id2) {
    if (id2 == void 0) {
      throw new TypeError("No id was specified for getPosition method.");
    } else if (this.body.nodes[id2] == void 0) {
      throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(id2));
    } else {
      return {
        x: Math.round(this.body.nodes[id2].x),
        y: Math.round(this.body.nodes[id2].y)
      };
    }
  }
  /**
   * Load the XY positions of the nodes into the dataset.
   */
  storePositions() {
    const dataArray = [];
    const dataset = this.body.data.nodes.getDataSet();
    for (const dsNode of dataset.get()) {
      const id2 = dsNode.id;
      const bodyNode = this.body.nodes[id2];
      const x = Math.round(bodyNode.x);
      const y = Math.round(bodyNode.y);
      if (dsNode.x !== x || dsNode.y !== y) {
        dataArray.push({
          id: id2,
          x,
          y
        });
      }
    }
    dataset.update(dataArray);
  }
  /**
   * get the bounding box of a node.
   * @param {Node.id} nodeId
   * @returns {j|*}
   */
  getBoundingBox(nodeId) {
    if (this.body.nodes[nodeId] !== void 0) {
      return this.body.nodes[nodeId].shape.boundingBox;
    }
  }
  /**
   * Get the Ids of nodes connected to this node.
   * @param {Node.id} nodeId
   * @param {'to'|'from'|undefined} direction values 'from' and 'to' select respectively parent and child nodes only.
   *                                          Any other value returns both parent and child nodes.
   * @returns {Array}
   */
  getConnectedNodes(nodeId, direction) {
    const nodeList = [];
    if (this.body.nodes[nodeId] !== void 0) {
      const node = this.body.nodes[nodeId];
      const nodeObj = {};
      for (let i = 0; i < node.edges.length; i++) {
        const edge = node.edges[i];
        if (direction !== "to" && edge.toId == node.id) {
          if (nodeObj[edge.fromId] === void 0) {
            nodeList.push(edge.fromId);
            nodeObj[edge.fromId] = true;
          }
        } else if (direction !== "from" && edge.fromId == node.id) {
          if (nodeObj[edge.toId] === void 0) {
            nodeList.push(edge.toId);
            nodeObj[edge.toId] = true;
          }
        }
      }
    }
    return nodeList;
  }
  /**
   * Get the ids of the edges connected to this node.
   * @param {Node.id} nodeId
   * @returns {*}
   */
  getConnectedEdges(nodeId) {
    const edgeList = [];
    if (this.body.nodes[nodeId] !== void 0) {
      const node = this.body.nodes[nodeId];
      for (let i = 0; i < node.edges.length; i++) {
        edgeList.push(node.edges[i].id);
      }
    } else {
      console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
    }
    return edgeList;
  }
  /**
   * Move a node.
   * @param {Node.id} nodeId
   * @param {number} x
   * @param {number} y
   */
  moveNode(nodeId, x, y) {
    if (this.body.nodes[nodeId] !== void 0) {
      this.body.nodes[nodeId].x = Number(x);
      this.body.nodes[nodeId].y = Number(y);
      _setTimeout(() => {
        this.body.emitter.emit("startSimulation");
      }, 0);
    } else {
      console.error("Node id supplied to moveNode does not exist. Provided: ", nodeId);
    }
  }
};
var $$3 = _export;
var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;
var FORCED$2 = !!$hypot && $hypot(Infinity, NaN) !== Infinity;
$$3({ target: "Math", stat: true, arity: 2, forced: FORCED$2 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  hypot: function hypot(value1, value2) {
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else
        sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});
var path$3 = path$t;
var hypot$2 = path$3.Math.hypot;
var parent$5 = hypot$2;
var hypot$1 = parent$5;
var hypot2 = hypot$1;
var _Math$hypot = getDefaultExportFromCjs(hypot2);
var EndPoint = class {
  /**
   * Apply transformation on points for display.
   *
   * The following is done:
   * - rotate by the specified angle
   * - multiply the (normalized) coordinates by the passed length
   * - offset by the target coordinates
   * @param points - The point(s) to be transformed.
   * @param arrowData - The data determining the result of the transformation.
   */
  static transform(points, arrowData) {
    if (!_Array$isArray(points)) {
      points = [points];
    }
    const x = arrowData.point.x;
    const y = arrowData.point.y;
    const angle = arrowData.angle;
    const length2 = arrowData.length;
    for (let i = 0; i < points.length; ++i) {
      const p = points[i];
      const xt = p.x * Math.cos(angle) - p.y * Math.sin(angle);
      const yt = p.x * Math.sin(angle) + p.y * Math.cos(angle);
      p.x = x + length2 * xt;
      p.y = y + length2 * yt;
    }
  }
  /**
   * Draw a closed path using the given real coordinates.
   * @param ctx - The path will be rendered into this context.
   * @param points - The points of the path.
   */
  static drawPath(ctx, points) {
    ctx.beginPath();
    ctx.moveTo(points[0].x, points[0].y);
    for (let i = 1; i < points.length; ++i) {
      ctx.lineTo(points[i].x, points[i].y);
    }
    ctx.closePath();
  }
};
var Image$1 = class Image3 extends EndPoint {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns False as there is no way to fill an image.
   */
  static draw(ctx, arrowData) {
    if (arrowData.image) {
      ctx.save();
      ctx.translate(arrowData.point.x, arrowData.point.y);
      ctx.rotate(Math.PI / 2 + arrowData.angle);
      const width = arrowData.imageWidth != null ? arrowData.imageWidth : arrowData.image.width;
      const height = arrowData.imageHeight != null ? arrowData.imageHeight : arrowData.image.height;
      arrowData.image.drawImageAtPosition(
        ctx,
        1,
        // scale
        -width / 2,
        // x
        0,
        // y
        width,
        height
      );
      ctx.restore();
    }
    return false;
  }
};
var Arrow = class extends EndPoint {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: 0,
      y: 0
    }, {
      x: -1,
      y: 0.3
    }, {
      x: -0.9,
      y: 0
    }, {
      x: -1,
      y: -0.3
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var Crow = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: -1,
      y: 0
    }, {
      x: 0,
      y: 0.3
    }, {
      x: -0.4,
      y: 0
    }, {
      x: 0,
      y: -0.3
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var Curve = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const point = {
      x: -0.4,
      y: 0
    };
    EndPoint.transform(point, arrowData);
    ctx.strokeStyle = ctx.fillStyle;
    ctx.fillStyle = "rgba(0, 0, 0, 0)";
    const pi = Math.PI;
    const startAngle = arrowData.angle - pi / 2;
    const endAngle = arrowData.angle + pi / 2;
    ctx.beginPath();
    ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);
    ctx.stroke();
    return true;
  }
};
var InvertedCurve = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const point = {
      x: -0.3,
      y: 0
    };
    EndPoint.transform(point, arrowData);
    ctx.strokeStyle = ctx.fillStyle;
    ctx.fillStyle = "rgba(0, 0, 0, 0)";
    const pi = Math.PI;
    const startAngle = arrowData.angle + pi / 2;
    const endAngle = arrowData.angle + 3 * pi / 2;
    ctx.beginPath();
    ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);
    ctx.stroke();
    return true;
  }
};
var Triangle2 = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: 0.02,
      y: 0
    }, {
      x: -1,
      y: 0.3
    }, {
      x: -1,
      y: -0.3
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var InvertedTriangle = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: 0,
      y: 0.3
    }, {
      x: 0,
      y: -0.3
    }, {
      x: -1,
      y: 0
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var Circle2 = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const point = {
      x: -0.4,
      y: 0
    };
    EndPoint.transform(point, arrowData);
    drawCircle(ctx, point.x, point.y, arrowData.length * 0.4);
    return true;
  }
};
var Bar = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: 0,
      y: 0.5
    }, {
      x: 0,
      y: -0.5
    }, {
      x: -0.15,
      y: -0.5
    }, {
      x: -0.15,
      y: 0.5
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var Box2 = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: 0,
      y: 0.3
    }, {
      x: 0,
      y: -0.3
    }, {
      x: -0.6,
      y: -0.3
    }, {
      x: -0.6,
      y: 0.3
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var Diamond2 = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: 0,
      y: 0
    }, {
      x: -0.5,
      y: -0.3
    }, {
      x: -1,
      y: 0
    }, {
      x: -0.5,
      y: 0.3
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var Vee = class {
  /**
   * Draw this shape at the end of a line.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True because ctx.fill() can be used to fill the arrow.
   */
  static draw(ctx, arrowData) {
    const points = [{
      x: -1,
      y: 0.3
    }, {
      x: -0.5,
      y: 0
    }, {
      x: -1,
      y: -0.3
    }, {
      x: 0,
      y: 0
    }];
    EndPoint.transform(points, arrowData);
    EndPoint.drawPath(ctx, points);
    return true;
  }
};
var EndPoints = class {
  /**
   * Draw an endpoint.
   * @param ctx - The shape will be rendered into this context.
   * @param arrowData - The data determining the shape.
   * @returns True if ctx.fill() can be used to fill the arrow, false otherwise.
   */
  static draw(ctx, arrowData) {
    let type;
    if (arrowData.type) {
      type = arrowData.type.toLowerCase();
    }
    switch (type) {
      case "image":
        return Image$1.draw(ctx, arrowData);
      case "circle":
        return Circle2.draw(ctx, arrowData);
      case "box":
        return Box2.draw(ctx, arrowData);
      case "crow":
        return Crow.draw(ctx, arrowData);
      case "curve":
        return Curve.draw(ctx, arrowData);
      case "diamond":
        return Diamond2.draw(ctx, arrowData);
      case "inv_curve":
        return InvertedCurve.draw(ctx, arrowData);
      case "triangle":
        return Triangle2.draw(ctx, arrowData);
      case "inv_triangle":
        return InvertedTriangle.draw(ctx, arrowData);
      case "bar":
        return Bar.draw(ctx, arrowData);
      case "vee":
        return Vee.draw(ctx, arrowData);
      case "arrow":
      default:
        return Arrow.draw(ctx, arrowData);
    }
  }
};
function ownKeys$1(e, r) {
  var t = _Object$keys(e);
  if (_Object$getOwnPropertySymbols) {
    var o = _Object$getOwnPropertySymbols(e);
    r && (o = _filterInstanceProperty(o).call(o, function(r2) {
      return _Object$getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$1(e) {
  for (var r = 1; r < arguments.length; r++) {
    var _context2, _context3;
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? _forEachInstanceProperty(_context2 = ownKeys$1(Object(t), true)).call(_context2, function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys$1(Object(t))).call(_context3, function(r2) {
      _Object$defineProperty(e, r2, _Object$getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var EdgeBase = class {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param _body - The body of the network.
   * @param _labelModule - Label module.
   */
  constructor(options2, _body, _labelModule) {
    this._body = _body;
    this._labelModule = _labelModule;
    this.color = {};
    this.colorDirty = true;
    this.hoverWidth = 1.5;
    this.selectionWidth = 2;
    this.setOptions(options2);
    this.fromPoint = this.from;
    this.toPoint = this.to;
  }
  /** @inheritDoc */
  connect() {
    this.from = this._body.nodes[this.options.from];
    this.to = this._body.nodes[this.options.to];
  }
  /** @inheritDoc */
  cleanup() {
    return false;
  }
  /**
   * Set new edge options.
   * @param options - The new edge options object.
   */
  setOptions(options2) {
    this.options = options2;
    this.from = this._body.nodes[this.options.from];
    this.to = this._body.nodes[this.options.to];
    this.id = this.options.id;
  }
  /** @inheritDoc */
  drawLine(ctx, values3, _selected, _hover) {
    let viaNode = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.getViaNode();
    ctx.strokeStyle = this.getColor(ctx, values3);
    ctx.lineWidth = values3.width;
    if (values3.dashes !== false) {
      this._drawDashedLine(ctx, values3, viaNode);
    } else {
      this._drawLine(ctx, values3, viaNode);
    }
  }
  /**
   * Draw a line with given style between two nodes through supplied node(s).
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values like color, opacity or shadow.
   * @param viaNode - Additional control point(s) for the edge.
   * @param fromPoint - TODO: Seems ignored, remove?
   * @param toPoint - TODO: Seems ignored, remove?
   */
  _drawLine(ctx, values3, viaNode, fromPoint, toPoint) {
    if (this.from != this.to) {
      this._line(ctx, values3, viaNode, fromPoint, toPoint);
    } else {
      const [x, y, radius] = this._getCircleData(ctx);
      this._circle(ctx, values3, x, y, radius);
    }
  }
  /**
   * Draw a dashed line with given style between two nodes through supplied node(s).
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values like color, opacity or shadow.
   * @param viaNode - Additional control point(s) for the edge.
   * @param _fromPoint - Ignored (TODO: remove in the future).
   * @param _toPoint - Ignored (TODO: remove in the future).
   */
  _drawDashedLine(ctx, values3, viaNode, _fromPoint, _toPoint) {
    ctx.lineCap = "round";
    const pattern = _Array$isArray(values3.dashes) ? values3.dashes : [5, 5];
    if (ctx.setLineDash !== void 0) {
      ctx.save();
      ctx.setLineDash(pattern);
      ctx.lineDashOffset = 0;
      if (this.from != this.to) {
        this._line(ctx, values3, viaNode);
      } else {
        const [x, y, radius] = this._getCircleData(ctx);
        this._circle(ctx, values3, x, y, radius);
      }
      ctx.setLineDash([0]);
      ctx.lineDashOffset = 0;
      ctx.restore();
    } else {
      if (this.from != this.to) {
        drawDashedLine(ctx, this.from.x, this.from.y, this.to.x, this.to.y, pattern);
      } else {
        const [x, y, radius] = this._getCircleData(ctx);
        this._circle(ctx, values3, x, y, radius);
      }
      this.enableShadow(ctx, values3);
      ctx.stroke();
      this.disableShadow(ctx, values3);
    }
  }
  /**
   * Find the intersection between the border of the node and the edge.
   * @param node - The node (either from or to node of the edge).
   * @param ctx - The context that will be used for rendering.
   * @param options - Additional options.
   * @returns Cartesian coordinates of the intersection between the border of the node and the edge.
   */
  findBorderPosition(node, ctx, options2) {
    if (this.from != this.to) {
      return this._findBorderPosition(node, ctx, options2);
    } else {
      return this._findBorderPositionCircle(node, ctx, options2);
    }
  }
  /** @inheritDoc */
  findBorderPositions(ctx) {
    if (this.from != this.to) {
      return {
        from: this._findBorderPosition(this.from, ctx),
        to: this._findBorderPosition(this.to, ctx)
      };
    } else {
      var _context;
      const [x, y] = _sliceInstanceProperty(_context = this._getCircleData(ctx)).call(_context, 0, 2);
      return {
        from: this._findBorderPositionCircle(this.from, ctx, {
          x,
          y,
          low: 0.25,
          high: 0.6,
          direction: -1
        }),
        to: this._findBorderPositionCircle(this.from, ctx, {
          x,
          y,
          low: 0.6,
          high: 0.8,
          direction: 1
        })
      };
    }
  }
  /**
   * Compute the center point and radius of an edge connected to the same node at both ends.
   * @param ctx - The context that will be used for rendering.
   * @returns `[x, y, radius]`
   */
  _getCircleData(ctx) {
    const radius = this.options.selfReference.size;
    if (ctx !== void 0) {
      if (this.from.shape.width === void 0) {
        this.from.shape.resize(ctx);
      }
    }
    const coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, radius, this.from);
    return [coordinates.x, coordinates.y, radius];
  }
  /**
   * Get a point on a circle.
   * @param x - Center of the circle on the x axis.
   * @param y - Center of the circle on the y axis.
   * @param radius - Radius of the circle.
   * @param position - Value between 0 (line start) and 1 (line end).
   * @returns Cartesian coordinates of requested point on the circle.
   */
  _pointOnCircle(x, y, radius, position) {
    const angle = position * 2 * Math.PI;
    return {
      x: x + radius * Math.cos(angle),
      y: y - radius * Math.sin(angle)
    };
  }
  /**
   * Find the intersection between the border of the node and the edge.
   * @remarks
   * This function uses binary search to look for the point where the circle crosses the border of the node.
   * @param nearNode - The node (either from or to node of the edge).
   * @param ctx - The context that will be used for rendering.
   * @param options - Additional options.
   * @returns Cartesian coordinates of the intersection between the border of the node and the edge.
   */
  _findBorderPositionCircle(nearNode, ctx, options2) {
    const x = options2.x;
    const y = options2.y;
    let low2 = options2.low;
    let high = options2.high;
    const direction = options2.direction;
    const maxIterations = 10;
    const radius = this.options.selfReference.size;
    const threshold = 0.05;
    let pos;
    let middle = (low2 + high) * 0.5;
    let endPointOffset = 0;
    if (this.options.arrowStrikethrough === true) {
      if (direction === -1) {
        endPointOffset = this.options.endPointOffset.from;
      } else if (direction === 1) {
        endPointOffset = this.options.endPointOffset.to;
      }
    }
    let iteration = 0;
    do {
      middle = (low2 + high) * 0.5;
      pos = this._pointOnCircle(x, y, radius, middle);
      const angle = Math.atan2(nearNode.y - pos.y, nearNode.x - pos.x);
      const distanceToBorder = nearNode.distanceToBorder(ctx, angle) + endPointOffset;
      const distanceToPoint = Math.sqrt(Math.pow(pos.x - nearNode.x, 2) + Math.pow(pos.y - nearNode.y, 2));
      const difference = distanceToBorder - distanceToPoint;
      if (Math.abs(difference) < threshold) {
        break;
      } else if (difference > 0) {
        if (direction > 0) {
          low2 = middle;
        } else {
          high = middle;
        }
      } else {
        if (direction > 0) {
          high = middle;
        } else {
          low2 = middle;
        }
      }
      ++iteration;
    } while (low2 <= high && iteration < maxIterations);
    return _objectSpread$1(_objectSpread$1({}, pos), {}, {
      t: middle
    });
  }
  /**
   * Get the line width of the edge. Depends on width and whether one of the connected nodes is selected.
   * @param selected - Determines wheter the line is selected.
   * @param hover - Determines wheter the line is being hovered, only applies if selected is false.
   * @returns The width of the line.
   */
  getLineWidth(selected, hover) {
    if (selected === true) {
      return Math.max(this.selectionWidth, 0.3 / this._body.view.scale);
    } else if (hover === true) {
      return Math.max(this.hoverWidth, 0.3 / this._body.view.scale);
    } else {
      return Math.max(this.options.width, 0.3 / this._body.view.scale);
    }
  }
  /**
   * Compute the color or gradient for given edge.
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values like color, opacity or shadow.
   * @param _selected - Ignored (TODO: remove in the future).
   * @param _hover - Ignored (TODO: remove in the future).
   * @returns Color string if single color is inherited or gradient if two.
   */
  getColor(ctx, values3) {
    if (values3.inheritsColor !== false) {
      if (values3.inheritsColor === "both" && this.from.id !== this.to.id) {
        const grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
        let fromColor = this.from.options.color.highlight.border;
        let toColor = this.to.options.color.highlight.border;
        if (this.from.selected === false && this.to.selected === false) {
          fromColor = overrideOpacity(this.from.options.color.border, values3.opacity);
          toColor = overrideOpacity(this.to.options.color.border, values3.opacity);
        } else if (this.from.selected === true && this.to.selected === false) {
          toColor = this.to.options.color.border;
        } else if (this.from.selected === false && this.to.selected === true) {
          fromColor = this.from.options.color.border;
        }
        grd.addColorStop(0, fromColor);
        grd.addColorStop(1, toColor);
        return grd;
      }
      if (values3.inheritsColor === "to") {
        return overrideOpacity(this.to.options.color.border, values3.opacity);
      } else {
        return overrideOpacity(this.from.options.color.border, values3.opacity);
      }
    } else {
      return overrideOpacity(values3.color, values3.opacity);
    }
  }
  /**
   * Draw a line from a node to itself, a circle.
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values like color, opacity or shadow.
   * @param x - Center of the circle on the x axis.
   * @param y - Center of the circle on the y axis.
   * @param radius - Radius of the circle.
   */
  _circle(ctx, values3, x, y, radius) {
    this.enableShadow(ctx, values3);
    let angleFrom = 0;
    let angleTo = Math.PI * 2;
    if (!this.options.selfReference.renderBehindTheNode) {
      const low2 = this.options.selfReference.angle;
      const high = this.options.selfReference.angle + Math.PI;
      const pointTFrom = this._findBorderPositionCircle(this.from, ctx, {
        x,
        y,
        low: low2,
        high,
        direction: -1
      });
      const pointTTo = this._findBorderPositionCircle(this.from, ctx, {
        x,
        y,
        low: low2,
        high,
        direction: 1
      });
      angleFrom = Math.atan2(pointTFrom.y - y, pointTFrom.x - x);
      angleTo = Math.atan2(pointTTo.y - y, pointTTo.x - x);
    }
    ctx.beginPath();
    ctx.arc(x, y, radius, angleFrom, angleTo, false);
    ctx.stroke();
    this.disableShadow(ctx, values3);
  }
  /**
   * @inheritDoc
   * @remarks
   * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
   */
  getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
    if (this.from != this.to) {
      return this._getDistanceToEdge(x1, y1, x2, y2, x3, y3);
    } else {
      const [x, y, radius] = this._getCircleData(void 0);
      const dx = x - x3;
      const dy = y - y3;
      return Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
    }
  }
  /**
   * Calculate the distance between a point (x3, y3) and a line segment from (x1, y1) to (x2, y2).
   * @param x1 - First end of the line segment on the x axis.
   * @param y1 - First end of the line segment on the y axis.
   * @param x2 - Second end of the line segment on the x axis.
   * @param y2 - Second end of the line segment on the y axis.
   * @param x3 - Position of the point on the x axis.
   * @param y3 - Position of the point on the y axis.
   * @returns The distance between the line segment and the point.
   */
  _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
    const px = x2 - x1;
    const py = y2 - y1;
    const something2 = px * px + py * py;
    let u = ((x3 - x1) * px + (y3 - y1) * py) / something2;
    if (u > 1) {
      u = 1;
    } else if (u < 0) {
      u = 0;
    }
    const x = x1 + u * px;
    const y = y1 + u * py;
    const dx = x - x3;
    const dy = y - y3;
    return Math.sqrt(dx * dx + dy * dy);
  }
  /** @inheritDoc */
  getArrowData(ctx, position, viaNode, _selected, _hover, values3) {
    let angle;
    let arrowPoint;
    let node1;
    let node2;
    let reversed;
    let scaleFactor;
    let type;
    const lineWidth = values3.width;
    if (position === "from") {
      node1 = this.from;
      node2 = this.to;
      reversed = values3.fromArrowScale < 0;
      scaleFactor = Math.abs(values3.fromArrowScale);
      type = values3.fromArrowType;
    } else if (position === "to") {
      node1 = this.to;
      node2 = this.from;
      reversed = values3.toArrowScale < 0;
      scaleFactor = Math.abs(values3.toArrowScale);
      type = values3.toArrowType;
    } else {
      node1 = this.to;
      node2 = this.from;
      reversed = values3.middleArrowScale < 0;
      scaleFactor = Math.abs(values3.middleArrowScale);
      type = values3.middleArrowType;
    }
    const length2 = 15 * scaleFactor + 3 * lineWidth;
    if (node1 != node2) {
      const approximateEdgeLength = _Math$hypot(node1.x - node2.x, node1.y - node2.y);
      const relativeLength = length2 / approximateEdgeLength;
      if (position !== "middle") {
        if (this.options.smooth.enabled === true) {
          const pointT = this._findBorderPosition(node1, ctx, {
            via: viaNode
          });
          const guidePos = this.getPoint(pointT.t + relativeLength * (position === "from" ? 1 : -1), viaNode);
          angle = Math.atan2(pointT.y - guidePos.y, pointT.x - guidePos.x);
          arrowPoint = pointT;
        } else {
          angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
          arrowPoint = this._findBorderPosition(node1, ctx);
        }
      } else {
        const halfLength = (reversed ? -relativeLength : relativeLength) / 2;
        const guidePos1 = this.getPoint(0.5 + halfLength, viaNode);
        const guidePos2 = this.getPoint(0.5 - halfLength, viaNode);
        angle = Math.atan2(guidePos1.y - guidePos2.y, guidePos1.x - guidePos2.x);
        arrowPoint = this.getPoint(0.5, viaNode);
      }
    } else {
      const [x, y, radius] = this._getCircleData(ctx);
      if (position === "from") {
        const low2 = this.options.selfReference.angle;
        const high = this.options.selfReference.angle + Math.PI;
        const pointT = this._findBorderPositionCircle(this.from, ctx, {
          x,
          y,
          low: low2,
          high,
          direction: -1
        });
        angle = pointT.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
        arrowPoint = pointT;
      } else if (position === "to") {
        const low2 = this.options.selfReference.angle;
        const high = this.options.selfReference.angle + Math.PI;
        const pointT = this._findBorderPositionCircle(this.from, ctx, {
          x,
          y,
          low: low2,
          high,
          direction: 1
        });
        angle = pointT.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
        arrowPoint = pointT;
      } else {
        const pos = this.options.selfReference.angle / (2 * Math.PI);
        arrowPoint = this._pointOnCircle(x, y, radius, pos);
        angle = pos * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
      }
    }
    const xi = arrowPoint.x - length2 * 0.9 * Math.cos(angle);
    const yi = arrowPoint.y - length2 * 0.9 * Math.sin(angle);
    const arrowCore = {
      x: xi,
      y: yi
    };
    return {
      point: arrowPoint,
      core: arrowCore,
      angle,
      length: length2,
      type
    };
  }
  /** @inheritDoc */
  drawArrowHead(ctx, values3, _selected, _hover, arrowData) {
    ctx.strokeStyle = this.getColor(ctx, values3);
    ctx.fillStyle = ctx.strokeStyle;
    ctx.lineWidth = values3.width;
    const canFill = EndPoints.draw(ctx, arrowData);
    if (canFill) {
      this.enableShadow(ctx, values3);
      _fillInstanceProperty(ctx).call(ctx);
      this.disableShadow(ctx, values3);
    }
  }
  /**
   * Set the shadow formatting values in the context if enabled, do nothing otherwise.
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values for the shadow.
   */
  enableShadow(ctx, values3) {
    if (values3.shadow === true) {
      ctx.shadowColor = values3.shadowColor;
      ctx.shadowBlur = values3.shadowSize;
      ctx.shadowOffsetX = values3.shadowX;
      ctx.shadowOffsetY = values3.shadowY;
    }
  }
  /**
   * Reset the shadow formatting values in the context if enabled, do nothing otherwise.
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values for the shadow.
   */
  disableShadow(ctx, values3) {
    if (values3.shadow === true) {
      ctx.shadowColor = "rgba(0,0,0,0)";
      ctx.shadowBlur = 0;
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
    }
  }
  /**
   * Render the background according to the formatting values.
   * @param ctx - The context that will be used for rendering.
   * @param values - Formatting values for the background.
   */
  drawBackground(ctx, values3) {
    if (values3.background !== false) {
      const origCtxAttr = {
        strokeStyle: ctx.strokeStyle,
        lineWidth: ctx.lineWidth,
        dashes: ctx.dashes
      };
      ctx.strokeStyle = values3.backgroundColor;
      ctx.lineWidth = values3.backgroundSize;
      this.setStrokeDashed(ctx, values3.backgroundDashes);
      ctx.stroke();
      ctx.strokeStyle = origCtxAttr.strokeStyle;
      ctx.lineWidth = origCtxAttr.lineWidth;
      ctx.dashes = origCtxAttr.dashes;
      this.setStrokeDashed(ctx, values3.dashes);
    }
  }
  /**
   * Set the line dash pattern if supported. Logs a warning to the console if it isn't supported.
   * @param ctx - The context that will be used for rendering.
   * @param dashes - The pattern [line, space, lineâ¦], true for default dashed line or false for normal line.
   */
  setStrokeDashed(ctx, dashes) {
    if (dashes !== false) {
      if (ctx.setLineDash !== void 0) {
        const pattern = _Array$isArray(dashes) ? dashes : [5, 5];
        ctx.setLineDash(pattern);
      } else {
        console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
      }
    } else {
      if (ctx.setLineDash !== void 0) {
        ctx.setLineDash([]);
      } else {
        console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
      }
    }
  }
};
function ownKeys2(e, r) {
  var t = _Object$keys(e);
  if (_Object$getOwnPropertySymbols) {
    var o = _Object$getOwnPropertySymbols(e);
    r && (o = _filterInstanceProperty(o).call(o, function(r2) {
      return _Object$getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var _context, _context2;
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? _forEachInstanceProperty(_context = ownKeys2(Object(t), true)).call(_context, function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys2(Object(t))).call(_context2, function(r2) {
      _Object$defineProperty(e, r2, _Object$getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var BezierEdgeBase = class extends EdgeBase {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param body - The body of the network.
   * @param labelModule - Label module.
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   * Find the intersection between the border of the node and the edge.
   * @remarks
   * This function uses binary search to look for the point where the bezier curve crosses the border of the node.
   * @param nearNode - The node (either from or to node of the edge).
   * @param ctx - The context that will be used for rendering.
   * @param viaNode - Additional node(s) the edge passes through.
   * @returns Cartesian coordinates of the intersection between the border of the node and the edge.
   */
  _findBorderPositionBezier(nearNode, ctx) {
    let viaNode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this._getViaCoordinates();
    const maxIterations = 10;
    const threshold = 0.2;
    let from = false;
    let high = 1;
    let low2 = 0;
    let node = this.to;
    let pos;
    let middle;
    let endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
    if (nearNode.id === this.from.id) {
      node = this.from;
      from = true;
      endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.from : 0;
    }
    if (this.options.arrowStrikethrough === false) {
      endPointOffset = 0;
    }
    let iteration = 0;
    do {
      middle = (low2 + high) * 0.5;
      pos = this.getPoint(middle, viaNode);
      const angle = Math.atan2(node.y - pos.y, node.x - pos.x);
      const distanceToBorder = node.distanceToBorder(ctx, angle) + endPointOffset;
      const distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
      const difference = distanceToBorder - distanceToPoint;
      if (Math.abs(difference) < threshold) {
        break;
      } else if (difference < 0) {
        if (from === false) {
          low2 = middle;
        } else {
          high = middle;
        }
      } else {
        if (from === false) {
          high = middle;
        } else {
          low2 = middle;
        }
      }
      ++iteration;
    } while (low2 <= high && iteration < maxIterations);
    return _objectSpread(_objectSpread({}, pos), {}, {
      t: middle
    });
  }
  /**
   * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).
   * @remarks
   * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
   * @param x1 - First end of the line segment on the x axis.
   * @param y1 - First end of the line segment on the y axis.
   * @param x2 - Second end of the line segment on the x axis.
   * @param y2 - Second end of the line segment on the y axis.
   * @param x3 - Position of the point on the x axis.
   * @param y3 - Position of the point on the y axis.
   * @param via - The control point for the edge.
   * @returns The distance between the line segment and the point.
   */
  _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
    let minDistance = 1e9;
    let distance;
    let i, t, x, y;
    let lastX = x1;
    let lastY = y1;
    for (i = 1; i < 10; i++) {
      t = 0.1 * i;
      x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;
      y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;
      if (i > 0) {
        distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
        minDistance = distance < minDistance ? distance : minDistance;
      }
      lastX = x;
      lastY = y;
    }
    return minDistance;
  }
  /**
   * Render a bezier curve between two nodes.
   * @remarks
   * The method accepts zero, one or two control points.
   * Passing zero control points just draws a straight line.
   * @param ctx - The context that will be used for rendering.
   * @param values - Style options for edge drawing.
   * @param viaNode1 - First control point for curve drawing.
   * @param viaNode2 - Second control point for curve drawing.
   */
  _bezierCurve(ctx, values3, viaNode1, viaNode2) {
    ctx.beginPath();
    ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
    if (viaNode1 != null && viaNode1.x != null) {
      if (viaNode2 != null && viaNode2.x != null) {
        ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);
      } else {
        ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);
      }
    } else {
      ctx.lineTo(this.toPoint.x, this.toPoint.y);
    }
    this.drawBackground(ctx, values3);
    this.enableShadow(ctx, values3);
    ctx.stroke();
    this.disableShadow(ctx, values3);
  }
  /** @inheritDoc */
  getViaNode() {
    return this._getViaCoordinates();
  }
};
var BezierEdgeDynamic = class extends BezierEdgeBase {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param body - The body of the network.
   * @param labelModule - Label module.
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
    this.via = this.via;
    this._boundFunction = () => {
      this.positionBezierNode();
    };
    this._body.emitter.on("_repositionBezierNodes", this._boundFunction);
  }
  /** @inheritDoc */
  setOptions(options2) {
    super.setOptions(options2);
    let physicsChange = false;
    if (this.options.physics !== options2.physics) {
      physicsChange = true;
    }
    this.options = options2;
    this.id = this.options.id;
    this.from = this._body.nodes[this.options.from];
    this.to = this._body.nodes[this.options.to];
    this.setupSupportNode();
    this.connect();
    if (physicsChange === true) {
      this.via.setOptions({
        physics: this.options.physics
      });
      this.positionBezierNode();
    }
  }
  /** @inheritDoc */
  connect() {
    this.from = this._body.nodes[this.options.from];
    this.to = this._body.nodes[this.options.to];
    if (this.from === void 0 || this.to === void 0 || this.options.physics === false) {
      this.via.setOptions({
        physics: false
      });
    } else {
      if (this.from.id === this.to.id) {
        this.via.setOptions({
          physics: false
        });
      } else {
        this.via.setOptions({
          physics: true
        });
      }
    }
  }
  /** @inheritDoc */
  cleanup() {
    this._body.emitter.off("_repositionBezierNodes", this._boundFunction);
    if (this.via !== void 0) {
      delete this._body.nodes[this.via.id];
      this.via = void 0;
      return true;
    }
    return false;
  }
  /**
   * Create and add a support node if not already present.
   * @remarks
   * Bezier curves require an anchor point to calculate the smooth flow.
   * These points are nodes.
   * These nodes are invisible but are used for the force calculation.
   *
   * The changed data is not called, if needed, it is returned by the main edge constructor.
   */
  setupSupportNode() {
    if (this.via === void 0) {
      const nodeId = "edgeId:" + this.id;
      const node = this._body.functions.createNode({
        id: nodeId,
        shape: "circle",
        physics: true,
        hidden: true
      });
      this._body.nodes[nodeId] = node;
      this.via = node;
      this.via.parentEdgeId = this.id;
      this.positionBezierNode();
    }
  }
  /**
   * Position bezier node.
   */
  positionBezierNode() {
    if (this.via !== void 0 && this.from !== void 0 && this.to !== void 0) {
      this.via.x = 0.5 * (this.from.x + this.to.x);
      this.via.y = 0.5 * (this.from.y + this.to.y);
    } else if (this.via !== void 0) {
      this.via.x = 0;
      this.via.y = 0;
    }
  }
  /** @inheritDoc */
  _line(ctx, values3, viaNode) {
    this._bezierCurve(ctx, values3, viaNode);
  }
  /** @inheritDoc */
  _getViaCoordinates() {
    return this.via;
  }
  /** @inheritDoc */
  getViaNode() {
    return this.via;
  }
  /** @inheritDoc */
  getPoint(position) {
    let viaNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.via;
    if (this.from === this.to) {
      const [cx, cy, cr] = this._getCircleData();
      const a = 2 * Math.PI * (1 - position);
      return {
        x: cx + cr * Math.sin(a),
        y: cy + cr - cr * (1 - Math.cos(a))
      };
    } else {
      return {
        x: Math.pow(1 - position, 2) * this.fromPoint.x + 2 * position * (1 - position) * viaNode.x + Math.pow(position, 2) * this.toPoint.x,
        y: Math.pow(1 - position, 2) * this.fromPoint.y + 2 * position * (1 - position) * viaNode.y + Math.pow(position, 2) * this.toPoint.y
      };
    }
  }
  /** @inheritDoc */
  _findBorderPosition(nearNode, ctx) {
    return this._findBorderPositionBezier(nearNode, ctx, this.via);
  }
  /** @inheritDoc */
  _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
    return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
  }
};
var BezierEdgeStatic = class extends BezierEdgeBase {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param body - The body of the network.
   * @param labelModule - Label module.
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /** @inheritDoc */
  _line(ctx, values3, viaNode) {
    this._bezierCurve(ctx, values3, viaNode);
  }
  /** @inheritDoc */
  getViaNode() {
    return this._getViaCoordinates();
  }
  /**
   * Compute the coordinates of the via node.
   * @remarks
   * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
   * @returns Cartesian coordinates of the via node.
   */
  _getViaCoordinates() {
    const factor = this.options.smooth.roundness;
    const type = this.options.smooth.type;
    let dx = Math.abs(this.from.x - this.to.x);
    let dy = Math.abs(this.from.y - this.to.y);
    if (type === "discrete" || type === "diagonalCross") {
      let stepX;
      let stepY;
      if (dx <= dy) {
        stepX = stepY = factor * dy;
      } else {
        stepX = stepY = factor * dx;
      }
      if (this.from.x > this.to.x) {
        stepX = -stepX;
      }
      if (this.from.y >= this.to.y) {
        stepY = -stepY;
      }
      let xVia = this.from.x + stepX;
      let yVia = this.from.y + stepY;
      if (type === "discrete") {
        if (dx <= dy) {
          xVia = dx < factor * dy ? this.from.x : xVia;
        } else {
          yVia = dy < factor * dx ? this.from.y : yVia;
        }
      }
      return {
        x: xVia,
        y: yVia
      };
    } else if (type === "straightCross") {
      let stepX = (1 - factor) * dx;
      let stepY = (1 - factor) * dy;
      if (dx <= dy) {
        stepX = 0;
        if (this.from.y < this.to.y) {
          stepY = -stepY;
        }
      } else {
        if (this.from.x < this.to.x) {
          stepX = -stepX;
        }
        stepY = 0;
      }
      return {
        x: this.to.x + stepX,
        y: this.to.y + stepY
      };
    } else if (type === "horizontal") {
      let stepX = (1 - factor) * dx;
      if (this.from.x < this.to.x) {
        stepX = -stepX;
      }
      return {
        x: this.to.x + stepX,
        y: this.from.y
      };
    } else if (type === "vertical") {
      let stepY = (1 - factor) * dy;
      if (this.from.y < this.to.y) {
        stepY = -stepY;
      }
      return {
        x: this.from.x,
        y: this.to.y + stepY
      };
    } else if (type === "curvedCW") {
      dx = this.to.x - this.from.x;
      dy = this.from.y - this.to.y;
      const radius = Math.sqrt(dx * dx + dy * dy);
      const pi = Math.PI;
      const originalAngle = Math.atan2(dy, dx);
      const myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);
      return {
        x: this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle),
        y: this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle)
      };
    } else if (type === "curvedCCW") {
      dx = this.to.x - this.from.x;
      dy = this.from.y - this.to.y;
      const radius = Math.sqrt(dx * dx + dy * dy);
      const pi = Math.PI;
      const originalAngle = Math.atan2(dy, dx);
      const myAngle = (originalAngle + (-factor * 0.5 + 0.5) * pi) % (2 * pi);
      return {
        x: this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle),
        y: this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle)
      };
    } else {
      let stepX;
      let stepY;
      if (dx <= dy) {
        stepX = stepY = factor * dy;
      } else {
        stepX = stepY = factor * dx;
      }
      if (this.from.x > this.to.x) {
        stepX = -stepX;
      }
      if (this.from.y >= this.to.y) {
        stepY = -stepY;
      }
      let xVia = this.from.x + stepX;
      let yVia = this.from.y + stepY;
      if (dx <= dy) {
        if (this.from.x <= this.to.x) {
          xVia = this.to.x < xVia ? this.to.x : xVia;
        } else {
          xVia = this.to.x > xVia ? this.to.x : xVia;
        }
      } else {
        if (this.from.y >= this.to.y) {
          yVia = this.to.y > yVia ? this.to.y : yVia;
        } else {
          yVia = this.to.y < yVia ? this.to.y : yVia;
        }
      }
      return {
        x: xVia,
        y: yVia
      };
    }
  }
  /** @inheritDoc */
  _findBorderPosition(nearNode, ctx) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this._findBorderPositionBezier(nearNode, ctx, options2.via);
  }
  /** @inheritDoc */
  _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
    let viaNode = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : this._getViaCoordinates();
    return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
  }
  /** @inheritDoc */
  getPoint(position) {
    let viaNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getViaCoordinates();
    const t = position;
    const x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
    const y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;
    return {
      x,
      y
    };
  }
};
var CubicBezierEdgeBase = class extends BezierEdgeBase {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param body - The body of the network.
   * @param labelModule - Label module.
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /**
   * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).
   * @remarks
   * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
   * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
   * @param x1 - First end of the line segment on the x axis.
   * @param y1 - First end of the line segment on the y axis.
   * @param x2 - Second end of the line segment on the x axis.
   * @param y2 - Second end of the line segment on the y axis.
   * @param x3 - Position of the point on the x axis.
   * @param y3 - Position of the point on the y axis.
   * @param via1 - The first point this edge passes through.
   * @param via2 - The second point this edge passes through.
   * @returns The distance between the line segment and the point.
   */
  _getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2) {
    let minDistance = 1e9;
    let lastX = x1;
    let lastY = y1;
    const vec = [0, 0, 0, 0];
    for (let i = 1; i < 10; i++) {
      const t = 0.1 * i;
      vec[0] = Math.pow(1 - t, 3);
      vec[1] = 3 * t * Math.pow(1 - t, 2);
      vec[2] = 3 * Math.pow(t, 2) * (1 - t);
      vec[3] = Math.pow(t, 3);
      const x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
      const y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
      if (i > 0) {
        const distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
        minDistance = distance < minDistance ? distance : minDistance;
      }
      lastX = x;
      lastY = y;
    }
    return minDistance;
  }
};
var CubicBezierEdge = class extends CubicBezierEdgeBase {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param body - The body of the network.
   * @param labelModule - Label module.
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /** @inheritDoc */
  _line(ctx, values3, viaNodes) {
    const via1 = viaNodes[0];
    const via2 = viaNodes[1];
    this._bezierCurve(ctx, values3, via1, via2);
  }
  /**
   * Compute the additional points the edge passes through.
   * @returns Cartesian coordinates of the points the edge passes through.
   */
  _getViaCoordinates() {
    const dx = this.from.x - this.to.x;
    const dy = this.from.y - this.to.y;
    let x1;
    let y1;
    let x2;
    let y2;
    const roundness = this.options.smooth.roundness;
    if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === "horizontal") && this.options.smooth.forceDirection !== "vertical") {
      y1 = this.from.y;
      y2 = this.to.y;
      x1 = this.from.x - roundness * dx;
      x2 = this.to.x + roundness * dx;
    } else {
      y1 = this.from.y - roundness * dy;
      y2 = this.to.y + roundness * dy;
      x1 = this.from.x;
      x2 = this.to.x;
    }
    return [{
      x: x1,
      y: y1
    }, {
      x: x2,
      y: y2
    }];
  }
  /** @inheritDoc */
  getViaNode() {
    return this._getViaCoordinates();
  }
  /** @inheritDoc */
  _findBorderPosition(nearNode, ctx) {
    return this._findBorderPositionBezier(nearNode, ctx);
  }
  /** @inheritDoc */
  _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
    let [via1, via2] = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : this._getViaCoordinates();
    return this._getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2);
  }
  /** @inheritDoc */
  getPoint(position) {
    let [via1, via2] = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getViaCoordinates();
    const t = position;
    const vec = [Math.pow(1 - t, 3), 3 * t * Math.pow(1 - t, 2), 3 * Math.pow(t, 2) * (1 - t), Math.pow(t, 3)];
    const x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
    const y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;
    return {
      x,
      y
    };
  }
};
var StraightEdge = class extends EdgeBase {
  /**
   * Create a new instance.
   * @param options - The options object of given edge.
   * @param body - The body of the network.
   * @param labelModule - Label module.
   */
  constructor(options2, body, labelModule) {
    super(options2, body, labelModule);
  }
  /** @inheritDoc */
  _line(ctx, values3) {
    ctx.beginPath();
    ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
    ctx.lineTo(this.toPoint.x, this.toPoint.y);
    this.enableShadow(ctx, values3);
    ctx.stroke();
    this.disableShadow(ctx, values3);
  }
  /** @inheritDoc */
  getViaNode() {
    return void 0;
  }
  /** @inheritDoc */
  getPoint(position) {
    return {
      x: (1 - position) * this.fromPoint.x + position * this.toPoint.x,
      y: (1 - position) * this.fromPoint.y + position * this.toPoint.y
    };
  }
  /** @inheritDoc */
  _findBorderPosition(nearNode, ctx) {
    let node1 = this.to;
    let node2 = this.from;
    if (nearNode.id === this.from.id) {
      node1 = this.from;
      node2 = this.to;
    }
    const angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
    const dx = node1.x - node2.x;
    const dy = node1.y - node2.y;
    const edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
    const toBorderDist = nearNode.distanceToBorder(ctx, angle);
    const toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;
    return {
      x: (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x,
      y: (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y,
      t: 0
    };
  }
  /** @inheritDoc */
  _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
    return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
  }
};
var Edge = class _Edge {
  /**
   * @param {object} options        values specific to this edge, must contain at least 'from' and 'to'
   * @param {object} body           shared state from Network instance
   * @param {Network.Images} imagelist  A list with images. Only needed when the edge has image arrows.
   * @param {object} globalOptions  options from the EdgesHandler instance
   * @param {object} defaultOptions default options from the EdgeHandler instance. Value and reference are constant
   */
  constructor(options2, body, imagelist, globalOptions, defaultOptions) {
    if (body === void 0) {
      throw new Error("No body provided");
    }
    this.options = bridgeObject(globalOptions);
    this.globalOptions = globalOptions;
    this.defaultOptions = defaultOptions;
    this.body = body;
    this.imagelist = imagelist;
    this.id = void 0;
    this.fromId = void 0;
    this.toId = void 0;
    this.selected = false;
    this.hover = false;
    this.labelDirty = true;
    this.baseWidth = this.options.width;
    this.baseFontSize = this.options.font.size;
    this.from = void 0;
    this.to = void 0;
    this.edgeType = void 0;
    this.connected = false;
    this.labelModule = new Label(
      this.body,
      this.options,
      true
      /* It's an edge label */
    );
    this.setOptions(options2);
  }
  /**
   * Set or overwrite options for the edge
   * @param {object} options  an object with options
   * @returns {undefined|boolean} undefined if no options, true if layout affecting data changed, false otherwise.
   */
  setOptions(options2) {
    if (!options2) {
      return;
    }
    let affectsLayout = typeof options2.physics !== "undefined" && this.options.physics !== options2.physics || typeof options2.hidden !== "undefined" && (this.options.hidden || false) !== (options2.hidden || false) || typeof options2.from !== "undefined" && this.options.from !== options2.from || typeof options2.to !== "undefined" && this.options.to !== options2.to;
    _Edge.parseOptions(this.options, options2, true, this.globalOptions);
    if (options2.id !== void 0) {
      this.id = options2.id;
    }
    if (options2.from !== void 0) {
      this.fromId = options2.from;
    }
    if (options2.to !== void 0) {
      this.toId = options2.to;
    }
    if (options2.title !== void 0) {
      this.title = options2.title;
    }
    if (options2.value !== void 0) {
      options2.value = _parseFloat$1(options2.value);
    }
    const pile = [options2, this.options, this.defaultOptions];
    this.chooser = choosify("edge", pile);
    this.updateLabelModule(options2);
    affectsLayout = this.updateEdgeType() || affectsLayout;
    this._setInteractionWidths();
    this.connect();
    return affectsLayout;
  }
  /**
   *
   * @param {object} parentOptions
   * @param {object} newOptions
   * @param {boolean} [allowDeletion]
   * @param {object} [globalOptions]
   * @param {boolean} [copyFromGlobals]
   */
  static parseOptions(parentOptions, newOptions) {
    let allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    let globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let copyFromGlobals = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    const fields = ["endPointOffset", "arrowStrikethrough", "id", "from", "hidden", "hoverWidth", "labelHighlightBold", "length", "line", "opacity", "physics", "scaling", "selectionWidth", "selfReferenceSize", "selfReference", "to", "title", "value", "width", "font", "chosen", "widthConstraint"];
    selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);
    if (newOptions.endPointOffset !== void 0 && newOptions.endPointOffset.from !== void 0) {
      if (_Number$isFinite(newOptions.endPointOffset.from)) {
        parentOptions.endPointOffset.from = newOptions.endPointOffset.from;
      } else {
        parentOptions.endPointOffset.from = globalOptions.endPointOffset.from !== void 0 ? globalOptions.endPointOffset.from : 0;
        console.error("endPointOffset.from is not a valid number");
      }
    }
    if (newOptions.endPointOffset !== void 0 && newOptions.endPointOffset.to !== void 0) {
      if (_Number$isFinite(newOptions.endPointOffset.to)) {
        parentOptions.endPointOffset.to = newOptions.endPointOffset.to;
      } else {
        parentOptions.endPointOffset.to = globalOptions.endPointOffset.to !== void 0 ? globalOptions.endPointOffset.to : 0;
        console.error("endPointOffset.to is not a valid number");
      }
    }
    if (isValidLabel(newOptions.label)) {
      parentOptions.label = newOptions.label;
    } else if (!isValidLabel(parentOptions.label)) {
      parentOptions.label = void 0;
    }
    mergeOptions(parentOptions, newOptions, "smooth", globalOptions);
    mergeOptions(parentOptions, newOptions, "shadow", globalOptions);
    mergeOptions(parentOptions, newOptions, "background", globalOptions);
    if (newOptions.dashes !== void 0 && newOptions.dashes !== null) {
      parentOptions.dashes = newOptions.dashes;
    } else if (allowDeletion === true && newOptions.dashes === null) {
      parentOptions.dashes = _Object$create(globalOptions.dashes);
    }
    if (newOptions.scaling !== void 0 && newOptions.scaling !== null) {
      if (newOptions.scaling.min !== void 0) {
        parentOptions.scaling.min = newOptions.scaling.min;
      }
      if (newOptions.scaling.max !== void 0) {
        parentOptions.scaling.max = newOptions.scaling.max;
      }
      mergeOptions(parentOptions.scaling, newOptions.scaling, "label", globalOptions.scaling);
    } else if (allowDeletion === true && newOptions.scaling === null) {
      parentOptions.scaling = _Object$create(globalOptions.scaling);
    }
    if (newOptions.arrows !== void 0 && newOptions.arrows !== null) {
      if (typeof newOptions.arrows === "string") {
        const arrows = newOptions.arrows.toLowerCase();
        parentOptions.arrows.to.enabled = _indexOfInstanceProperty(arrows).call(arrows, "to") != -1;
        parentOptions.arrows.middle.enabled = _indexOfInstanceProperty(arrows).call(arrows, "middle") != -1;
        parentOptions.arrows.from.enabled = _indexOfInstanceProperty(arrows).call(arrows, "from") != -1;
      } else if (typeof newOptions.arrows === "object") {
        mergeOptions(parentOptions.arrows, newOptions.arrows, "to", globalOptions.arrows);
        mergeOptions(parentOptions.arrows, newOptions.arrows, "middle", globalOptions.arrows);
        mergeOptions(parentOptions.arrows, newOptions.arrows, "from", globalOptions.arrows);
      } else {
        throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + _JSON$stringify(newOptions.arrows));
      }
    } else if (allowDeletion === true && newOptions.arrows === null) {
      parentOptions.arrows = _Object$create(globalOptions.arrows);
    }
    if (newOptions.color !== void 0 && newOptions.color !== null) {
      const fromColor = isString(newOptions.color) ? {
        color: newOptions.color,
        highlight: newOptions.color,
        hover: newOptions.color,
        inherit: false,
        opacity: 1
      } : newOptions.color;
      const toColor = parentOptions.color;
      if (copyFromGlobals) {
        deepExtend(toColor, globalOptions.color, false, allowDeletion);
      } else {
        for (const i in toColor) {
          if (Object.prototype.hasOwnProperty.call(toColor, i)) {
            delete toColor[i];
          }
        }
      }
      if (isString(toColor)) {
        toColor.color = toColor;
        toColor.highlight = toColor;
        toColor.hover = toColor;
        toColor.inherit = false;
        if (fromColor.opacity === void 0) {
          toColor.opacity = 1;
        }
      } else {
        let colorsDefined = false;
        if (fromColor.color !== void 0) {
          toColor.color = fromColor.color;
          colorsDefined = true;
        }
        if (fromColor.highlight !== void 0) {
          toColor.highlight = fromColor.highlight;
          colorsDefined = true;
        }
        if (fromColor.hover !== void 0) {
          toColor.hover = fromColor.hover;
          colorsDefined = true;
        }
        if (fromColor.inherit !== void 0) {
          toColor.inherit = fromColor.inherit;
        }
        if (fromColor.opacity !== void 0) {
          toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));
        }
        if (colorsDefined === true) {
          toColor.inherit = false;
        } else {
          if (toColor.inherit === void 0) {
            toColor.inherit = "from";
          }
        }
      }
    } else if (allowDeletion === true && newOptions.color === null) {
      parentOptions.color = bridgeObject(globalOptions.color);
    }
    if (allowDeletion === true && newOptions.font === null) {
      parentOptions.font = bridgeObject(globalOptions.font);
    }
    if (Object.prototype.hasOwnProperty.call(newOptions, "selfReferenceSize")) {
      console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}");
      parentOptions.selfReference.size = newOptions.selfReferenceSize;
    }
  }
  /**
   *
   * @returns {ArrowOptions}
   */
  getFormattingValues() {
    const toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;
    const fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;
    const middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;
    const inheritsColor = this.options.color.inherit;
    const values3 = {
      toArrow,
      toArrowScale: this.options.arrows.to.scaleFactor,
      toArrowType: this.options.arrows.to.type,
      toArrowSrc: this.options.arrows.to.src,
      toArrowImageWidth: this.options.arrows.to.imageWidth,
      toArrowImageHeight: this.options.arrows.to.imageHeight,
      middleArrow,
      middleArrowScale: this.options.arrows.middle.scaleFactor,
      middleArrowType: this.options.arrows.middle.type,
      middleArrowSrc: this.options.arrows.middle.src,
      middleArrowImageWidth: this.options.arrows.middle.imageWidth,
      middleArrowImageHeight: this.options.arrows.middle.imageHeight,
      fromArrow,
      fromArrowScale: this.options.arrows.from.scaleFactor,
      fromArrowType: this.options.arrows.from.type,
      fromArrowSrc: this.options.arrows.from.src,
      fromArrowImageWidth: this.options.arrows.from.imageWidth,
      fromArrowImageHeight: this.options.arrows.from.imageHeight,
      arrowStrikethrough: this.options.arrowStrikethrough,
      color: inheritsColor ? void 0 : this.options.color.color,
      inheritsColor,
      opacity: this.options.color.opacity,
      hidden: this.options.hidden,
      length: this.options.length,
      shadow: this.options.shadow.enabled,
      shadowColor: this.options.shadow.color,
      shadowSize: this.options.shadow.size,
      shadowX: this.options.shadow.x,
      shadowY: this.options.shadow.y,
      dashes: this.options.dashes,
      width: this.options.width,
      background: this.options.background.enabled,
      backgroundColor: this.options.background.color,
      backgroundSize: this.options.background.size,
      backgroundDashes: this.options.background.dashes
    };
    if (this.selected || this.hover) {
      if (this.chooser === true) {
        if (this.selected) {
          const selectedWidth = this.options.selectionWidth;
          if (typeof selectedWidth === "function") {
            values3.width = selectedWidth(values3.width);
          } else if (typeof selectedWidth === "number") {
            values3.width += selectedWidth;
          }
          values3.width = Math.max(values3.width, 0.3 / this.body.view.scale);
          values3.color = this.options.color.highlight;
          values3.shadow = this.options.shadow.enabled;
        } else if (this.hover) {
          const hoverWidth = this.options.hoverWidth;
          if (typeof hoverWidth === "function") {
            values3.width = hoverWidth(values3.width);
          } else if (typeof hoverWidth === "number") {
            values3.width += hoverWidth;
          }
          values3.width = Math.max(values3.width, 0.3 / this.body.view.scale);
          values3.color = this.options.color.hover;
          values3.shadow = this.options.shadow.enabled;
        }
      } else if (typeof this.chooser === "function") {
        this.chooser(values3, this.options.id, this.selected, this.hover);
        if (values3.color !== void 0) {
          values3.inheritsColor = false;
        }
        if (values3.shadow === false) {
          if (values3.shadowColor !== this.options.shadow.color || values3.shadowSize !== this.options.shadow.size || values3.shadowX !== this.options.shadow.x || values3.shadowY !== this.options.shadow.y) {
            values3.shadow = true;
          }
        }
      }
    } else {
      values3.shadow = this.options.shadow.enabled;
      values3.width = Math.max(values3.width, 0.3 / this.body.view.scale);
    }
    return values3;
  }
  /**
   * update the options in the label module
   * @param {object} options
   */
  updateLabelModule(options2) {
    const pile = [
      options2,
      this.options,
      this.globalOptions,
      // Currently set global edge options
      this.defaultOptions
    ];
    this.labelModule.update(this.options, pile);
    if (this.labelModule.baseSize !== void 0) {
      this.baseFontSize = this.labelModule.baseSize;
    }
  }
  /**
   * update the edge type, set the options
   * @returns {boolean}
   */
  updateEdgeType() {
    const smooth = this.options.smooth;
    let dataChanged = false;
    let changeInType = true;
    if (this.edgeType !== void 0) {
      if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === "dynamic" || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === "cubicBezier" || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== "dynamic" && smooth.type !== "cubicBezier" || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {
        changeInType = false;
      }
      if (changeInType === true) {
        dataChanged = this.cleanup();
      }
    }
    if (changeInType === true) {
      if (smooth.enabled === true) {
        if (smooth.type === "dynamic") {
          dataChanged = true;
          this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);
        } else if (smooth.type === "cubicBezier") {
          this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);
        } else {
          this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);
        }
      } else {
        this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);
      }
    } else {
      this.edgeType.setOptions(this.options);
    }
    return dataChanged;
  }
  /**
   * Connect an edge to its nodes
   */
  connect() {
    this.disconnect();
    this.from = this.body.nodes[this.fromId] || void 0;
    this.to = this.body.nodes[this.toId] || void 0;
    this.connected = this.from !== void 0 && this.to !== void 0;
    if (this.connected === true) {
      this.from.attachEdge(this);
      this.to.attachEdge(this);
    } else {
      if (this.from) {
        this.from.detachEdge(this);
      }
      if (this.to) {
        this.to.detachEdge(this);
      }
    }
    this.edgeType.connect();
  }
  /**
   * Disconnect an edge from its nodes
   */
  disconnect() {
    if (this.from) {
      this.from.detachEdge(this);
      this.from = void 0;
    }
    if (this.to) {
      this.to.detachEdge(this);
      this.to = void 0;
    }
    this.connected = false;
  }
  /**
   * get the title of this edge.
   * @returns {string} title    The title of the edge, or undefined when no title
   *                           has been set.
   */
  getTitle() {
    return this.title;
  }
  /**
   * check if this node is selecte
   * @returns {boolean} selected   True if node is selected, else false
   */
  isSelected() {
    return this.selected;
  }
  /**
   * Retrieve the value of the edge. Can be undefined
   * @returns {number} value
   */
  getValue() {
    return this.options.value;
  }
  /**
   * Adjust the value range of the edge. The edge will adjust it's width
   * based on its value.
   * @param {number} min
   * @param {number} max
   * @param {number} total
   */
  setValueRange(min2, max2, total) {
    if (this.options.value !== void 0) {
      const scale = this.options.scaling.customScalingFunction(min2, max2, total, this.options.value);
      const widthDiff = this.options.scaling.max - this.options.scaling.min;
      if (this.options.scaling.label.enabled === true) {
        const fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
        this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
      }
      this.options.width = this.options.scaling.min + scale * widthDiff;
    } else {
      this.options.width = this.baseWidth;
      this.options.font.size = this.baseFontSize;
    }
    this._setInteractionWidths();
    this.updateLabelModule();
  }
  /**
   *
   * @private
   */
  _setInteractionWidths() {
    if (typeof this.options.hoverWidth === "function") {
      this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
    } else {
      this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
    }
    if (typeof this.options.selectionWidth === "function") {
      this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
    } else {
      this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
    }
  }
  /**
   * Redraw a edge
   * Draw this edge in the given canvas
   * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
   * @param {CanvasRenderingContext2D}   ctx
   */
  draw(ctx) {
    const values3 = this.getFormattingValues();
    if (values3.hidden) {
      return;
    }
    const viaNode = this.edgeType.getViaNode();
    this.edgeType.drawLine(ctx, values3, this.selected, this.hover, viaNode);
    this.drawLabel(ctx, viaNode);
  }
  /**
   * Redraw arrows
   * Draw this arrows in the given canvas
   * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
   * @param {CanvasRenderingContext2D}   ctx
   */
  drawArrows(ctx) {
    const values3 = this.getFormattingValues();
    if (values3.hidden) {
      return;
    }
    const viaNode = this.edgeType.getViaNode();
    const arrowData = {};
    this.edgeType.fromPoint = this.edgeType.from;
    this.edgeType.toPoint = this.edgeType.to;
    if (values3.fromArrow) {
      arrowData.from = this.edgeType.getArrowData(ctx, "from", viaNode, this.selected, this.hover, values3);
      if (values3.arrowStrikethrough === false)
        this.edgeType.fromPoint = arrowData.from.core;
      if (values3.fromArrowSrc) {
        arrowData.from.image = this.imagelist.load(values3.fromArrowSrc);
      }
      if (values3.fromArrowImageWidth) {
        arrowData.from.imageWidth = values3.fromArrowImageWidth;
      }
      if (values3.fromArrowImageHeight) {
        arrowData.from.imageHeight = values3.fromArrowImageHeight;
      }
    }
    if (values3.toArrow) {
      arrowData.to = this.edgeType.getArrowData(ctx, "to", viaNode, this.selected, this.hover, values3);
      if (values3.arrowStrikethrough === false)
        this.edgeType.toPoint = arrowData.to.core;
      if (values3.toArrowSrc) {
        arrowData.to.image = this.imagelist.load(values3.toArrowSrc);
      }
      if (values3.toArrowImageWidth) {
        arrowData.to.imageWidth = values3.toArrowImageWidth;
      }
      if (values3.toArrowImageHeight) {
        arrowData.to.imageHeight = values3.toArrowImageHeight;
      }
    }
    if (values3.middleArrow) {
      arrowData.middle = this.edgeType.getArrowData(ctx, "middle", viaNode, this.selected, this.hover, values3);
      if (values3.middleArrowSrc) {
        arrowData.middle.image = this.imagelist.load(values3.middleArrowSrc);
      }
      if (values3.middleArrowImageWidth) {
        arrowData.middle.imageWidth = values3.middleArrowImageWidth;
      }
      if (values3.middleArrowImageHeight) {
        arrowData.middle.imageHeight = values3.middleArrowImageHeight;
      }
    }
    if (values3.fromArrow) {
      this.edgeType.drawArrowHead(ctx, values3, this.selected, this.hover, arrowData.from);
    }
    if (values3.middleArrow) {
      this.edgeType.drawArrowHead(ctx, values3, this.selected, this.hover, arrowData.middle);
    }
    if (values3.toArrow) {
      this.edgeType.drawArrowHead(ctx, values3, this.selected, this.hover, arrowData.to);
    }
  }
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Node} viaNode
   */
  drawLabel(ctx, viaNode) {
    if (this.options.label !== void 0) {
      const node1 = this.from;
      const node2 = this.to;
      if (this.labelModule.differentState(this.selected, this.hover)) {
        this.labelModule.getTextSize(ctx, this.selected, this.hover);
      }
      let point;
      if (node1.id != node2.id) {
        this.labelModule.pointToSelf = false;
        point = this.edgeType.getPoint(0.5, viaNode);
        ctx.save();
        const rotationPoint = this._getRotation(ctx);
        if (rotationPoint.angle != 0) {
          ctx.translate(rotationPoint.x, rotationPoint.y);
          ctx.rotate(rotationPoint.angle);
        }
        this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
        ctx.restore();
      } else {
        this.labelModule.pointToSelf = true;
        const coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, this.options.selfReference.size, node1);
        point = this._pointOnCircle(coordinates.x, coordinates.y, this.options.selfReference.size, this.options.selfReference.angle);
        this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
      }
    }
  }
  /**
   * Determine all visual elements of this edge instance, in which the given
   * point falls within the bounding shape.
   * @param {point} point
   * @returns {Array.<edgeClickItem|edgeLabelClickItem>} list with the items which are on the point
   */
  getItemsOnPoint(point) {
    const ret = [];
    if (this.labelModule.visible()) {
      const rotationPoint = this._getRotation();
      if (pointInRect(this.labelModule.getSize(), point, rotationPoint)) {
        ret.push({
          edgeId: this.id,
          labelId: 0
        });
      }
    }
    const obj = {
      left: point.x,
      top: point.y
    };
    if (this.isOverlappingWith(obj)) {
      ret.push({
        edgeId: this.id
      });
    }
    return ret;
  }
  /**
   * Check if this object is overlapping with the provided object
   * @param {object} obj   an object with parameters left, top
   * @returns {boolean}     True if location is located on the edge
   */
  isOverlappingWith(obj) {
    if (this.connected) {
      const distMax = 10;
      const xFrom = this.from.x;
      const yFrom = this.from.y;
      const xTo = this.to.x;
      const yTo = this.to.y;
      const xObj = obj.left;
      const yObj = obj.top;
      const dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);
      return dist < distMax;
    } else {
      return false;
    }
  }
  /**
   * Determine the rotation point, if any.
   * @param {CanvasRenderingContext2D} [ctx] if passed, do a recalculation of the label size
   * @returns {rotationPoint} the point to rotate around and the angle in radians to rotate
   * @private
   */
  _getRotation(ctx) {
    const viaNode = this.edgeType.getViaNode();
    const point = this.edgeType.getPoint(0.5, viaNode);
    if (ctx !== void 0) {
      this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);
    }
    const ret = {
      x: point.x,
      y: this.labelModule.size.yLine,
      angle: 0
    };
    if (!this.labelModule.visible()) {
      return ret;
    }
    if (this.options.font.align === "horizontal") {
      return ret;
    }
    const dy = this.from.y - this.to.y;
    const dx = this.from.x - this.to.x;
    let angle = Math.atan2(dy, dx);
    if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {
      angle += Math.PI;
    }
    ret.angle = angle;
    return ret;
  }
  /**
   * Get a point on a circle
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {object} point
   * @private
   */
  _pointOnCircle(x, y, radius, angle) {
    return {
      x: x + radius * Math.cos(angle),
      y: y - radius * Math.sin(angle)
    };
  }
  /**
   * Sets selected state to true
   */
  select() {
    this.selected = true;
  }
  /**
   * Sets selected state to false
   */
  unselect() {
    this.selected = false;
  }
  /**
   * cleans all required things on delete
   * @returns {*}
   */
  cleanup() {
    return this.edgeType.cleanup();
  }
  /**
   * Remove edge from the list and perform necessary cleanup.
   */
  remove() {
    this.cleanup();
    this.disconnect();
    delete this.body.edges[this.id];
  }
  /**
   * Check if both connecting nodes exist
   * @returns {boolean}
   */
  endPointsValid() {
    return this.body.nodes[this.fromId] !== void 0 && this.body.nodes[this.toId] !== void 0;
  }
};
var EdgesHandler = class {
  /**
   * @param {object} body
   * @param {Array.<Image>} images
   * @param {Array.<Group>} groups
   */
  constructor(body, images, groups) {
    var _context;
    this.body = body;
    this.images = images;
    this.groups = groups;
    this.body.functions.createEdge = _bindInstanceProperty(_context = this.create).call(_context, this);
    this.edgesListeners = {
      add: (event, params) => {
        this.add(params.items);
      },
      update: (event, params) => {
        this.update(params.items);
      },
      remove: (event, params) => {
        this.remove(params.items);
      }
    };
    this.options = {};
    this.defaultOptions = {
      arrows: {
        to: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        },
        // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
        middle: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        },
        from: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        }
      },
      endPointOffset: {
        from: 0,
        to: 0
      },
      arrowStrikethrough: true,
      color: {
        color: "#848484",
        highlight: "#848484",
        hover: "#848484",
        inherit: "from",
        opacity: 1
      },
      dashes: false,
      font: {
        color: "#343434",
        size: 14,
        // px
        face: "arial",
        background: "none",
        strokeWidth: 2,
        // px
        strokeColor: "#ffffff",
        align: "horizontal",
        multi: false,
        vadjust: 0,
        bold: {
          mod: "bold"
        },
        boldital: {
          mod: "bold italic"
        },
        ital: {
          mod: "italic"
        },
        mono: {
          mod: "",
          size: 15,
          // px
          face: "courier new",
          vadjust: 2
        }
      },
      hidden: false,
      hoverWidth: 1.5,
      label: void 0,
      labelHighlightBold: true,
      length: void 0,
      physics: true,
      scaling: {
        min: 1,
        max: 15,
        label: {
          enabled: true,
          min: 14,
          max: 30,
          maxVisible: 30,
          drawThreshold: 5
        },
        customScalingFunction: function(min2, max2, total, value) {
          if (max2 === min2) {
            return 0.5;
          } else {
            const scale = 1 / (max2 - min2);
            return Math.max(0, (value - min2) * scale);
          }
        }
      },
      selectionWidth: 1.5,
      selfReference: {
        size: 20,
        angle: Math.PI / 4,
        renderBehindTheNode: true
      },
      shadow: {
        enabled: false,
        color: "rgba(0,0,0,0.5)",
        size: 10,
        x: 5,
        y: 5
      },
      background: {
        enabled: false,
        color: "rgba(111,111,111,1)",
        size: 10,
        dashes: false
      },
      smooth: {
        enabled: true,
        type: "dynamic",
        forceDirection: "none",
        roundness: 0.5
      },
      title: void 0,
      width: 1,
      value: void 0
    };
    deepExtend(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    var _this = this, _context2, _context3;
    this.body.emitter.on("_forceDisableDynamicCurves", function(type) {
      let emit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (type === "dynamic") {
        type = "continuous";
      }
      let dataChanged = false;
      for (const edgeId in _this.body.edges) {
        if (Object.prototype.hasOwnProperty.call(_this.body.edges, edgeId)) {
          const edge = _this.body.edges[edgeId];
          const edgeData = _this.body.data.edges.get(edgeId);
          if (edgeData != null) {
            const smoothOptions = edgeData.smooth;
            if (smoothOptions !== void 0) {
              if (smoothOptions.enabled === true && smoothOptions.type === "dynamic") {
                if (type === void 0) {
                  edge.setOptions({
                    smooth: false
                  });
                } else {
                  edge.setOptions({
                    smooth: {
                      type
                    }
                  });
                }
                dataChanged = true;
              }
            }
          }
        }
      }
      if (emit === true && dataChanged === true) {
        _this.body.emitter.emit("_dataChanged");
      }
    });
    this.body.emitter.on("_dataUpdated", () => {
      this.reconnectEdges();
    });
    this.body.emitter.on("refreshEdges", _bindInstanceProperty(_context2 = this.refresh).call(_context2, this));
    this.body.emitter.on("refresh", _bindInstanceProperty(_context3 = this.refresh).call(_context3, this));
    this.body.emitter.on("destroy", () => {
      forEach$1(this.edgesListeners, (callback, event) => {
        if (this.body.data.edges)
          this.body.data.edges.off(event, callback);
      });
      delete this.body.functions.createEdge;
      delete this.edgesListeners.add;
      delete this.edgesListeners.update;
      delete this.edgesListeners.remove;
      delete this.edgesListeners;
    });
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      Edge.parseOptions(this.options, options2, true, this.defaultOptions, true);
      let dataChanged = false;
      if (options2.smooth !== void 0) {
        for (const edgeId in this.body.edges) {
          if (Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) {
            dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
          }
        }
      }
      if (options2.font !== void 0) {
        for (const edgeId in this.body.edges) {
          if (Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) {
            this.body.edges[edgeId].updateLabelModule();
          }
        }
      }
      if (options2.hidden !== void 0 || options2.physics !== void 0 || dataChanged === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }
  /**
   * Load edges by reading the data table
   * @param {Array | DataSet | DataView} edges    The data containing the edges.
   * @param {boolean} [doNotEmit] - Suppress data changed event.
   * @private
   */
  setData(edges) {
    let doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const oldEdgesData = this.body.data.edges;
    if (isDataViewLike("id", edges)) {
      this.body.data.edges = edges;
    } else if (_Array$isArray(edges)) {
      this.body.data.edges = new DataSet();
      this.body.data.edges.add(edges);
    } else if (!edges) {
      this.body.data.edges = new DataSet();
    } else {
      throw new TypeError("Array or DataSet expected");
    }
    if (oldEdgesData) {
      forEach$1(this.edgesListeners, (callback, event) => {
        oldEdgesData.off(event, callback);
      });
    }
    this.body.edges = {};
    if (this.body.data.edges) {
      forEach$1(this.edgesListeners, (callback, event) => {
        this.body.data.edges.on(event, callback);
      });
      const ids = this.body.data.edges.getIds();
      this.add(ids, true);
    }
    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
    if (doNotEmit === false) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   * Add edges
   * @param {number[] | string[]} ids
   * @param {boolean} [doNotEmit]
   * @private
   */
  add(ids) {
    let doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const edges = this.body.edges;
    const edgesData = this.body.data.edges;
    for (let i = 0; i < ids.length; i++) {
      const id2 = ids[i];
      const oldEdge = edges[id2];
      if (oldEdge) {
        oldEdge.disconnect();
      }
      const data2 = edgesData.get(id2, {
        showInternalIds: true
      });
      edges[id2] = this.create(data2);
    }
    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
    if (doNotEmit === false) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   * Update existing edges, or create them when not yet existing
   * @param {number[] | string[]} ids
   * @private
   */
  update(ids) {
    const edges = this.body.edges;
    const edgesData = this.body.data.edges;
    let dataChanged = false;
    for (let i = 0; i < ids.length; i++) {
      const id2 = ids[i];
      const data2 = edgesData.get(id2);
      const edge = edges[id2];
      if (edge !== void 0) {
        edge.disconnect();
        dataChanged = edge.setOptions(data2) || dataChanged;
        edge.connect();
      } else {
        this.body.edges[id2] = this.create(data2);
        dataChanged = true;
      }
    }
    if (dataChanged === true) {
      this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
      this.body.emitter.emit("_dataChanged");
    } else {
      this.body.emitter.emit("_dataUpdated");
    }
  }
  /**
   * Remove existing edges. Non existing ids will be ignored
   * @param {number[] | string[]} ids
   * @param {boolean} [emit]
   * @private
   */
  remove(ids) {
    let emit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (ids.length === 0)
      return;
    const edges = this.body.edges;
    forEach$1(ids, (id2) => {
      const edge = edges[id2];
      if (edge !== void 0) {
        edge.remove();
      }
    });
    if (emit) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   * Refreshes Edge Handler
   */
  refresh() {
    forEach$1(this.body.edges, (edge, edgeId) => {
      const data2 = this.body.data.edges.get(edgeId);
      if (data2 !== void 0) {
        edge.setOptions(data2);
      }
    });
  }
  /**
   *
   * @param {object} properties
   * @returns {Edge}
   */
  create(properties) {
    return new Edge(properties, this.body, this.images, this.options, this.defaultOptions);
  }
  /**
   * Reconnect all edges
   * @private
   */
  reconnectEdges() {
    let id2;
    const nodes = this.body.nodes;
    const edges = this.body.edges;
    for (id2 in nodes) {
      if (Object.prototype.hasOwnProperty.call(nodes, id2)) {
        nodes[id2].edges = [];
      }
    }
    for (id2 in edges) {
      if (Object.prototype.hasOwnProperty.call(edges, id2)) {
        const edge = edges[id2];
        edge.from = null;
        edge.to = null;
        edge.connect();
      }
    }
  }
  /**
   *
   * @param {Edge.id} edgeId
   * @returns {Array}
   */
  getConnectedNodes(edgeId) {
    const nodeList = [];
    if (this.body.edges[edgeId] !== void 0) {
      const edge = this.body.edges[edgeId];
      if (edge.fromId !== void 0) {
        nodeList.push(edge.fromId);
      }
      if (edge.toId !== void 0) {
        nodeList.push(edge.toId);
      }
    }
    return nodeList;
  }
  /**
   * There is no direct relation between the nodes and the edges DataSet,
   * so the right place to do call this is in the handler for event `_dataUpdated`.
   */
  _updateState() {
    this._addMissingEdges();
    this._removeInvalidEdges();
  }
  /**
   * Scan for missing nodes and remove corresponding edges, if any.
   * @private
   */
  _removeInvalidEdges() {
    const edgesToDelete = [];
    forEach$1(this.body.edges, (edge, id2) => {
      const toNode = this.body.nodes[edge.toId];
      const fromNode = this.body.nodes[edge.fromId];
      if (toNode !== void 0 && toNode.isCluster === true || fromNode !== void 0 && fromNode.isCluster === true) {
        return;
      }
      if (toNode === void 0 || fromNode === void 0) {
        edgesToDelete.push(id2);
      }
    });
    this.remove(edgesToDelete, false);
  }
  /**
   * add all edges from dataset that are not in the cached state
   * @private
   */
  _addMissingEdges() {
    const edgesData = this.body.data.edges;
    if (edgesData === void 0 || edgesData === null) {
      return;
    }
    const edges = this.body.edges;
    const addIds = [];
    _forEachInstanceProperty(edgesData).call(edgesData, (edgeData, edgeId) => {
      const edge = edges[edgeId];
      if (edge === void 0) {
        addIds.push(edgeId);
      }
    });
    this.add(addIds, true);
  }
};
var BarnesHutSolver = class {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    this.body = body;
    this.physicsBody = physicsBody;
    this.barnesHutTree;
    this.setOptions(options2);
    this._rng = Alea("BARNES HUT SOLVER");
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
    this.thetaInversed = 1 / this.options.theta;
    this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
  }
  /**
   * This function calculates the forces the nodes apply on each other based on a gravitational model.
   * The Barnes Hut method is used to speed up this N-body simulation.
   * @private
   */
  solve() {
    if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
      let node;
      const nodes = this.body.nodes;
      const nodeIndices = this.physicsBody.physicsNodeIndices;
      const nodeCount = nodeIndices.length;
      const barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);
      this.barnesHutTree = barnesHutTree;
      for (let i = 0; i < nodeCount; i++) {
        node = nodes[nodeIndices[i]];
        if (node.options.mass > 0) {
          this._getForceContributions(barnesHutTree.root, node);
        }
      }
    }
  }
  /**
   * @param {object} parentBranch
   * @param {Node} node
   * @private
   */
  _getForceContributions(parentBranch, node) {
    this._getForceContribution(parentBranch.children.NW, node);
    this._getForceContribution(parentBranch.children.NE, node);
    this._getForceContribution(parentBranch.children.SW, node);
    this._getForceContribution(parentBranch.children.SE, node);
  }
  /**
   * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
   * If a region contains a single node, we check if it is not itself, then we apply the force.
   * @param {object} parentBranch
   * @param {Node} node
   * @private
   */
  _getForceContribution(parentBranch, node) {
    if (parentBranch.childrenCount > 0) {
      const dx = parentBranch.centerOfMass.x - node.x;
      const dy = parentBranch.centerOfMass.y - node.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      if (distance * parentBranch.calcSize > this.thetaInversed) {
        this._calculateForces(distance, dx, dy, node, parentBranch);
      } else {
        if (parentBranch.childrenCount === 4) {
          this._getForceContributions(parentBranch, node);
        } else {
          if (parentBranch.children.data.id != node.id) {
            this._calculateForces(distance, dx, dy, node, parentBranch);
          }
        }
      }
    }
  }
  /**
   * Calculate the forces based on the distance.
   * @param {number} distance
   * @param {number} dx
   * @param {number} dy
   * @param {Node} node
   * @param {object} parentBranch
   * @private
   */
  _calculateForces(distance, dx, dy, node, parentBranch) {
    if (distance === 0) {
      distance = 0.1;
      dx = distance;
    }
    if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
      distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
    }
    const gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);
    const fx = dx * gravityForce;
    const fy = dy * gravityForce;
    this.physicsBody.forces[node.id].x += fx;
    this.physicsBody.forces[node.id].y += fy;
  }
  /**
   * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
   * @param {Array.<Node>} nodes
   * @param {Array.<number>} nodeIndices
   * @returns {{root: {centerOfMass: {x: number, y: number}, mass: number, range: {minX: number, maxX: number, minY: number, maxY: number}, size: number, calcSize: number, children: {data: null}, maxWidth: number, level: number, childrenCount: number}}} BarnesHutTree
   * @private
   */
  _formBarnesHutTree(nodes, nodeIndices) {
    let node;
    const nodeCount = nodeIndices.length;
    let minX = nodes[nodeIndices[0]].x;
    let minY = nodes[nodeIndices[0]].y;
    let maxX = nodes[nodeIndices[0]].x;
    let maxY = nodes[nodeIndices[0]].y;
    for (let i = 1; i < nodeCount; i++) {
      const node2 = nodes[nodeIndices[i]];
      const x = node2.x;
      const y = node2.y;
      if (node2.options.mass > 0) {
        if (x < minX) {
          minX = x;
        }
        if (x > maxX) {
          maxX = x;
        }
        if (y < minY) {
          minY = y;
        }
        if (y > maxY) {
          maxY = y;
        }
      }
    }
    const sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY);
    if (sizeDiff > 0) {
      minY -= 0.5 * sizeDiff;
      maxY += 0.5 * sizeDiff;
    } else {
      minX += 0.5 * sizeDiff;
      maxX -= 0.5 * sizeDiff;
    }
    const minimumTreeSize = 1e-5;
    const rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
    const halfRootSize = 0.5 * rootSize;
    const centerX = 0.5 * (minX + maxX), centerY = 0.5 * (minY + maxY);
    const barnesHutTree = {
      root: {
        centerOfMass: {
          x: 0,
          y: 0
        },
        mass: 0,
        range: {
          minX: centerX - halfRootSize,
          maxX: centerX + halfRootSize,
          minY: centerY - halfRootSize,
          maxY: centerY + halfRootSize
        },
        size: rootSize,
        calcSize: 1 / rootSize,
        children: {
          data: null
        },
        maxWidth: 0,
        level: 0,
        childrenCount: 4
      }
    };
    this._splitBranch(barnesHutTree.root);
    for (let i = 0; i < nodeCount; i++) {
      node = nodes[nodeIndices[i]];
      if (node.options.mass > 0) {
        this._placeInTree(barnesHutTree.root, node);
      }
    }
    return barnesHutTree;
  }
  /**
   * this updates the mass of a branch. this is increased by adding a node.
   * @param {object} parentBranch
   * @param {Node} node
   * @private
   */
  _updateBranchMass(parentBranch, node) {
    const centerOfMass = parentBranch.centerOfMass;
    const totalMass = parentBranch.mass + node.options.mass;
    const totalMassInv = 1 / totalMass;
    centerOfMass.x = centerOfMass.x * parentBranch.mass + node.x * node.options.mass;
    centerOfMass.x *= totalMassInv;
    centerOfMass.y = centerOfMass.y * parentBranch.mass + node.y * node.options.mass;
    centerOfMass.y *= totalMassInv;
    parentBranch.mass = totalMass;
    const biggestSize = Math.max(Math.max(node.height, node.radius), node.width);
    parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
  }
  /**
   * determine in which branch the node will be placed.
   * @param {object} parentBranch
   * @param {Node} node
   * @param {boolean} skipMassUpdate
   * @private
   */
  _placeInTree(parentBranch, node, skipMassUpdate) {
    if (skipMassUpdate != true || skipMassUpdate === void 0) {
      this._updateBranchMass(parentBranch, node);
    }
    const range = parentBranch.children.NW.range;
    let region;
    if (range.maxX > node.x) {
      if (range.maxY > node.y) {
        region = "NW";
      } else {
        region = "SW";
      }
    } else {
      if (range.maxY > node.y) {
        region = "NE";
      } else {
        region = "SE";
      }
    }
    this._placeInRegion(parentBranch, node, region);
  }
  /**
   * actually place the node in a region (or branch)
   * @param {object} parentBranch
   * @param {Node} node
   * @param {'NW'| 'NE' | 'SW' | 'SE'} region
   * @private
   */
  _placeInRegion(parentBranch, node, region) {
    const children = parentBranch.children[region];
    switch (children.childrenCount) {
      case 0:
        children.children.data = node;
        children.childrenCount = 1;
        this._updateBranchMass(children, node);
        break;
      case 1:
        if (children.children.data.x === node.x && children.children.data.y === node.y) {
          node.x += this._rng();
          node.y += this._rng();
        } else {
          this._splitBranch(children);
          this._placeInTree(children, node);
        }
        break;
      case 4:
        this._placeInTree(children, node);
        break;
    }
  }
  /**
   * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
   * after the split is complete.
   * @param {object} parentBranch
   * @private
   */
  _splitBranch(parentBranch) {
    let containedNode = null;
    if (parentBranch.childrenCount === 1) {
      containedNode = parentBranch.children.data;
      parentBranch.mass = 0;
      parentBranch.centerOfMass.x = 0;
      parentBranch.centerOfMass.y = 0;
    }
    parentBranch.childrenCount = 4;
    parentBranch.children.data = null;
    this._insertRegion(parentBranch, "NW");
    this._insertRegion(parentBranch, "NE");
    this._insertRegion(parentBranch, "SW");
    this._insertRegion(parentBranch, "SE");
    if (containedNode != null) {
      this._placeInTree(parentBranch, containedNode);
    }
  }
  /**
   * This function subdivides the region into four new segments.
   * Specifically, this inserts a single new segment.
   * It fills the children section of the parentBranch
   * @param {object} parentBranch
   * @param {'NW'| 'NE' | 'SW' | 'SE'} region
   * @private
   */
  _insertRegion(parentBranch, region) {
    let minX, maxX, minY, maxY;
    const childSize = 0.5 * parentBranch.size;
    switch (region) {
      case "NW":
        minX = parentBranch.range.minX;
        maxX = parentBranch.range.minX + childSize;
        minY = parentBranch.range.minY;
        maxY = parentBranch.range.minY + childSize;
        break;
      case "NE":
        minX = parentBranch.range.minX + childSize;
        maxX = parentBranch.range.maxX;
        minY = parentBranch.range.minY;
        maxY = parentBranch.range.minY + childSize;
        break;
      case "SW":
        minX = parentBranch.range.minX;
        maxX = parentBranch.range.minX + childSize;
        minY = parentBranch.range.minY + childSize;
        maxY = parentBranch.range.maxY;
        break;
      case "SE":
        minX = parentBranch.range.minX + childSize;
        maxX = parentBranch.range.maxX;
        minY = parentBranch.range.minY + childSize;
        maxY = parentBranch.range.maxY;
        break;
    }
    parentBranch.children[region] = {
      centerOfMass: {
        x: 0,
        y: 0
      },
      mass: 0,
      range: {
        minX,
        maxX,
        minY,
        maxY
      },
      size: 0.5 * parentBranch.size,
      calcSize: 2 * parentBranch.calcSize,
      children: {
        data: null
      },
      maxWidth: 0,
      level: parentBranch.level + 1,
      childrenCount: 0
    };
  }
  //---------------------------  DEBUGGING BELOW  ---------------------------//
  /**
   * This function is for debugging purposed, it draws the tree.
   * @param {CanvasRenderingContext2D} ctx
   * @param {string} color
   * @private
   */
  _debug(ctx, color) {
    if (this.barnesHutTree !== void 0) {
      ctx.lineWidth = 1;
      this._drawBranch(this.barnesHutTree.root, ctx, color);
    }
  }
  /**
   * This function is for debugging purposes. It draws the branches recursively.
   * @param {object} branch
   * @param {CanvasRenderingContext2D} ctx
   * @param {string} color
   * @private
   */
  _drawBranch(branch, ctx, color) {
    if (color === void 0) {
      color = "#FF0000";
    }
    if (branch.childrenCount === 4) {
      this._drawBranch(branch.children.NW, ctx);
      this._drawBranch(branch.children.NE, ctx);
      this._drawBranch(branch.children.SE, ctx);
      this._drawBranch(branch.children.SW, ctx);
    }
    ctx.strokeStyle = color;
    ctx.beginPath();
    ctx.moveTo(branch.range.minX, branch.range.minY);
    ctx.lineTo(branch.range.maxX, branch.range.minY);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(branch.range.maxX, branch.range.minY);
    ctx.lineTo(branch.range.maxX, branch.range.maxY);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(branch.range.maxX, branch.range.maxY);
    ctx.lineTo(branch.range.minX, branch.range.maxY);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(branch.range.minX, branch.range.maxY);
    ctx.lineTo(branch.range.minX, branch.range.minY);
    ctx.stroke();
  }
};
var RepulsionSolver = class {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    this._rng = Alea("REPULSION SOLVER");
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
  }
  /**
   * Calculate the forces the nodes apply on each other based on a repulsion field.
   * This field is linearly approximated.
   * @private
   */
  solve() {
    let dx, dy, distance, fx, fy, repulsingForce, node1, node2;
    const nodes = this.body.nodes;
    const nodeIndices = this.physicsBody.physicsNodeIndices;
    const forces = this.physicsBody.forces;
    const nodeDistance = this.options.nodeDistance;
    const a = -2 / 3 / nodeDistance;
    const b = 4 / 3;
    for (let i = 0; i < nodeIndices.length - 1; i++) {
      node1 = nodes[nodeIndices[i]];
      for (let j = i + 1; j < nodeIndices.length; j++) {
        node2 = nodes[nodeIndices[j]];
        dx = node2.x - node1.x;
        dy = node2.y - node1.y;
        distance = Math.sqrt(dx * dx + dy * dy);
        if (distance === 0) {
          distance = 0.1 * this._rng();
          dx = distance;
        }
        if (distance < 2 * nodeDistance) {
          if (distance < 0.5 * nodeDistance) {
            repulsingForce = 1;
          } else {
            repulsingForce = a * distance + b;
          }
          repulsingForce = repulsingForce / distance;
          fx = dx * repulsingForce;
          fy = dy * repulsingForce;
          forces[node1.id].x -= fx;
          forces[node1.id].y -= fy;
          forces[node2.id].x += fx;
          forces[node2.id].y += fy;
        }
      }
    }
  }
};
var HierarchicalRepulsionSolver = class {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
    this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
  }
  /**
   * Calculate the forces the nodes apply on each other based on a repulsion field.
   * This field is linearly approximated.
   * @private
   */
  solve() {
    const nodes = this.body.nodes;
    const nodeIndices = this.physicsBody.physicsNodeIndices;
    const forces = this.physicsBody.forces;
    const nodeDistance = this.options.nodeDistance;
    for (let i = 0; i < nodeIndices.length - 1; i++) {
      const node1 = nodes[nodeIndices[i]];
      for (let j = i + 1; j < nodeIndices.length; j++) {
        const node2 = nodes[nodeIndices[j]];
        if (node1.level === node2.level) {
          const theseNodesDistance = nodeDistance + this.overlapAvoidanceFactor * ((node1.shape.radius || 0) / 2 + (node2.shape.radius || 0) / 2);
          const dx = node2.x - node1.x;
          const dy = node2.y - node1.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          const steepness = 0.05;
          let repulsingForce;
          if (distance < theseNodesDistance) {
            repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * theseNodesDistance, 2);
          } else {
            repulsingForce = 0;
          }
          if (distance !== 0) {
            repulsingForce = repulsingForce / distance;
          }
          const fx = dx * repulsingForce;
          const fy = dy * repulsingForce;
          forces[node1.id].x -= fx;
          forces[node1.id].y -= fy;
          forces[node2.id].x += fx;
          forces[node2.id].y += fy;
        }
      }
    }
  }
};
var SpringSolver = class {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
  }
  /**
   * This function calculates the springforces on the nodes, accounting for the support nodes.
   * @private
   */
  solve() {
    let edgeLength, edge;
    const edgeIndices = this.physicsBody.physicsEdgeIndices;
    const edges = this.body.edges;
    let node1, node2, node3;
    for (let i = 0; i < edgeIndices.length; i++) {
      edge = edges[edgeIndices[i]];
      if (edge.connected === true && edge.toId !== edge.fromId) {
        if (this.body.nodes[edge.toId] !== void 0 && this.body.nodes[edge.fromId] !== void 0) {
          if (edge.edgeType.via !== void 0) {
            edgeLength = edge.options.length === void 0 ? this.options.springLength : edge.options.length;
            node1 = edge.to;
            node2 = edge.edgeType.via;
            node3 = edge.from;
            this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
            this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
          } else {
            edgeLength = edge.options.length === void 0 ? this.options.springLength * 1.5 : edge.options.length;
            this._calculateSpringForce(edge.from, edge.to, edgeLength);
          }
        }
      }
    }
  }
  /**
   * This is the code actually performing the calculation for the function above.
   * @param {Node} node1
   * @param {Node} node2
   * @param {number} edgeLength
   * @private
   */
  _calculateSpringForce(node1, node2, edgeLength) {
    const dx = node1.x - node2.x;
    const dy = node1.y - node2.y;
    const distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);
    const springForce = this.options.springConstant * (edgeLength - distance) / distance;
    const fx = dx * springForce;
    const fy = dy * springForce;
    if (this.physicsBody.forces[node1.id] !== void 0) {
      this.physicsBody.forces[node1.id].x += fx;
      this.physicsBody.forces[node1.id].y += fy;
    }
    if (this.physicsBody.forces[node2.id] !== void 0) {
      this.physicsBody.forces[node2.id].x -= fx;
      this.physicsBody.forces[node2.id].y -= fy;
    }
  }
};
var HierarchicalSpringSolver = class {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
  }
  /**
   * This function calculates the springforces on the nodes, accounting for the support nodes.
   * @private
   */
  solve() {
    let edgeLength, edge;
    let dx, dy, fx, fy, springForce, distance;
    const edges = this.body.edges;
    const factor = 0.5;
    const edgeIndices = this.physicsBody.physicsEdgeIndices;
    const nodeIndices = this.physicsBody.physicsNodeIndices;
    const forces = this.physicsBody.forces;
    for (let i = 0; i < nodeIndices.length; i++) {
      const nodeId = nodeIndices[i];
      forces[nodeId].springFx = 0;
      forces[nodeId].springFy = 0;
    }
    for (let i = 0; i < edgeIndices.length; i++) {
      edge = edges[edgeIndices[i]];
      if (edge.connected === true) {
        edgeLength = edge.options.length === void 0 ? this.options.springLength : edge.options.length;
        dx = edge.from.x - edge.to.x;
        dy = edge.from.y - edge.to.y;
        distance = Math.sqrt(dx * dx + dy * dy);
        distance = distance === 0 ? 0.01 : distance;
        springForce = this.options.springConstant * (edgeLength - distance) / distance;
        fx = dx * springForce;
        fy = dy * springForce;
        if (edge.to.level != edge.from.level) {
          if (forces[edge.toId] !== void 0) {
            forces[edge.toId].springFx -= fx;
            forces[edge.toId].springFy -= fy;
          }
          if (forces[edge.fromId] !== void 0) {
            forces[edge.fromId].springFx += fx;
            forces[edge.fromId].springFy += fy;
          }
        } else {
          if (forces[edge.toId] !== void 0) {
            forces[edge.toId].x -= factor * fx;
            forces[edge.toId].y -= factor * fy;
          }
          if (forces[edge.fromId] !== void 0) {
            forces[edge.fromId].x += factor * fx;
            forces[edge.fromId].y += factor * fy;
          }
        }
      }
    }
    springForce = 1;
    let springFx, springFy;
    for (let i = 0; i < nodeIndices.length; i++) {
      const nodeId = nodeIndices[i];
      springFx = Math.min(springForce, Math.max(-springForce, forces[nodeId].springFx));
      springFy = Math.min(springForce, Math.max(-springForce, forces[nodeId].springFy));
      forces[nodeId].x += springFx;
      forces[nodeId].y += springFy;
    }
    let totalFx = 0;
    let totalFy = 0;
    for (let i = 0; i < nodeIndices.length; i++) {
      const nodeId = nodeIndices[i];
      totalFx += forces[nodeId].x;
      totalFy += forces[nodeId].y;
    }
    const correctionFx = totalFx / nodeIndices.length;
    const correctionFy = totalFy / nodeIndices.length;
    for (let i = 0; i < nodeIndices.length; i++) {
      const nodeId = nodeIndices[i];
      forces[nodeId].x -= correctionFx;
      forces[nodeId].y -= correctionFy;
    }
  }
};
var CentralGravitySolver = class {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    this.options = options2;
  }
  /**
   * Calculates forces for each node
   */
  solve() {
    let dx, dy, distance, node;
    const nodes = this.body.nodes;
    const nodeIndices = this.physicsBody.physicsNodeIndices;
    const forces = this.physicsBody.forces;
    for (let i = 0; i < nodeIndices.length; i++) {
      const nodeId = nodeIndices[i];
      node = nodes[nodeId];
      dx = -node.x;
      dy = -node.y;
      distance = Math.sqrt(dx * dx + dy * dy);
      this._calculateForces(distance, dx, dy, forces, node);
    }
  }
  /**
   * Calculate the forces based on the distance.
   * @param {number} distance
   * @param {number} dx
   * @param {number} dy
   * @param {Object<Node.id, vis.Node>} forces
   * @param {Node} node
   * @private
   */
  _calculateForces(distance, dx, dy, forces, node) {
    const gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
    forces[node.id].x = dx * gravityForce;
    forces[node.id].y = dy * gravityForce;
  }
};
var ForceAtlas2BasedRepulsionSolver = class extends BarnesHutSolver {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    super(body, physicsBody, options2);
    this._rng = Alea("FORCE ATLAS 2 BASED REPULSION SOLVER");
  }
  /**
   * Calculate the forces based on the distance.
   * @param {number} distance
   * @param {number} dx
   * @param {number} dy
   * @param {Node} node
   * @param {object} parentBranch
   * @private
   */
  _calculateForces(distance, dx, dy, node, parentBranch) {
    if (distance === 0) {
      distance = 0.1 * this._rng();
      dx = distance;
    }
    if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
      distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
    }
    const degree = node.edges.length + 1;
    const gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);
    const fx = dx * gravityForce;
    const fy = dy * gravityForce;
    this.physicsBody.forces[node.id].x += fx;
    this.physicsBody.forces[node.id].y += fy;
  }
};
var ForceAtlas2BasedCentralGravitySolver = class extends CentralGravitySolver {
  /**
   * @param {object} body
   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
   * @param {object} options
   */
  constructor(body, physicsBody, options2) {
    super(body, physicsBody, options2);
  }
  /**
   * Calculate the forces based on the distance.
   * @param {number} distance
   * @param {number} dx
   * @param {number} dy
   * @param {Object<Node.id, Node>} forces
   * @param {Node} node
   * @private
   */
  _calculateForces(distance, dx, dy, forces, node) {
    if (distance > 0) {
      const degree = node.edges.length + 1;
      const gravityForce = this.options.centralGravity * degree * node.options.mass;
      forces[node.id].x = dx * gravityForce;
      forces[node.id].y = dy * gravityForce;
    }
  }
};
var PhysicsEngine = class {
  /**
   * @param {object} body
   */
  constructor(body) {
    this.body = body;
    this.physicsBody = {
      physicsNodeIndices: [],
      physicsEdgeIndices: [],
      forces: {},
      velocities: {}
    };
    this.physicsEnabled = true;
    this.simulationInterval = 1e3 / 60;
    this.requiresTimeout = true;
    this.previousStates = {};
    this.referenceState = {};
    this.freezeCache = {};
    this.renderTimer = void 0;
    this.adaptiveTimestep = false;
    this.adaptiveTimestepEnabled = false;
    this.adaptiveCounter = 0;
    this.adaptiveInterval = 3;
    this.stabilized = false;
    this.startedStabilization = false;
    this.stabilizationIterations = 0;
    this.ready = false;
    this.options = {};
    this.defaultOptions = {
      enabled: true,
      barnesHut: {
        theta: 0.5,
        gravitationalConstant: -2e3,
        centralGravity: 0.3,
        springLength: 95,
        springConstant: 0.04,
        damping: 0.09,
        avoidOverlap: 0
      },
      forceAtlas2Based: {
        theta: 0.5,
        gravitationalConstant: -50,
        centralGravity: 0.01,
        springConstant: 0.08,
        springLength: 100,
        damping: 0.4,
        avoidOverlap: 0
      },
      repulsion: {
        centralGravity: 0.2,
        springLength: 200,
        springConstant: 0.05,
        nodeDistance: 100,
        damping: 0.09,
        avoidOverlap: 0
      },
      hierarchicalRepulsion: {
        centralGravity: 0,
        springLength: 100,
        springConstant: 0.01,
        nodeDistance: 120,
        damping: 0.09
      },
      maxVelocity: 50,
      minVelocity: 0.75,
      // px/s
      solver: "barnesHut",
      stabilization: {
        enabled: true,
        iterations: 1e3,
        // maximum number of iteration to stabilize
        updateInterval: 50,
        onlyDynamicEdges: false,
        fit: true
      },
      timestep: 0.5,
      adaptiveTimestep: true,
      wind: {
        x: 0,
        y: 0
      }
    };
    _Object$assign(this.options, this.defaultOptions);
    this.timestep = 0.5;
    this.layoutFailed = false;
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    this.body.emitter.on("initPhysics", () => {
      this.initPhysics();
    });
    this.body.emitter.on("_layoutFailed", () => {
      this.layoutFailed = true;
    });
    this.body.emitter.on("resetPhysics", () => {
      this.stopSimulation();
      this.ready = false;
    });
    this.body.emitter.on("disablePhysics", () => {
      this.physicsEnabled = false;
      this.stopSimulation();
    });
    this.body.emitter.on("restorePhysics", () => {
      this.setOptions(this.options);
      if (this.ready === true) {
        this.startSimulation();
      }
    });
    this.body.emitter.on("startSimulation", () => {
      if (this.ready === true) {
        this.startSimulation();
      }
    });
    this.body.emitter.on("stopSimulation", () => {
      this.stopSimulation();
    });
    this.body.emitter.on("destroy", () => {
      this.stopSimulation(false);
      this.body.emitter.off();
    });
    this.body.emitter.on("_dataChanged", () => {
      this.updatePhysicsData();
    });
  }
  /**
   * set the physics options
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      if (options2 === false) {
        this.options.enabled = false;
        this.physicsEnabled = false;
        this.stopSimulation();
      } else if (options2 === true) {
        this.options.enabled = true;
        this.physicsEnabled = true;
        this.startSimulation();
      } else {
        this.physicsEnabled = true;
        selectiveNotDeepExtend(["stabilization"], this.options, options2);
        mergeOptions(this.options, options2, "stabilization");
        if (options2.enabled === void 0) {
          this.options.enabled = true;
        }
        if (this.options.enabled === false) {
          this.physicsEnabled = false;
          this.stopSimulation();
        }
        const wind = this.options.wind;
        if (wind) {
          if (typeof wind.x !== "number" || _Number$isNaN(wind.x)) {
            wind.x = 0;
          }
          if (typeof wind.y !== "number" || _Number$isNaN(wind.y)) {
            wind.y = 0;
          }
        }
        this.timestep = this.options.timestep;
      }
    }
    this.init();
  }
  /**
   * configure the engine.
   */
  init() {
    let options2;
    if (this.options.solver === "forceAtlas2Based") {
      options2 = this.options.forceAtlas2Based;
      this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options2);
      this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options2);
      this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options2);
    } else if (this.options.solver === "repulsion") {
      options2 = this.options.repulsion;
      this.nodesSolver = new RepulsionSolver(this.body, this.physicsBody, options2);
      this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options2);
      this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options2);
    } else if (this.options.solver === "hierarchicalRepulsion") {
      options2 = this.options.hierarchicalRepulsion;
      this.nodesSolver = new HierarchicalRepulsionSolver(this.body, this.physicsBody, options2);
      this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options2);
      this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options2);
    } else {
      options2 = this.options.barnesHut;
      this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options2);
      this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options2);
      this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options2);
    }
    this.modelOptions = options2;
  }
  /**
   * initialize the engine
   */
  initPhysics() {
    if (this.physicsEnabled === true && this.options.enabled === true) {
      if (this.options.stabilization.enabled === true) {
        this.stabilize();
      } else {
        this.stabilized = false;
        this.ready = true;
        this.body.emitter.emit("fit", {}, this.layoutFailed);
        this.startSimulation();
      }
    } else {
      this.ready = true;
      this.body.emitter.emit("fit");
    }
  }
  /**
   * Start the simulation
   */
  startSimulation() {
    if (this.physicsEnabled === true && this.options.enabled === true) {
      this.stabilized = false;
      this.adaptiveTimestep = false;
      this.body.emitter.emit("_resizeNodes");
      if (this.viewFunction === void 0) {
        var _context;
        this.viewFunction = _bindInstanceProperty(_context = this.simulationStep).call(_context, this);
        this.body.emitter.on("initRedraw", this.viewFunction);
        this.body.emitter.emit("_startRendering");
      }
    } else {
      this.body.emitter.emit("_redraw");
    }
  }
  /**
   * Stop the simulation, force stabilization.
   * @param {boolean} [emit]
   */
  stopSimulation() {
    let emit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    this.stabilized = true;
    if (emit === true) {
      this._emitStabilized();
    }
    if (this.viewFunction !== void 0) {
      this.body.emitter.off("initRedraw", this.viewFunction);
      this.viewFunction = void 0;
      if (emit === true) {
        this.body.emitter.emit("_stopRendering");
      }
    }
  }
  /**
   * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
   *
   */
  simulationStep() {
    const startTime = _Date$now();
    this.physicsTick();
    const physicsTime = _Date$now() - startTime;
    if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
      this.physicsTick();
      this.runDoubleSpeed = true;
    }
    if (this.stabilized === true) {
      this.stopSimulation();
    }
  }
  /**
   * trigger the stabilized event.
   * @param {number} [amountOfIterations]
   * @private
   */
  _emitStabilized() {
    let amountOfIterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.stabilizationIterations;
    if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
      _setTimeout(() => {
        this.body.emitter.emit("stabilized", {
          iterations: amountOfIterations
        });
        this.startedStabilization = false;
        this.stabilizationIterations = 0;
      }, 0);
    }
  }
  /**
   * Calculate the forces for one physics iteration and move the nodes.
   * @private
   */
  physicsStep() {
    this.gravitySolver.solve();
    this.nodesSolver.solve();
    this.edgesSolver.solve();
    this.moveNodes();
  }
  /**
   * Make dynamic adjustments to the timestep, based on current state.
   *
   * Helper function for physicsTick().
   * @private
   */
  adjustTimeStep() {
    const factor = 1.2;
    if (this._evaluateStepQuality() === true) {
      this.timestep = factor * this.timestep;
    } else {
      if (this.timestep / factor < this.options.timestep) {
        this.timestep = this.options.timestep;
      } else {
        this.adaptiveCounter = -1;
        this.timestep = Math.max(this.options.timestep, this.timestep / factor);
      }
    }
  }
  /**
   * A single simulation step (or 'tick') in the physics simulation
   * @private
   */
  physicsTick() {
    this._startStabilizing();
    if (this.stabilized === true)
      return;
    if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
      const doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;
      if (doAdaptive) {
        this.timestep = 2 * this.timestep;
        this.physicsStep();
        this.revert();
        this.timestep = 0.5 * this.timestep;
        this.physicsStep();
        this.physicsStep();
        this.adjustTimeStep();
      } else {
        this.physicsStep();
      }
      this.adaptiveCounter += 1;
    } else {
      this.timestep = this.options.timestep;
      this.physicsStep();
    }
    if (this.stabilized === true)
      this.revert();
    this.stabilizationIterations++;
  }
  /**
   * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
   * @private
   */
  updatePhysicsData() {
    this.physicsBody.forces = {};
    this.physicsBody.physicsNodeIndices = [];
    this.physicsBody.physicsEdgeIndices = [];
    const nodes = this.body.nodes;
    const edges = this.body.edges;
    for (const nodeId in nodes) {
      if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
        if (nodes[nodeId].options.physics === true) {
          this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);
        }
      }
    }
    for (const edgeId in edges) {
      if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {
        if (edges[edgeId].options.physics === true) {
          this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
        }
      }
    }
    for (let i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
      const nodeId = this.physicsBody.physicsNodeIndices[i];
      this.physicsBody.forces[nodeId] = {
        x: 0,
        y: 0
      };
      if (this.physicsBody.velocities[nodeId] === void 0) {
        this.physicsBody.velocities[nodeId] = {
          x: 0,
          y: 0
        };
      }
    }
    for (const nodeId in this.physicsBody.velocities) {
      if (nodes[nodeId] === void 0) {
        delete this.physicsBody.velocities[nodeId];
      }
    }
  }
  /**
   * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
   */
  revert() {
    const nodeIds = _Object$keys(this.previousStates);
    const nodes = this.body.nodes;
    const velocities = this.physicsBody.velocities;
    this.referenceState = {};
    for (let i = 0; i < nodeIds.length; i++) {
      const nodeId = nodeIds[i];
      if (nodes[nodeId] !== void 0) {
        if (nodes[nodeId].options.physics === true) {
          this.referenceState[nodeId] = {
            positions: {
              x: nodes[nodeId].x,
              y: nodes[nodeId].y
            }
          };
          velocities[nodeId].x = this.previousStates[nodeId].vx;
          velocities[nodeId].y = this.previousStates[nodeId].vy;
          nodes[nodeId].x = this.previousStates[nodeId].x;
          nodes[nodeId].y = this.previousStates[nodeId].y;
        }
      } else {
        delete this.previousStates[nodeId];
      }
    }
  }
  /**
   * This compares the reference state to the current state
   * @returns {boolean}
   * @private
   */
  _evaluateStepQuality() {
    let dx, dy, dpos;
    const nodes = this.body.nodes;
    const reference = this.referenceState;
    const posThreshold = 0.3;
    for (const nodeId in this.referenceState) {
      if (Object.prototype.hasOwnProperty.call(this.referenceState, nodeId) && nodes[nodeId] !== void 0) {
        dx = nodes[nodeId].x - reference[nodeId].positions.x;
        dy = nodes[nodeId].y - reference[nodeId].positions.y;
        dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
        if (dpos > posThreshold) {
          return false;
        }
      }
    }
    return true;
  }
  /**
   * move the nodes one timestep and check if they are stabilized
   */
  moveNodes() {
    const nodeIndices = this.physicsBody.physicsNodeIndices;
    let maxNodeVelocity = 0;
    let averageNodeVelocity = 0;
    const velocityAdaptiveThreshold = 5;
    for (let i = 0; i < nodeIndices.length; i++) {
      const nodeId = nodeIndices[i];
      const nodeVelocity = this._performStep(nodeId);
      maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
      averageNodeVelocity += nodeVelocity;
    }
    this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
    this.stabilized = maxNodeVelocity < this.options.minVelocity;
  }
  /**
   * Calculate new velocity for a coordinate direction
   * @param {number} v  velocity for current coordinate
   * @param {number} f  regular force for current coordinate
   * @param {number} m  mass of current node
   * @returns {number} new velocity for current coordinate
   * @private
   */
  calculateComponentVelocity(v, f, m) {
    const df = this.modelOptions.damping * v;
    const a = (f - df) / m;
    v += a * this.timestep;
    const maxV = this.options.maxVelocity || 1e9;
    if (Math.abs(v) > maxV) {
      v = v > 0 ? maxV : -maxV;
    }
    return v;
  }
  /**
   * Perform the actual step
   * @param {Node.id} nodeId
   * @returns {number} the new velocity of given node
   * @private
   */
  _performStep(nodeId) {
    const node = this.body.nodes[nodeId];
    const force = this.physicsBody.forces[nodeId];
    if (this.options.wind) {
      force.x += this.options.wind.x;
      force.y += this.options.wind.y;
    }
    const velocity = this.physicsBody.velocities[nodeId];
    this.previousStates[nodeId] = {
      x: node.x,
      y: node.y,
      vx: velocity.x,
      vy: velocity.y
    };
    if (node.options.fixed.x === false) {
      velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node.options.mass);
      node.x += velocity.x * this.timestep;
    } else {
      force.x = 0;
      velocity.x = 0;
    }
    if (node.options.fixed.y === false) {
      velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node.options.mass);
      node.y += velocity.y * this.timestep;
    } else {
      force.y = 0;
      velocity.y = 0;
    }
    const totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));
    return totalVelocity;
  }
  /**
   * When initializing and stabilizing, we can freeze nodes with a predefined position.
   * This greatly speeds up stabilization because only the supportnodes for the smoothCurves have to settle.
   * @private
   */
  _freezeNodes() {
    const nodes = this.body.nodes;
    for (const id2 in nodes) {
      if (Object.prototype.hasOwnProperty.call(nodes, id2)) {
        if (nodes[id2].x && nodes[id2].y) {
          const fixed = nodes[id2].options.fixed;
          this.freezeCache[id2] = {
            x: fixed.x,
            y: fixed.y
          };
          fixed.x = true;
          fixed.y = true;
        }
      }
    }
  }
  /**
   * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
   * @private
   */
  _restoreFrozenNodes() {
    const nodes = this.body.nodes;
    for (const id2 in nodes) {
      if (Object.prototype.hasOwnProperty.call(nodes, id2)) {
        if (this.freezeCache[id2] !== void 0) {
          nodes[id2].options.fixed.x = this.freezeCache[id2].x;
          nodes[id2].options.fixed.y = this.freezeCache[id2].y;
        }
      }
    }
    this.freezeCache = {};
  }
  /**
   * Find a stable position for all nodes
   * @param {number} [iterations]
   */
  stabilize() {
    let iterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.stabilization.iterations;
    if (typeof iterations !== "number") {
      iterations = this.options.stabilization.iterations;
      console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", iterations);
    }
    if (this.physicsBody.physicsNodeIndices.length === 0) {
      this.ready = true;
      return;
    }
    this.adaptiveTimestep = this.options.adaptiveTimestep;
    this.body.emitter.emit("_resizeNodes");
    this.stopSimulation();
    this.stabilized = false;
    this.body.emitter.emit("_blockRedraw");
    this.targetIterations = iterations;
    if (this.options.stabilization.onlyDynamicEdges === true) {
      this._freezeNodes();
    }
    this.stabilizationIterations = 0;
    _setTimeout(() => this._stabilizationBatch(), 0);
  }
  /**
   * If not already stabilizing, start it and emit a start event.
   * @returns {boolean} true if stabilization started with this call
   * @private
   */
  _startStabilizing() {
    if (this.startedStabilization === true)
      return false;
    this.body.emitter.emit("startStabilizing");
    this.startedStabilization = true;
    return true;
  }
  /**
   * One batch of stabilization
   * @private
   */
  _stabilizationBatch() {
    const running = () => this.stabilized === false && this.stabilizationIterations < this.targetIterations;
    const sendProgress = () => {
      this.body.emitter.emit("stabilizationProgress", {
        iterations: this.stabilizationIterations,
        total: this.targetIterations
      });
    };
    if (this._startStabilizing()) {
      sendProgress();
    }
    let count = 0;
    while (running() && count < this.options.stabilization.updateInterval) {
      this.physicsTick();
      count++;
    }
    sendProgress();
    if (running()) {
      var _context2;
      _setTimeout(_bindInstanceProperty(_context2 = this._stabilizationBatch).call(_context2, this), 0);
    } else {
      this._finalizeStabilization();
    }
  }
  /**
   * Wrap up the stabilization, fit and emit the events.
   * @private
   */
  _finalizeStabilization() {
    this.body.emitter.emit("_allowRedraw");
    if (this.options.stabilization.fit === true) {
      this.body.emitter.emit("fit");
    }
    if (this.options.stabilization.onlyDynamicEdges === true) {
      this._restoreFrozenNodes();
    }
    this.body.emitter.emit("stabilizationIterationsDone");
    this.body.emitter.emit("_requestRedraw");
    if (this.stabilized === true) {
      this._emitStabilized();
    } else {
      this.startSimulation();
    }
    this.ready = true;
  }
  //---------------------------  DEBUGGING BELOW  ---------------------------//
  /**
   * Debug function that display arrows for the forces currently active in the network.
   *
   * Use this when debugging only.
   * @param {CanvasRenderingContext2D} ctx
   * @private
   */
  _drawForces(ctx) {
    for (let i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
      const index2 = this.physicsBody.physicsNodeIndices[i];
      const node = this.body.nodes[index2];
      const force = this.physicsBody.forces[index2];
      const factor = 20;
      const colorFactor = 0.03;
      const forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));
      const size = Math.min(Math.max(5, forceSize), 15);
      const arrowSize = 3 * size;
      const color = HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);
      const point = {
        x: node.x + factor * force.x,
        y: node.y + factor * force.y
      };
      ctx.lineWidth = size;
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(node.x, node.y);
      ctx.lineTo(point.x, point.y);
      ctx.stroke();
      const angle = Math.atan2(force.y, force.x);
      ctx.fillStyle = color;
      EndPoints.draw(ctx, {
        type: "arrow",
        point,
        angle,
        length: arrowSize
      });
      _fillInstanceProperty(ctx).call(ctx);
    }
  }
};
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};
function v4(options2, buf, offset) {
  if (native.randomUUID && !buf && !options2) {
    return native.randomUUID();
  }
  options2 = options2 || {};
  const rnds = options2.random || (options2.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var NetworkUtil = class {
  /**
   * @ignore
   */
  constructor() {
  }
  /**
   * Find the center position of the network considering the bounding boxes
   * @param {Array.<Node>} allNodes
   * @param {Array.<Node>} [specificNodes]
   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
   * @static
   */
  static getRange(allNodes) {
    let specificNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    let minY = 1e9, maxY = -1e9, minX = 1e9, maxX = -1e9, node;
    if (specificNodes.length > 0) {
      for (let i = 0; i < specificNodes.length; i++) {
        node = allNodes[specificNodes[i]];
        if (minX > node.shape.boundingBox.left) {
          minX = node.shape.boundingBox.left;
        }
        if (maxX < node.shape.boundingBox.right) {
          maxX = node.shape.boundingBox.right;
        }
        if (minY > node.shape.boundingBox.top) {
          minY = node.shape.boundingBox.top;
        }
        if (maxY < node.shape.boundingBox.bottom) {
          maxY = node.shape.boundingBox.bottom;
        }
      }
    }
    if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
      minY = 0, maxY = 0, minX = 0, maxX = 0;
    }
    return {
      minX,
      maxX,
      minY,
      maxY
    };
  }
  /**
   * Find the center position of the network
   * @param {Array.<Node>} allNodes
   * @param {Array.<Node>} [specificNodes]
   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
   * @static
   */
  static getRangeCore(allNodes) {
    let specificNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    let minY = 1e9, maxY = -1e9, minX = 1e9, maxX = -1e9, node;
    if (specificNodes.length > 0) {
      for (let i = 0; i < specificNodes.length; i++) {
        node = allNodes[specificNodes[i]];
        if (minX > node.x) {
          minX = node.x;
        }
        if (maxX < node.x) {
          maxX = node.x;
        }
        if (minY > node.y) {
          minY = node.y;
        }
        if (maxY < node.y) {
          maxY = node.y;
        }
      }
    }
    if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
      minY = 0, maxY = 0, minX = 0, maxX = 0;
    }
    return {
      minX,
      maxX,
      minY,
      maxY
    };
  }
  /**
   * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
   * @returns {{x: number, y: number}}
   * @static
   */
  static findCenter(range) {
    return {
      x: 0.5 * (range.maxX + range.minX),
      y: 0.5 * (range.maxY + range.minY)
    };
  }
  /**
   * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
   * @param {vis.Item} item
   * @param {'node'|undefined} type
   * @returns {{}}
   * @static
   */
  static cloneOptions(item, type) {
    const clonedOptions = {};
    if (type === void 0 || type === "node") {
      deepExtend(clonedOptions, item.options, true);
      clonedOptions.x = item.x;
      clonedOptions.y = item.y;
      clonedOptions.amountOfConnections = item.edges.length;
    } else {
      deepExtend(clonedOptions, item.options, true);
    }
    return clonedOptions;
  }
};
var Cluster = class extends Node {
  /**
   * @param {object} options
   * @param {object} body
   * @param {Array.<HTMLImageElement>}imagelist
   * @param {Array} grouplist
   * @param {object} globalOptions
   * @param {object} defaultOptions     Global default options for nodes
   */
  constructor(options2, body, imagelist, grouplist, globalOptions, defaultOptions) {
    super(options2, body, imagelist, grouplist, globalOptions, defaultOptions);
    this.isCluster = true;
    this.containedNodes = {};
    this.containedEdges = {};
  }
  /**
   * Transfer child cluster data to current and disconnect the child cluster.
   *
   * Please consult the header comment in 'Clustering.js' for the fields set here.
   * @param {string|number} childClusterId  id of child cluster to open
   */
  _openChildCluster(childClusterId) {
    const childCluster = this.body.nodes[childClusterId];
    if (this.containedNodes[childClusterId] === void 0) {
      throw new Error("node with id: " + childClusterId + " not in current cluster");
    }
    if (!childCluster.isCluster) {
      throw new Error("node with id: " + childClusterId + " is not a cluster");
    }
    delete this.containedNodes[childClusterId];
    forEach$1(childCluster.edges, (edge) => {
      delete this.containedEdges[edge.id];
    });
    forEach$1(childCluster.containedNodes, (node, nodeId) => {
      this.containedNodes[nodeId] = node;
    });
    childCluster.containedNodes = {};
    forEach$1(childCluster.containedEdges, (edge, edgeId) => {
      this.containedEdges[edgeId] = edge;
    });
    childCluster.containedEdges = {};
    forEach$1(childCluster.edges, (clusterEdge) => {
      forEach$1(this.edges, (parentClusterEdge) => {
        var _context, _context2;
        const index2 = _indexOfInstanceProperty(_context = parentClusterEdge.clusteringEdgeReplacingIds).call(_context, clusterEdge.id);
        if (index2 === -1)
          return;
        forEach$1(clusterEdge.clusteringEdgeReplacingIds, (srcId) => {
          parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);
          this.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;
        });
        _spliceInstanceProperty(_context2 = parentClusterEdge.clusteringEdgeReplacingIds).call(_context2, index2, 1);
      });
    });
    childCluster.edges = [];
  }
};
var ClusterEngine = class {
  /**
   * @param {object} body
   */
  constructor(body) {
    this.body = body;
    this.clusteredNodes = {};
    this.clusteredEdges = {};
    this.options = {};
    this.defaultOptions = {};
    _Object$assign(this.options, this.defaultOptions);
    this.body.emitter.on("_resetData", () => {
      this.clusteredNodes = {};
      this.clusteredEdges = {};
    });
  }
  /**
   *
   * @param {number} hubsize
   * @param {object} options
   */
  clusterByHubsize(hubsize, options2) {
    if (hubsize === void 0) {
      hubsize = this._getHubSize();
    } else if (typeof hubsize === "object") {
      options2 = this._checkOptions(hubsize);
      hubsize = this._getHubSize();
    }
    const nodesToCluster = [];
    for (let i = 0; i < this.body.nodeIndices.length; i++) {
      const node = this.body.nodes[this.body.nodeIndices[i]];
      if (node.edges.length >= hubsize) {
        nodesToCluster.push(node.id);
      }
    }
    for (let i = 0; i < nodesToCluster.length; i++) {
      this.clusterByConnection(nodesToCluster[i], options2, true);
    }
    this.body.emitter.emit("_dataChanged");
  }
  /**
   * loop over all nodes, check if they adhere to the condition and cluster if needed.
   * @param {object} options
   * @param {boolean} [refreshData]
   */
  cluster() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (options2.joinCondition === void 0) {
      throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
    }
    options2 = this._checkOptions(options2);
    const childNodesObj = {};
    const childEdgesObj = {};
    forEach$1(this.body.nodes, (node, nodeId) => {
      if (node.options && options2.joinCondition(node.options) === true) {
        childNodesObj[nodeId] = node;
        forEach$1(node.edges, (edge) => {
          if (this.clusteredEdges[edge.id] === void 0) {
            childEdgesObj[edge.id] = edge;
          }
        });
      }
    });
    this._cluster(childNodesObj, childEdgesObj, options2, refreshData);
  }
  /**
   * Cluster all nodes in the network that have only X edges
   * @param {number} edgeCount
   * @param {object} options
   * @param {boolean} [refreshData]
   */
  clusterByEdgeCount(edgeCount, options2) {
    let refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    options2 = this._checkOptions(options2);
    const clusters = [];
    const usedNodes = {};
    let edge, edges, relevantEdgeCount;
    for (let i = 0; i < this.body.nodeIndices.length; i++) {
      const childNodesObj = {};
      const childEdgesObj = {};
      const nodeId = this.body.nodeIndices[i];
      const node = this.body.nodes[nodeId];
      if (usedNodes[nodeId] === void 0) {
        relevantEdgeCount = 0;
        edges = [];
        for (let j = 0; j < node.edges.length; j++) {
          edge = node.edges[j];
          if (this.clusteredEdges[edge.id] === void 0) {
            if (edge.toId !== edge.fromId) {
              relevantEdgeCount++;
            }
            edges.push(edge);
          }
        }
        if (relevantEdgeCount === edgeCount) {
          const checkJoinCondition = function(node2) {
            if (options2.joinCondition === void 0 || options2.joinCondition === null) {
              return true;
            }
            const clonedOptions = NetworkUtil.cloneOptions(node2);
            return options2.joinCondition(clonedOptions);
          };
          let gatheringSuccessful = true;
          for (let j = 0; j < edges.length; j++) {
            edge = edges[j];
            const childNodeId = this._getConnectedId(edge, nodeId);
            if (checkJoinCondition(node)) {
              childEdgesObj[edge.id] = edge;
              childNodesObj[nodeId] = node;
              childNodesObj[childNodeId] = this.body.nodes[childNodeId];
              usedNodes[nodeId] = true;
            } else {
              gatheringSuccessful = false;
              break;
            }
          }
          if (_Object$keys(childNodesObj).length > 0 && _Object$keys(childEdgesObj).length > 0 && gatheringSuccessful === true) {
            const findClusterData = function() {
              for (let n = 0; n < clusters.length; ++n) {
                for (const m in childNodesObj) {
                  if (clusters[n].nodes[m] !== void 0) {
                    return clusters[n];
                  }
                }
              }
              return void 0;
            };
            const foundCluster = findClusterData();
            if (foundCluster !== void 0) {
              for (const m in childNodesObj) {
                if (foundCluster.nodes[m] === void 0) {
                  foundCluster.nodes[m] = childNodesObj[m];
                }
              }
              for (const m in childEdgesObj) {
                if (foundCluster.edges[m] === void 0) {
                  foundCluster.edges[m] = childEdgesObj[m];
                }
              }
            } else {
              clusters.push({
                nodes: childNodesObj,
                edges: childEdgesObj
              });
            }
          }
        }
      }
    }
    for (let i = 0; i < clusters.length; i++) {
      this._cluster(clusters[i].nodes, clusters[i].edges, options2, false);
    }
    if (refreshData === true) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   * Cluster all nodes in the network that have only 1 edge
   * @param {object} options
   * @param {boolean} [refreshData]
   */
  clusterOutliers(options2) {
    let refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    this.clusterByEdgeCount(1, options2, refreshData);
  }
  /**
   * Cluster all nodes in the network that have only 2 edge
   * @param {object} options
   * @param {boolean} [refreshData]
   */
  clusterBridges(options2) {
    let refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    this.clusterByEdgeCount(2, options2, refreshData);
  }
  /**
   * suck all connected nodes of a node into the node.
   * @param {Node.id} nodeId
   * @param {object} options
   * @param {boolean} [refreshData]
   */
  clusterByConnection(nodeId, options2) {
    var _context;
    let refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (nodeId === void 0) {
      throw new Error("No nodeId supplied to clusterByConnection!");
    }
    if (this.body.nodes[nodeId] === void 0) {
      throw new Error("The nodeId given to clusterByConnection does not exist!");
    }
    const node = this.body.nodes[nodeId];
    options2 = this._checkOptions(options2, node);
    if (options2.clusterNodeProperties.x === void 0) {
      options2.clusterNodeProperties.x = node.x;
    }
    if (options2.clusterNodeProperties.y === void 0) {
      options2.clusterNodeProperties.y = node.y;
    }
    if (options2.clusterNodeProperties.fixed === void 0) {
      options2.clusterNodeProperties.fixed = {};
      options2.clusterNodeProperties.fixed.x = node.options.fixed.x;
      options2.clusterNodeProperties.fixed.y = node.options.fixed.y;
    }
    const childNodesObj = {};
    const childEdgesObj = {};
    const parentNodeId = node.id;
    const parentClonedOptions = NetworkUtil.cloneOptions(node);
    childNodesObj[parentNodeId] = node;
    for (let i = 0; i < node.edges.length; i++) {
      const edge = node.edges[i];
      if (this.clusteredEdges[edge.id] === void 0) {
        const childNodeId = this._getConnectedId(edge, parentNodeId);
        if (this.clusteredNodes[childNodeId] === void 0) {
          if (childNodeId !== parentNodeId) {
            if (options2.joinCondition === void 0) {
              childEdgesObj[edge.id] = edge;
              childNodesObj[childNodeId] = this.body.nodes[childNodeId];
            } else {
              const childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);
              if (options2.joinCondition(parentClonedOptions, childClonedOptions) === true) {
                childEdgesObj[edge.id] = edge;
                childNodesObj[childNodeId] = this.body.nodes[childNodeId];
              }
            }
          } else {
            childEdgesObj[edge.id] = edge;
          }
        }
      }
    }
    const childNodeIDs = _mapInstanceProperty(_context = _Object$keys(childNodesObj)).call(_context, function(childNode) {
      return childNodesObj[childNode].id;
    });
    for (const childNodeKey in childNodesObj) {
      if (!Object.prototype.hasOwnProperty.call(childNodesObj, childNodeKey))
        continue;
      const childNode = childNodesObj[childNodeKey];
      for (let y = 0; y < childNode.edges.length; y++) {
        const childEdge = childNode.edges[y];
        if (_indexOfInstanceProperty(childNodeIDs).call(childNodeIDs, this._getConnectedId(childEdge, childNode.id)) > -1) {
          childEdgesObj[childEdge.id] = childEdge;
        }
      }
    }
    this._cluster(childNodesObj, childEdgesObj, options2, refreshData);
  }
  /**
   * This function creates the edges that will be attached to the cluster
   * It looks for edges that are connected to the nodes from the "outside' of the cluster.
   * @param {{Node.id: vis.Node}} childNodesObj
   * @param {{vis.Edge.id: vis.Edge}} childEdgesObj
   * @param {object} clusterNodeProperties
   * @param {object} clusterEdgeProperties
   * @private
   */
  _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
    let edge, childNodeId, childNode, toId, fromId, otherNodeId;
    const childKeys = _Object$keys(childNodesObj);
    const createEdges = [];
    for (let i = 0; i < childKeys.length; i++) {
      childNodeId = childKeys[i];
      childNode = childNodesObj[childNodeId];
      for (let j = 0; j < childNode.edges.length; j++) {
        edge = childNode.edges[j];
        if (this.clusteredEdges[edge.id] === void 0) {
          if (edge.toId == edge.fromId) {
            childEdgesObj[edge.id] = edge;
          } else {
            if (edge.toId == childNodeId) {
              toId = clusterNodeProperties.id;
              fromId = edge.fromId;
              otherNodeId = fromId;
            } else {
              toId = edge.toId;
              fromId = clusterNodeProperties.id;
              otherNodeId = toId;
            }
          }
          if (childNodesObj[otherNodeId] === void 0) {
            createEdges.push({
              edge,
              fromId,
              toId
            });
          }
        }
      }
    }
    const newEdges = [];
    const getNewEdge = function(createdEdge) {
      for (let j = 0; j < newEdges.length; j++) {
        const newEdge = newEdges[j];
        const matchToDirection = createdEdge.fromId === newEdge.fromId && createdEdge.toId === newEdge.toId;
        const matchFromDirection = createdEdge.fromId === newEdge.toId && createdEdge.toId === newEdge.fromId;
        if (matchToDirection || matchFromDirection) {
          return newEdge;
        }
      }
      return null;
    };
    for (let j = 0; j < createEdges.length; j++) {
      const createdEdge = createEdges[j];
      const edge2 = createdEdge.edge;
      let newEdge = getNewEdge(createdEdge);
      if (newEdge === null) {
        newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, edge2, clusterEdgeProperties);
        newEdges.push(newEdge);
      } else {
        newEdge.clusteringEdgeReplacingIds.push(edge2.id);
      }
      this.body.edges[edge2.id].edgeReplacedById = newEdge.id;
      this._backupEdgeOptions(edge2);
      edge2.setOptions({
        physics: false
      });
    }
  }
  /**
   * This function checks the options that can be supplied to the different cluster functions
   * for certain fields and inserts defaults if needed
   * @param {object} options
   * @returns {*}
   * @private
   */
  _checkOptions() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (options2.clusterEdgeProperties === void 0) {
      options2.clusterEdgeProperties = {};
    }
    if (options2.clusterNodeProperties === void 0) {
      options2.clusterNodeProperties = {};
    }
    return options2;
  }
  /**
   *
   * @param {object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
   * @param {object}    childEdgesObj         | object with edge objects, id as keys
   * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
   * @param {boolean}   refreshData | when true, do not wrap up
   * @private
   */
  _cluster(childNodesObj, childEdgesObj, options2) {
    let refreshData = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
    const tmpNodesToRemove = [];
    for (const nodeId in childNodesObj) {
      if (Object.prototype.hasOwnProperty.call(childNodesObj, nodeId)) {
        if (this.clusteredNodes[nodeId] !== void 0) {
          tmpNodesToRemove.push(nodeId);
        }
      }
    }
    for (let n = 0; n < tmpNodesToRemove.length; ++n) {
      delete childNodesObj[tmpNodesToRemove[n]];
    }
    if (_Object$keys(childNodesObj).length == 0) {
      return;
    }
    if (_Object$keys(childNodesObj).length == 1 && options2.clusterNodeProperties.allowSingleNodeCluster != true) {
      return;
    }
    let clusterNodeProperties = deepExtend({}, options2.clusterNodeProperties);
    if (options2.processProperties !== void 0) {
      const childNodesOptions = [];
      for (const nodeId in childNodesObj) {
        if (Object.prototype.hasOwnProperty.call(childNodesObj, nodeId)) {
          const clonedOptions = NetworkUtil.cloneOptions(childNodesObj[nodeId]);
          childNodesOptions.push(clonedOptions);
        }
      }
      const childEdgesOptions = [];
      for (const edgeId in childEdgesObj) {
        if (Object.prototype.hasOwnProperty.call(childEdgesObj, edgeId)) {
          if (edgeId.substr(0, 12) !== "clusterEdge:") {
            const clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], "edge");
            childEdgesOptions.push(clonedOptions);
          }
        }
      }
      clusterNodeProperties = options2.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
      if (!clusterNodeProperties) {
        throw new Error("The processProperties function does not return properties!");
      }
    }
    if (clusterNodeProperties.id === void 0) {
      clusterNodeProperties.id = "cluster:" + v4();
    }
    const clusterId = clusterNodeProperties.id;
    if (clusterNodeProperties.label === void 0) {
      clusterNodeProperties.label = "cluster";
    }
    let pos = void 0;
    if (clusterNodeProperties.x === void 0) {
      pos = this._getClusterPosition(childNodesObj);
      clusterNodeProperties.x = pos.x;
    }
    if (clusterNodeProperties.y === void 0) {
      if (pos === void 0) {
        pos = this._getClusterPosition(childNodesObj);
      }
      clusterNodeProperties.y = pos.y;
    }
    clusterNodeProperties.id = clusterId;
    const clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);
    clusterNode.containedNodes = childNodesObj;
    clusterNode.containedEdges = childEdgesObj;
    clusterNode.clusterEdgeProperties = options2.clusterEdgeProperties;
    this.body.nodes[clusterNodeProperties.id] = clusterNode;
    this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options2.clusterEdgeProperties);
    clusterNodeProperties.id = void 0;
    if (refreshData === true) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   *
   * @param {Edge} edge
   * @private
   */
  _backupEdgeOptions(edge) {
    if (this.clusteredEdges[edge.id] === void 0) {
      this.clusteredEdges[edge.id] = {
        physics: edge.options.physics
      };
    }
  }
  /**
   *
   * @param {Edge} edge
   * @private
   */
  _restoreEdge(edge) {
    const originalOptions = this.clusteredEdges[edge.id];
    if (originalOptions !== void 0) {
      edge.setOptions({
        physics: originalOptions.physics
      });
      delete this.clusteredEdges[edge.id];
    }
  }
  /**
   * Check if a node is a cluster.
   * @param {Node.id} nodeId
   * @returns {*}
   */
  isCluster(nodeId) {
    if (this.body.nodes[nodeId] !== void 0) {
      return this.body.nodes[nodeId].isCluster === true;
    } else {
      console.error("Node does not exist.");
      return false;
    }
  }
  /**
   * get the position of the cluster node based on what's inside
   * @param {object} childNodesObj    | object with node objects, id as keys
   * @returns {{x: number, y: number}}
   * @private
   */
  _getClusterPosition(childNodesObj) {
    const childKeys = _Object$keys(childNodesObj);
    let minX = childNodesObj[childKeys[0]].x;
    let maxX = childNodesObj[childKeys[0]].x;
    let minY = childNodesObj[childKeys[0]].y;
    let maxY = childNodesObj[childKeys[0]].y;
    let node;
    for (let i = 1; i < childKeys.length; i++) {
      node = childNodesObj[childKeys[i]];
      minX = node.x < minX ? node.x : minX;
      maxX = node.x > maxX ? node.x : maxX;
      minY = node.y < minY ? node.y : minY;
      maxY = node.y > maxY ? node.y : maxY;
    }
    return {
      x: 0.5 * (minX + maxX),
      y: 0.5 * (minY + maxY)
    };
  }
  /**
   * Open a cluster by calling this function.
   * @param {vis.Edge.id}  clusterNodeId | the ID of the cluster node
   * @param {object} options
   * @param {boolean} refreshData | wrap up afterwards if not true
   */
  openCluster(clusterNodeId, options2) {
    let refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (clusterNodeId === void 0) {
      throw new Error("No clusterNodeId supplied to openCluster.");
    }
    const clusterNode = this.body.nodes[clusterNodeId];
    if (clusterNode === void 0) {
      throw new Error("The clusterNodeId supplied to openCluster does not exist.");
    }
    if (clusterNode.isCluster !== true || clusterNode.containedNodes === void 0 || clusterNode.containedEdges === void 0) {
      throw new Error("The node:" + clusterNodeId + " is not a valid cluster.");
    }
    const stack = this.findNode(clusterNodeId);
    const parentIndex = _indexOfInstanceProperty(stack).call(stack, clusterNodeId) - 1;
    if (parentIndex >= 0) {
      const parentClusterNodeId = stack[parentIndex];
      const parentClusterNode = this.body.nodes[parentClusterNodeId];
      parentClusterNode._openChildCluster(clusterNodeId);
      delete this.body.nodes[clusterNodeId];
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
      return;
    }
    const containedNodes = clusterNode.containedNodes;
    const containedEdges = clusterNode.containedEdges;
    if (options2 !== void 0 && options2.releaseFunction !== void 0 && typeof options2.releaseFunction === "function") {
      const positions = {};
      const clusterPosition = {
        x: clusterNode.x,
        y: clusterNode.y
      };
      for (const nodeId in containedNodes) {
        if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
          const containedNode = this.body.nodes[nodeId];
          positions[nodeId] = {
            x: containedNode.x,
            y: containedNode.y
          };
        }
      }
      const newPositions = options2.releaseFunction(clusterPosition, positions);
      for (const nodeId in containedNodes) {
        if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
          const containedNode = this.body.nodes[nodeId];
          if (newPositions[nodeId] !== void 0) {
            containedNode.x = newPositions[nodeId].x === void 0 ? clusterNode.x : newPositions[nodeId].x;
            containedNode.y = newPositions[nodeId].y === void 0 ? clusterNode.y : newPositions[nodeId].y;
          }
        }
      }
    } else {
      forEach$1(containedNodes, function(containedNode) {
        if (containedNode.options.fixed.x === false) {
          containedNode.x = clusterNode.x;
        }
        if (containedNode.options.fixed.y === false) {
          containedNode.y = clusterNode.y;
        }
      });
    }
    for (const nodeId in containedNodes) {
      if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
        const containedNode = this.body.nodes[nodeId];
        containedNode.vx = clusterNode.vx;
        containedNode.vy = clusterNode.vy;
        containedNode.setOptions({
          physics: true
        });
        delete this.clusteredNodes[nodeId];
      }
    }
    const edgesToBeDeleted = [];
    for (let i = 0; i < clusterNode.edges.length; i++) {
      edgesToBeDeleted.push(clusterNode.edges[i]);
    }
    for (let i = 0; i < edgesToBeDeleted.length; i++) {
      const edge = edgesToBeDeleted[i];
      const otherNodeId = this._getConnectedId(edge, clusterNodeId);
      const otherNode = this.clusteredNodes[otherNodeId];
      for (let j = 0; j < edge.clusteringEdgeReplacingIds.length; j++) {
        const transferId = edge.clusteringEdgeReplacingIds[j];
        const transferEdge = this.body.edges[transferId];
        if (transferEdge === void 0)
          continue;
        if (otherNode !== void 0) {
          const otherCluster = this.body.nodes[otherNode.clusterId];
          otherCluster.containedEdges[transferEdge.id] = transferEdge;
          delete containedEdges[transferEdge.id];
          let fromId = transferEdge.fromId;
          let toId = transferEdge.toId;
          if (transferEdge.toId == otherNodeId) {
            toId = otherNode.clusterId;
          } else {
            fromId = otherNode.clusterId;
          }
          this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, {
            hidden: false,
            physics: true
          });
        } else {
          this._restoreEdge(transferEdge);
        }
      }
      edge.remove();
    }
    for (const edgeId in containedEdges) {
      if (Object.prototype.hasOwnProperty.call(containedEdges, edgeId)) {
        this._restoreEdge(containedEdges[edgeId]);
      }
    }
    delete this.body.nodes[clusterNodeId];
    if (refreshData === true) {
      this.body.emitter.emit("_dataChanged");
    }
  }
  /**
   *
   * @param {Cluster.id} clusterId
   * @returns {Array.<Node.id>}
   */
  getNodesInCluster(clusterId) {
    const nodesArray = [];
    if (this.isCluster(clusterId) === true) {
      const containedNodes = this.body.nodes[clusterId].containedNodes;
      for (const nodeId in containedNodes) {
        if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
          nodesArray.push(this.body.nodes[nodeId].id);
        }
      }
    }
    return nodesArray;
  }
  /**
   * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
   *
   * If a node can't be found in the chain, return an empty array.
   * @param {string|number} nodeId
   * @returns {Array}
   */
  findNode(nodeId) {
    const stack = [];
    const max2 = 100;
    let counter = 0;
    let node;
    while (this.clusteredNodes[nodeId] !== void 0 && counter < max2) {
      node = this.body.nodes[nodeId];
      if (node === void 0)
        return [];
      stack.push(node.id);
      nodeId = this.clusteredNodes[nodeId].clusterId;
      counter++;
    }
    node = this.body.nodes[nodeId];
    if (node === void 0)
      return [];
    stack.push(node.id);
    _reverseInstanceProperty(stack).call(stack);
    return stack;
  }
  /**
   * Using a clustered nodeId, update with the new options
   * @param {Node.id} clusteredNodeId
   * @param {object} newOptions
   */
  updateClusteredNode(clusteredNodeId, newOptions) {
    if (clusteredNodeId === void 0) {
      throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
    }
    if (newOptions === void 0) {
      throw new Error("No newOptions supplied to updateClusteredNode.");
    }
    if (this.body.nodes[clusteredNodeId] === void 0) {
      throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
    }
    this.body.nodes[clusteredNodeId].setOptions(newOptions);
    this.body.emitter.emit("_dataChanged");
  }
  /**
   * Using a base edgeId, update all related clustered edges with the new options
   * @param {vis.Edge.id} startEdgeId
   * @param {object} newOptions
   */
  updateEdge(startEdgeId, newOptions) {
    if (startEdgeId === void 0) {
      throw new Error("No startEdgeId supplied to updateEdge.");
    }
    if (newOptions === void 0) {
      throw new Error("No newOptions supplied to updateEdge.");
    }
    if (this.body.edges[startEdgeId] === void 0) {
      throw new Error("The startEdgeId supplied to updateEdge does not exist.");
    }
    const allEdgeIds = this.getClusteredEdges(startEdgeId);
    for (let i = 0; i < allEdgeIds.length; i++) {
      const edge = this.body.edges[allEdgeIds[i]];
      edge.setOptions(newOptions);
    }
    this.body.emitter.emit("_dataChanged");
  }
  /**
   * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
   * @param {vis.Edge.id} edgeId
   * @returns {Array.<vis.Edge.id>}
   */
  getClusteredEdges(edgeId) {
    const stack = [];
    const max2 = 100;
    let counter = 0;
    while (edgeId !== void 0 && this.body.edges[edgeId] !== void 0 && counter < max2) {
      stack.push(this.body.edges[edgeId].id);
      edgeId = this.body.edges[edgeId].edgeReplacedById;
      counter++;
    }
    _reverseInstanceProperty(stack).call(stack);
    return stack;
  }
  /**
   * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
   * @param {vis.Edge.id} clusteredEdgeId
   * @returns {vis.Edge.id} baseEdgeId
   *
   * TODO: deprecate in 5.0.0. Method getBaseEdges() is the correct one to use.
   */
  getBaseEdge(clusteredEdgeId) {
    return this.getBaseEdges(clusteredEdgeId)[0];
  }
  /**
   * Get all regular edges for this clustered edge id.
   * @param {vis.Edge.id} clusteredEdgeId
   * @returns {Array.<vis.Edge.id>} all baseEdgeId's under this clustered edge
   */
  getBaseEdges(clusteredEdgeId) {
    const IdsToHandle = [clusteredEdgeId];
    const doneIds = [];
    const foundIds = [];
    const max2 = 100;
    let counter = 0;
    while (IdsToHandle.length > 0 && counter < max2) {
      const nextId = IdsToHandle.pop();
      if (nextId === void 0)
        continue;
      const nextEdge = this.body.edges[nextId];
      if (nextEdge === void 0)
        continue;
      counter++;
      const replacingIds = nextEdge.clusteringEdgeReplacingIds;
      if (replacingIds === void 0) {
        foundIds.push(nextId);
      } else {
        for (let i = 0; i < replacingIds.length; ++i) {
          const replacingId = replacingIds[i];
          if (_indexOfInstanceProperty(IdsToHandle).call(IdsToHandle, replacingIds) !== -1 || _indexOfInstanceProperty(doneIds).call(doneIds, replacingIds) !== -1) {
            continue;
          }
          IdsToHandle.push(replacingId);
        }
      }
      doneIds.push(nextId);
    }
    return foundIds;
  }
  /**
   * Get the Id the node is connected to
   * @param {vis.Edge} edge
   * @param {Node.id} nodeId
   * @returns {*}
   * @private
   */
  _getConnectedId(edge, nodeId) {
    if (edge.toId != nodeId) {
      return edge.toId;
    } else if (edge.fromId != nodeId) {
      return edge.fromId;
    } else {
      return edge.fromId;
    }
  }
  /**
   * We determine how many connections denote an important hub.
   * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
   * @returns {number}
   * @private
   */
  _getHubSize() {
    let average = 0;
    let averageSquared = 0;
    let hubCounter = 0;
    let largestHub = 0;
    for (let i = 0; i < this.body.nodeIndices.length; i++) {
      const node = this.body.nodes[this.body.nodeIndices[i]];
      if (node.edges.length > largestHub) {
        largestHub = node.edges.length;
      }
      average += node.edges.length;
      averageSquared += Math.pow(node.edges.length, 2);
      hubCounter += 1;
    }
    average = average / hubCounter;
    averageSquared = averageSquared / hubCounter;
    const variance = averageSquared - Math.pow(average, 2);
    const standardDeviation = Math.sqrt(variance);
    let hubThreshold = Math.floor(average + 2 * standardDeviation);
    if (hubThreshold > largestHub) {
      hubThreshold = largestHub;
    }
    return hubThreshold;
  }
  /**
   * Create an edge for the cluster representation.
   * @param {Node.id} fromId
   * @param {Node.id} toId
   * @param {vis.Edge} baseEdge
   * @param {object} clusterEdgeProperties
   * @param {object} extraOptions
   * @returns {Edge} newly created clustered edge
   * @private
   */
  _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {
    const clonedOptions = NetworkUtil.cloneOptions(baseEdge, "edge");
    deepExtend(clonedOptions, clusterEdgeProperties);
    clonedOptions.from = fromId;
    clonedOptions.to = toId;
    clonedOptions.id = "clusterEdge:" + v4();
    if (extraOptions !== void 0) {
      deepExtend(clonedOptions, extraOptions);
    }
    const newEdge = this.body.functions.createEdge(clonedOptions);
    newEdge.clusteringEdgeReplacingIds = [baseEdge.id];
    newEdge.connect();
    this.body.edges[newEdge.id] = newEdge;
    return newEdge;
  }
  /**
   * Add the passed child nodes and edges to the given cluster node.
   * @param {object | Node} childNodes  hash of nodes or single node to add in cluster
   * @param {object | Edge} childEdges  hash of edges or single edge to take into account when clustering
   * @param {Node} clusterNode  cluster node to add nodes and edges to
   * @param {object} [clusterEdgeProperties]
   * @private
   */
  _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {
    if (childEdges instanceof Edge) {
      const edge = childEdges;
      const obj = {};
      obj[edge.id] = edge;
      childEdges = obj;
    }
    if (childNodes instanceof Node) {
      const node = childNodes;
      const obj = {};
      obj[node.id] = node;
      childNodes = obj;
    }
    if (clusterNode === void 0 || clusterNode === null) {
      throw new Error("_clusterEdges: parameter clusterNode required");
    }
    if (clusterEdgeProperties === void 0) {
      clusterEdgeProperties = clusterNode.clusterEdgeProperties;
    }
    this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);
    for (const edgeId in childEdges) {
      if (Object.prototype.hasOwnProperty.call(childEdges, edgeId)) {
        if (this.body.edges[edgeId] !== void 0) {
          const edge = this.body.edges[edgeId];
          this._backupEdgeOptions(edge);
          edge.setOptions({
            physics: false
          });
        }
      }
    }
    for (const nodeId in childNodes) {
      if (Object.prototype.hasOwnProperty.call(childNodes, nodeId)) {
        this.clusteredNodes[nodeId] = {
          clusterId: clusterNode.id,
          node: this.body.nodes[nodeId]
        };
        this.body.nodes[nodeId].setOptions({
          physics: false
        });
      }
    }
  }
  /**
   * Determine in which cluster given nodeId resides.
   *
   * If not in cluster, return undefined.
   *
   * NOTE: If you know a cleaner way to do this, please enlighten me (wimrijnders).
   * @param {Node.id} nodeId
   * @returns {Node|undefined} Node instance for cluster, if present
   * @private
   */
  _getClusterNodeForNode(nodeId) {
    if (nodeId === void 0)
      return void 0;
    const clusteredNode = this.clusteredNodes[nodeId];
    if (clusteredNode === void 0)
      return void 0;
    const clusterId = clusteredNode.clusterId;
    if (clusterId === void 0)
      return void 0;
    return this.body.nodes[clusterId];
  }
  /**
   * Internal helper function for conditionally removing items in array
   *
   * Done like this because Array.filter() is not fully supported by all IE's.
   * @param {Array} arr
   * @param {Function} callback
   * @returns {Array}
   * @private
   */
  _filter(arr, callback) {
    const ret = [];
    forEach$1(arr, (item) => {
      if (callback(item)) {
        ret.push(item);
      }
    });
    return ret;
  }
  /**
   * Scan all edges for changes in clustering and adjust this if necessary.
   *
   * Call this (internally) after there has been a change in node or edge data.
   *
   * Pre: States of this.body.nodes and this.body.edges consistent
   * Pre: this.clusteredNodes and this.clusteredEdge consistent with containedNodes and containedEdges
   *      of cluster nodes.
   */
  _updateState() {
    let nodeId;
    const deletedNodeIds = [];
    const deletedEdgeIds = {};
    const eachClusterNode = (callback) => {
      forEach$1(this.body.nodes, (node) => {
        if (node.isCluster === true) {
          callback(node);
        }
      });
    };
    for (nodeId in this.clusteredNodes) {
      if (!Object.prototype.hasOwnProperty.call(this.clusteredNodes, nodeId))
        continue;
      const node = this.body.nodes[nodeId];
      if (node === void 0) {
        deletedNodeIds.push(nodeId);
      }
    }
    eachClusterNode(function(clusterNode) {
      for (let n = 0; n < deletedNodeIds.length; n++) {
        delete clusterNode.containedNodes[deletedNodeIds[n]];
      }
    });
    for (let n = 0; n < deletedNodeIds.length; n++) {
      delete this.clusteredNodes[deletedNodeIds[n]];
    }
    forEach$1(this.clusteredEdges, (edgeId) => {
      const edge = this.body.edges[edgeId];
      if (edge === void 0 || !edge.endPointsValid()) {
        deletedEdgeIds[edgeId] = edgeId;
      }
    });
    eachClusterNode(function(clusterNode) {
      forEach$1(clusterNode.containedEdges, (edge, edgeId) => {
        if (!edge.endPointsValid() && !deletedEdgeIds[edgeId]) {
          deletedEdgeIds[edgeId] = edgeId;
        }
      });
    });
    forEach$1(this.body.edges, (edge, edgeId) => {
      let isValid = true;
      const replacedIds = edge.clusteringEdgeReplacingIds;
      if (replacedIds !== void 0) {
        let numValid = 0;
        forEach$1(replacedIds, (containedEdgeId) => {
          const containedEdge = this.body.edges[containedEdgeId];
          if (containedEdge !== void 0 && containedEdge.endPointsValid()) {
            numValid += 1;
          }
        });
        isValid = numValid > 0;
      }
      if (!edge.endPointsValid() || !isValid) {
        deletedEdgeIds[edgeId] = edgeId;
      }
    });
    eachClusterNode((clusterNode) => {
      forEach$1(deletedEdgeIds, (deletedEdgeId) => {
        delete clusterNode.containedEdges[deletedEdgeId];
        forEach$1(clusterNode.edges, (edge, m) => {
          if (edge.id === deletedEdgeId) {
            clusterNode.edges[m] = null;
            return;
          }
          edge.clusteringEdgeReplacingIds = this._filter(edge.clusteringEdgeReplacingIds, function(id2) {
            return !deletedEdgeIds[id2];
          });
        });
        clusterNode.edges = this._filter(clusterNode.edges, function(item) {
          return item !== null;
        });
      });
    });
    forEach$1(deletedEdgeIds, (edgeId) => {
      delete this.clusteredEdges[edgeId];
    });
    forEach$1(deletedEdgeIds, (edgeId) => {
      delete this.body.edges[edgeId];
    });
    const ids = _Object$keys(this.body.edges);
    forEach$1(ids, (edgeId) => {
      const edge = this.body.edges[edgeId];
      const shouldBeClustered = this._isClusteredNode(edge.fromId) || this._isClusteredNode(edge.toId);
      if (shouldBeClustered === this._isClusteredEdge(edge.id)) {
        return;
      }
      if (shouldBeClustered) {
        const clusterFrom = this._getClusterNodeForNode(edge.fromId);
        if (clusterFrom !== void 0) {
          this._clusterEdges(this.body.nodes[edge.fromId], edge, clusterFrom);
        }
        const clusterTo = this._getClusterNodeForNode(edge.toId);
        if (clusterTo !== void 0) {
          this._clusterEdges(this.body.nodes[edge.toId], edge, clusterTo);
        }
      } else {
        delete this._clusterEdges[edgeId];
        this._restoreEdge(edge);
      }
    });
    let changed = false;
    let continueLoop = true;
    while (continueLoop) {
      const clustersToOpen = [];
      eachClusterNode(function(clusterNode) {
        const numNodes = _Object$keys(clusterNode.containedNodes).length;
        const allowSingle = clusterNode.options.allowSingleNodeCluster === true;
        if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {
          clustersToOpen.push(clusterNode.id);
        }
      });
      for (let n = 0; n < clustersToOpen.length; ++n) {
        this.openCluster(
          clustersToOpen[n],
          {},
          false
          /* Don't refresh, we're in an refresh/update already */
        );
      }
      continueLoop = clustersToOpen.length > 0;
      changed = changed || continueLoop;
    }
    if (changed) {
      this._updateState();
    }
  }
  /**
   * Determine if node with given id is part of a cluster.
   * @param {Node.id} nodeId
   * @returns {boolean} true if part of a cluster.
   */
  _isClusteredNode(nodeId) {
    return this.clusteredNodes[nodeId] !== void 0;
  }
  /**
   * Determine if edge with given id is not visible due to clustering.
   *
   * An edge is considered clustered if:
   * - it is directly replaced by a clustering edge
   * - any of its connecting nodes is in a cluster
   * @param {vis.Edge.id} edgeId
   * @returns {boolean} true if part of a cluster.
   */
  _isClusteredEdge(edgeId) {
    return this.clusteredEdges[edgeId] !== void 0;
  }
};
var CanvasRenderer = class {
  /**
   * @param {object} body
   * @param {Canvas} canvas
   */
  constructor(body, canvas) {
    this.body = body;
    this.canvas = canvas;
    this.redrawRequested = false;
    this.requestAnimationFrameRequestId = void 0;
    this.renderingActive = false;
    this.renderRequests = 0;
    this.allowRedraw = true;
    this.dragging = false;
    this.zooming = false;
    this.options = {};
    this.defaultOptions = {
      hideEdgesOnDrag: false,
      hideEdgesOnZoom: false,
      hideNodesOnDrag: false
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    var _context2;
    this.body.emitter.on("dragStart", () => {
      this.dragging = true;
    });
    this.body.emitter.on("dragEnd", () => {
      this.dragging = false;
    });
    this.body.emitter.on("zoom", () => {
      this.zooming = true;
      window.clearTimeout(this.zoomTimeoutId);
      this.zoomTimeoutId = _setTimeout(() => {
        var _context;
        this.zooming = false;
        _bindInstanceProperty(_context = this._requestRedraw).call(_context, this)();
      }, 250);
    });
    this.body.emitter.on("_resizeNodes", () => {
      this._resizeNodes();
    });
    this.body.emitter.on("_redraw", () => {
      if (this.renderingActive === false) {
        this._redraw();
      }
    });
    this.body.emitter.on("_blockRedraw", () => {
      this.allowRedraw = false;
    });
    this.body.emitter.on("_allowRedraw", () => {
      this.allowRedraw = true;
      this.redrawRequested = false;
    });
    this.body.emitter.on("_requestRedraw", _bindInstanceProperty(_context2 = this._requestRedraw).call(_context2, this));
    this.body.emitter.on("_startRendering", () => {
      this.renderRequests += 1;
      this.renderingActive = true;
      this._startRendering();
    });
    this.body.emitter.on("_stopRendering", () => {
      this.renderRequests -= 1;
      this.renderingActive = this.renderRequests > 0;
      this.requestAnimationFrameRequestId = void 0;
    });
    this.body.emitter.on("destroy", () => {
      this.renderRequests = 0;
      this.allowRedraw = false;
      this.renderingActive = false;
      window.cancelAnimationFrame(this.requestAnimationFrameRequestId);
      this.body.emitter.off();
    });
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      const fields = ["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag"];
      selectiveDeepExtend(fields, this.options, options2);
    }
  }
  /**
   *
   * @private
   */
  _startRendering() {
    if (this.renderingActive === true) {
      if (this.requestAnimationFrameRequestId === void 0) {
        var _context3;
        this.requestAnimationFrameRequestId = window.requestAnimationFrame(_bindInstanceProperty(_context3 = this._renderStep).call(_context3, this), this.simulationInterval);
      }
    }
  }
  /**
   *
   * @private
   */
  _renderStep() {
    if (this.renderingActive === true) {
      this.requestAnimationFrameRequestId = void 0;
      this._startRendering();
      this._redraw();
    }
  }
  /**
   * Redraw the network with the current data
   * chart will be resized too.
   */
  redraw() {
    this.body.emitter.emit("setSize");
    this._redraw();
  }
  /**
   * Redraw the network with the current data
   * @private
   */
  _requestRedraw() {
    if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
      this.redrawRequested = true;
      window.requestAnimationFrame(() => {
        this._redraw(false);
      });
    }
  }
  /**
   * Redraw the network with the current data
   * @param {boolean} [hidden] | Used to get the first estimate of the node sizes.
   *                                   Only the nodes are drawn after which they are quickly drawn over.
   * @private
   */
  _redraw() {
    let hidden = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    if (this.allowRedraw === true) {
      this.body.emitter.emit("initRedraw");
      this.redrawRequested = false;
      const drawLater = {
        drawExternalLabels: null
      };
      if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
        this.canvas.setSize();
      }
      this.canvas.setTransform();
      const ctx = this.canvas.getContext();
      const w = this.canvas.frame.canvas.clientWidth;
      const h = this.canvas.frame.canvas.clientHeight;
      ctx.clearRect(0, 0, w, h);
      if (this.canvas.frame.clientWidth === 0) {
        return;
      }
      ctx.save();
      ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
      ctx.scale(this.body.view.scale, this.body.view.scale);
      ctx.beginPath();
      this.body.emitter.emit("beforeDrawing", ctx);
      ctx.closePath();
      if (hidden === false) {
        if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {
          this._drawEdges(ctx);
        }
      }
      if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
        const {
          drawExternalLabels
        } = this._drawNodes(ctx, hidden);
        drawLater.drawExternalLabels = drawExternalLabels;
      }
      if (hidden === false) {
        if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {
          this._drawArrows(ctx);
        }
      }
      if (drawLater.drawExternalLabels != null) {
        drawLater.drawExternalLabels();
      }
      if (hidden === false) {
        this._drawSelectionBox(ctx);
      }
      ctx.beginPath();
      this.body.emitter.emit("afterDrawing", ctx);
      ctx.closePath();
      ctx.restore();
      if (hidden === true) {
        ctx.clearRect(0, 0, w, h);
      }
    }
  }
  /**
   * Redraw all nodes
   * @param {CanvasRenderingContext2D}   ctx
   * @param {boolean} [alwaysShow]
   * @private
   */
  _resizeNodes() {
    this.canvas.setTransform();
    const ctx = this.canvas.getContext();
    ctx.save();
    ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
    ctx.scale(this.body.view.scale, this.body.view.scale);
    const nodes = this.body.nodes;
    let node;
    for (const nodeId in nodes) {
      if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
        node = nodes[nodeId];
        node.resize(ctx);
        node.updateBoundingBox(ctx, node.selected);
      }
    }
    ctx.restore();
  }
  /**
   * Redraw all nodes
   * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
   * @param {boolean} [alwaysShow]
   * @private
   * @returns {object} Callbacks to draw later on higher layers.
   */
  _drawNodes(ctx) {
    let alwaysShow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const nodes = this.body.nodes;
    const nodeIndices = this.body.nodeIndices;
    let node;
    const selected = [];
    const hovered = [];
    const margin = 20;
    const topLeft = this.canvas.DOMtoCanvas({
      x: -margin,
      y: -margin
    });
    const bottomRight = this.canvas.DOMtoCanvas({
      x: this.canvas.frame.canvas.clientWidth + margin,
      y: this.canvas.frame.canvas.clientHeight + margin
    });
    const viewableArea = {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
    const drawExternalLabels = [];
    for (let i2 = 0; i2 < nodeIndices.length; i2++) {
      node = nodes[nodeIndices[i2]];
      if (node.hover) {
        hovered.push(nodeIndices[i2]);
      } else if (node.isSelected()) {
        selected.push(nodeIndices[i2]);
      } else {
        if (alwaysShow === true) {
          const drawLater = node.draw(ctx);
          if (drawLater.drawExternalLabel != null) {
            drawExternalLabels.push(drawLater.drawExternalLabel);
          }
        } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {
          const drawLater = node.draw(ctx);
          if (drawLater.drawExternalLabel != null) {
            drawExternalLabels.push(drawLater.drawExternalLabel);
          }
        } else {
          node.updateBoundingBox(ctx, node.selected);
        }
      }
    }
    let i;
    const selectedLength = selected.length;
    const hoveredLength = hovered.length;
    for (i = 0; i < selectedLength; i++) {
      node = nodes[selected[i]];
      const drawLater = node.draw(ctx);
      if (drawLater.drawExternalLabel != null) {
        drawExternalLabels.push(drawLater.drawExternalLabel);
      }
    }
    for (i = 0; i < hoveredLength; i++) {
      node = nodes[hovered[i]];
      const drawLater = node.draw(ctx);
      if (drawLater.drawExternalLabel != null) {
        drawExternalLabels.push(drawLater.drawExternalLabel);
      }
    }
    return {
      drawExternalLabels: () => {
        for (const draw of drawExternalLabels) {
          draw();
        }
      }
    };
  }
  /**
   * Redraw all edges
   * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
   * @private
   */
  _drawEdges(ctx) {
    const edges = this.body.edges;
    const edgeIndices = this.body.edgeIndices;
    for (let i = 0; i < edgeIndices.length; i++) {
      const edge = edges[edgeIndices[i]];
      if (edge.connected === true) {
        edge.draw(ctx);
      }
    }
  }
  /**
   * Redraw all arrows
   * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
   * @private
   */
  _drawArrows(ctx) {
    const edges = this.body.edges;
    const edgeIndices = this.body.edgeIndices;
    for (let i = 0; i < edgeIndices.length; i++) {
      const edge = edges[edgeIndices[i]];
      if (edge.connected === true) {
        edge.drawArrows(ctx);
      }
    }
  }
  /**
   * Redraw selection box
   * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
   * @private
   */
  _drawSelectionBox(ctx) {
    if (this.body.selectionBox.show) {
      ctx.beginPath();
      const width = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x;
      const height = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
      ctx.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);
      ctx.fillStyle = "rgba(151, 194, 252, 0.2)";
      ctx.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);
      ctx.strokeStyle = "rgba(151, 194, 252, 1)";
      ctx.stroke();
    } else {
      ctx.closePath();
    }
  }
};
var path$2 = path$t;
var setInterval$1 = path$2.setInterval;
var setInterval = setInterval$1;
var _setInterval = getDefaultExportFromCjs(setInterval);
function onTouch(hammer, callback) {
  callback.inputHandler = function(event) {
    if (event.isFirst) {
      callback(event);
    }
  };
  hammer.on("hammer.input", callback.inputHandler);
}
function onRelease(hammer, callback) {
  callback.inputHandler = function(event) {
    if (event.isFinal) {
      callback(event);
    }
  };
  return hammer.on("hammer.input", callback.inputHandler);
}
var Canvas = class {
  /**
   * @param {object} body
   */
  constructor(body) {
    this.body = body;
    this.pixelRatio = 1;
    this.cameraState = {};
    this.initialized = false;
    this.canvasViewCenter = {};
    this._cleanupCallbacks = [];
    this.options = {};
    this.defaultOptions = {
      autoResize: true,
      height: "100%",
      width: "100%"
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    var _context;
    this.body.emitter.once("resize", (obj) => {
      if (obj.width !== 0) {
        this.body.view.translation.x = obj.width * 0.5;
      }
      if (obj.height !== 0) {
        this.body.view.translation.y = obj.height * 0.5;
      }
    });
    this.body.emitter.on("setSize", _bindInstanceProperty(_context = this.setSize).call(_context, this));
    this.body.emitter.on("destroy", () => {
      this.hammerFrame.destroy();
      this.hammer.destroy();
      this._cleanUp();
    });
  }
  /**
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      const fields = ["width", "height", "autoResize"];
      selectiveDeepExtend(fields, this.options, options2);
    }
    this._cleanUp();
    if (this.options.autoResize === true) {
      var _context2;
      if (window.ResizeObserver) {
        const observer = new ResizeObserver(() => {
          const changed = this.setSize();
          if (changed === true) {
            this.body.emitter.emit("_requestRedraw");
          }
        });
        const {
          frame
        } = this;
        observer.observe(frame);
        this._cleanupCallbacks.push(() => {
          observer.unobserve(frame);
        });
      } else {
        const resizeTimer = _setInterval(() => {
          const changed = this.setSize();
          if (changed === true) {
            this.body.emitter.emit("_requestRedraw");
          }
        }, 1e3);
        this._cleanupCallbacks.push(() => {
          clearInterval(resizeTimer);
        });
      }
      const resizeFunction = _bindInstanceProperty(_context2 = this._onResize).call(_context2, this);
      window.addEventListener("resize", resizeFunction);
      this._cleanupCallbacks.push(() => {
        window.removeEventListener("resize", resizeFunction);
      });
    }
  }
  /**
   * @private
   */
  _cleanUp() {
    var _context3, _context4, _context5;
    _forEachInstanceProperty(_context3 = _reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupCallbacks).call(_context5, 0)).call(_context4)).call(_context3, (callback) => {
      try {
        callback();
      } catch (error) {
        console.error(error);
      }
    });
  }
  /**
   * @private
   */
  _onResize() {
    this.setSize();
    this.body.emitter.emit("_redraw");
  }
  /**
   * Get and store the cameraState
   * @param {number} [pixelRatio]
   * @private
   */
  _getCameraState() {
    let pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.pixelRatio;
    if (this.initialized === true) {
      this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
      this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
      this.cameraState.scale = this.body.view.scale;
      this.cameraState.position = this.DOMtoCanvas({
        x: 0.5 * this.frame.canvas.width / pixelRatio,
        y: 0.5 * this.frame.canvas.height / pixelRatio
      });
    }
  }
  /**
   * Set the cameraState
   * @private
   */
  _setCameraState() {
    if (this.cameraState.scale !== void 0 && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
      const widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
      const heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
      let newScale = this.cameraState.scale;
      if (widthRatio != 1 && heightRatio != 1) {
        newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
      } else if (widthRatio != 1) {
        newScale = this.cameraState.scale * widthRatio;
      } else if (heightRatio != 1) {
        newScale = this.cameraState.scale * heightRatio;
      }
      this.body.view.scale = newScale;
      const currentViewCenter = this.DOMtoCanvas({
        x: 0.5 * this.frame.canvas.clientWidth,
        y: 0.5 * this.frame.canvas.clientHeight
      });
      const distanceFromCenter = {
        // offset from view, distance view has to change by these x and y to center the node
        x: currentViewCenter.x - this.cameraState.position.x,
        y: currentViewCenter.y - this.cameraState.position.y
      };
      this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
      this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
    }
  }
  /**
   *
   * @param {number|string} value
   * @returns {string}
   * @private
   */
  _prepareValue(value) {
    if (typeof value === "number") {
      return value + "px";
    } else if (typeof value === "string") {
      if (_indexOfInstanceProperty(value).call(value, "%") !== -1 || _indexOfInstanceProperty(value).call(value, "px") !== -1) {
        return value;
      } else if (_indexOfInstanceProperty(value).call(value, "%") === -1) {
        return value + "px";
      }
    }
    throw new Error("Could not use the value supplied for width or height:" + value);
  }
  /**
   * Create the HTML
   */
  _create() {
    while (this.body.container.hasChildNodes()) {
      this.body.container.removeChild(this.body.container.firstChild);
    }
    this.frame = document.createElement("div");
    this.frame.className = "vis-network";
    this.frame.style.position = "relative";
    this.frame.style.overflow = "hidden";
    this.frame.tabIndex = 0;
    this.frame.canvas = document.createElement("canvas");
    this.frame.canvas.style.position = "relative";
    this.frame.appendChild(this.frame.canvas);
    if (!this.frame.canvas.getContext) {
      const noCanvas = document.createElement("DIV");
      noCanvas.style.color = "red";
      noCanvas.style.fontWeight = "bold";
      noCanvas.style.padding = "10px";
      noCanvas.innerText = "Error: your browser does not support HTML canvas";
      this.frame.canvas.appendChild(noCanvas);
    } else {
      this._setPixelRatio();
      this.setTransform();
    }
    this.body.container.appendChild(this.frame);
    this.body.view.scale = 1;
    this.body.view.translation = {
      x: 0.5 * this.frame.canvas.clientWidth,
      y: 0.5 * this.frame.canvas.clientHeight
    };
    this._bindHammer();
  }
  /**
   * This function binds hammer, it can be repeated over and over due to the uniqueness check.
   * @private
   */
  _bindHammer() {
    if (this.hammer !== void 0) {
      this.hammer.destroy();
    }
    this.drag = {};
    this.pinch = {};
    this.hammer = new Hammer(this.frame.canvas);
    this.hammer.get("pinch").set({
      enable: true
    });
    this.hammer.get("pan").set({
      threshold: 5,
      direction: Hammer.DIRECTION_ALL
    });
    onTouch(this.hammer, (event) => {
      this.body.eventListeners.onTouch(event);
    });
    this.hammer.on("tap", (event) => {
      this.body.eventListeners.onTap(event);
    });
    this.hammer.on("doubletap", (event) => {
      this.body.eventListeners.onDoubleTap(event);
    });
    this.hammer.on("press", (event) => {
      this.body.eventListeners.onHold(event);
    });
    this.hammer.on("panstart", (event) => {
      this.body.eventListeners.onDragStart(event);
    });
    this.hammer.on("panmove", (event) => {
      this.body.eventListeners.onDrag(event);
    });
    this.hammer.on("panend", (event) => {
      this.body.eventListeners.onDragEnd(event);
    });
    this.hammer.on("pinch", (event) => {
      this.body.eventListeners.onPinch(event);
    });
    this.frame.canvas.addEventListener("wheel", (event) => {
      this.body.eventListeners.onMouseWheel(event);
    });
    this.frame.canvas.addEventListener("mousemove", (event) => {
      this.body.eventListeners.onMouseMove(event);
    });
    this.frame.canvas.addEventListener("contextmenu", (event) => {
      this.body.eventListeners.onContext(event);
    });
    this.hammerFrame = new Hammer(this.frame);
    onRelease(this.hammerFrame, (event) => {
      this.body.eventListeners.onRelease(event);
    });
  }
  /**
   * Set a new size for the network
   * @param {string} width   Width in pixels or percentage (for example '800px'
   *                         or '50%')
   * @param {string} height  Height in pixels or percentage  (for example '400px'
   *                         or '30%')
   * @returns {boolean}
   */
  setSize() {
    let width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.width;
    let height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.height;
    width = this._prepareValue(width);
    height = this._prepareValue(height);
    let emitEvent = false;
    const oldWidth = this.frame.canvas.width;
    const oldHeight = this.frame.canvas.height;
    const previousRatio = this.pixelRatio;
    this._setPixelRatio();
    if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
      this._getCameraState(previousRatio);
      this.frame.style.width = width;
      this.frame.style.height = height;
      this.frame.canvas.style.width = "100%";
      this.frame.canvas.style.height = "100%";
      this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
      this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
      this.options.width = width;
      this.options.height = height;
      this.canvasViewCenter = {
        x: 0.5 * this.frame.clientWidth,
        y: 0.5 * this.frame.clientHeight
      };
      emitEvent = true;
    } else {
      const newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
      const newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
      if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {
        this._getCameraState(previousRatio);
      }
      if (this.frame.canvas.width !== newWidth) {
        this.frame.canvas.width = newWidth;
        emitEvent = true;
      }
      if (this.frame.canvas.height !== newHeight) {
        this.frame.canvas.height = newHeight;
        emitEvent = true;
      }
    }
    if (emitEvent === true) {
      this.body.emitter.emit("resize", {
        width: Math.round(this.frame.canvas.width / this.pixelRatio),
        height: Math.round(this.frame.canvas.height / this.pixelRatio),
        oldWidth: Math.round(oldWidth / this.pixelRatio),
        oldHeight: Math.round(oldHeight / this.pixelRatio)
      });
      this._setCameraState();
    }
    this.initialized = true;
    return emitEvent;
  }
  /**
   *
   * @returns {CanvasRenderingContext2D}
   */
  getContext() {
    return this.frame.canvas.getContext("2d");
  }
  /**
   * Determine the pixel ratio for various browsers.
   * @returns {number}
   * @private
   */
  _determinePixelRatio() {
    const ctx = this.getContext();
    if (ctx === void 0) {
      throw new Error("Could not get canvax context");
    }
    let numerator = 1;
    if (typeof window !== "undefined") {
      numerator = window.devicePixelRatio || 1;
    }
    const denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
    return numerator / denominator;
  }
  /**
   * Lazy determination of pixel ratio.
   * @private
   */
  _setPixelRatio() {
    this.pixelRatio = this._determinePixelRatio();
  }
  /**
   * Set the transform in the contained context, based on its pixelRatio
   */
  setTransform() {
    const ctx = this.getContext();
    if (ctx === void 0) {
      throw new Error("Could not get canvax context");
    }
    ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
  }
  /**
   * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
   * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
   * @param {number} x
   * @returns {number}
   * @private
   */
  _XconvertDOMtoCanvas(x) {
    return (x - this.body.view.translation.x) / this.body.view.scale;
  }
  /**
   * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
   * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
   * @param {number} x
   * @returns {number}
   * @private
   */
  _XconvertCanvasToDOM(x) {
    return x * this.body.view.scale + this.body.view.translation.x;
  }
  /**
   * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
   * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
   * @param {number} y
   * @returns {number}
   * @private
   */
  _YconvertDOMtoCanvas(y) {
    return (y - this.body.view.translation.y) / this.body.view.scale;
  }
  /**
   * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
   * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
   * @param {number} y
   * @returns {number}
   * @private
   */
  _YconvertCanvasToDOM(y) {
    return y * this.body.view.scale + this.body.view.translation.y;
  }
  /**
   * @param {point} pos
   * @returns {point}
   */
  canvasToDOM(pos) {
    return {
      x: this._XconvertCanvasToDOM(pos.x),
      y: this._YconvertCanvasToDOM(pos.y)
    };
  }
  /**
   *
   * @param {point} pos
   * @returns {point}
   */
  DOMtoCanvas(pos) {
    return {
      x: this._XconvertDOMtoCanvas(pos.x),
      y: this._YconvertDOMtoCanvas(pos.y)
    };
  }
};
function normalizeFitOptions(rawOptions, allNodeIds) {
  const options2 = _Object$assign({
    nodes: allNodeIds,
    minZoomLevel: Number.MIN_VALUE,
    maxZoomLevel: 1
  }, rawOptions !== null && rawOptions !== void 0 ? rawOptions : {});
  if (!_Array$isArray(options2.nodes)) {
    throw new TypeError("Nodes has to be an array of ids.");
  }
  if (options2.nodes.length === 0) {
    options2.nodes = allNodeIds;
  }
  if (!(typeof options2.minZoomLevel === "number" && options2.minZoomLevel > 0)) {
    throw new TypeError("Min zoom level has to be a number higher than zero.");
  }
  if (!(typeof options2.maxZoomLevel === "number" && options2.minZoomLevel <= options2.maxZoomLevel)) {
    throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
  }
  return options2;
}
var View = class {
  /**
   * @param {object} body
   * @param {Canvas} canvas
   */
  constructor(body, canvas) {
    var _context, _context2;
    this.body = body;
    this.canvas = canvas;
    this.animationSpeed = 1 / this.renderRefreshRate;
    this.animationEasingFunction = "easeInOutQuint";
    this.easingTime = 0;
    this.sourceScale = 0;
    this.targetScale = 0;
    this.sourceTranslation = 0;
    this.targetTranslation = 0;
    this.lockedOnNodeId = void 0;
    this.lockedOnNodeOffset = void 0;
    this.touchTime = 0;
    this.viewFunction = void 0;
    this.body.emitter.on("fit", _bindInstanceProperty(_context = this.fit).call(_context, this));
    this.body.emitter.on("animationFinished", () => {
      this.body.emitter.emit("_stopRendering");
    });
    this.body.emitter.on("unlockNode", _bindInstanceProperty(_context2 = this.releaseNode).call(_context2, this));
  }
  /**
   *
   * @param {object} [options]
   */
  setOptions() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.options = options2;
  }
  /**
   * This function zooms out to fit all data on screen based on amount of nodes
   * @param {object} [options={{nodes=Array}}]
   * @param options
   * @param {boolean} [initialZoom]  | zoom based on fitted formula or range, true = fitted, default = false;
   */
  fit(options2) {
    let initialZoom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    options2 = normalizeFitOptions(options2, this.body.nodeIndices);
    const canvasWidth = this.canvas.frame.canvas.clientWidth;
    const canvasHeight = this.canvas.frame.canvas.clientHeight;
    let range;
    let zoomLevel;
    if (canvasWidth === 0 || canvasHeight === 0) {
      zoomLevel = 1;
      range = NetworkUtil.getRange(this.body.nodes, options2.nodes);
    } else if (initialZoom === true) {
      let positionDefined = 0;
      for (const nodeId in this.body.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
          const node = this.body.nodes[nodeId];
          if (node.predefinedPosition === true) {
            positionDefined += 1;
          }
        }
      }
      if (positionDefined > 0.5 * this.body.nodeIndices.length) {
        this.fit(options2, false);
        return;
      }
      range = NetworkUtil.getRange(this.body.nodes, options2.nodes);
      const numberOfNodes = this.body.nodeIndices.length;
      zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822;
      const factor = Math.min(canvasWidth / 600, canvasHeight / 600);
      zoomLevel *= factor;
    } else {
      this.body.emitter.emit("_resizeNodes");
      range = NetworkUtil.getRange(this.body.nodes, options2.nodes);
      const xDistance = Math.abs(range.maxX - range.minX) * 1.1;
      const yDistance = Math.abs(range.maxY - range.minY) * 1.1;
      const xZoomLevel = canvasWidth / xDistance;
      const yZoomLevel = canvasHeight / yDistance;
      zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
    }
    if (zoomLevel > options2.maxZoomLevel) {
      zoomLevel = options2.maxZoomLevel;
    } else if (zoomLevel < options2.minZoomLevel) {
      zoomLevel = options2.minZoomLevel;
    }
    const center = NetworkUtil.findCenter(range);
    const animationOptions = {
      position: center,
      scale: zoomLevel,
      animation: options2.animation
    };
    this.moveTo(animationOptions);
  }
  // animation
  /**
   * Center a node in view.
   * @param {number} nodeId
   * @param {number} [options]
   */
  focus(nodeId) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.body.nodes[nodeId] !== void 0) {
      const nodePosition = {
        x: this.body.nodes[nodeId].x,
        y: this.body.nodes[nodeId].y
      };
      options2.position = nodePosition;
      options2.lockedOnNode = nodeId;
      this.moveTo(options2);
    } else {
      console.error("Node: " + nodeId + " cannot be found.");
    }
  }
  /**
   *
   * @param {object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
   *                          |  options.scale    = number                 // scale to move to
   *                          |  options.position = {x:number, y:number}   // position to move to
   *                          |  options.animation = {duration:number, easingFunction:String} || Boolean   // position to move to
   */
  moveTo(options2) {
    if (options2 === void 0) {
      options2 = {};
      return;
    }
    if (options2.offset != null) {
      if (options2.offset.x != null) {
        options2.offset.x = +options2.offset.x;
        if (!_Number$isFinite(options2.offset.x)) {
          throw new TypeError('The option "offset.x" has to be a finite number.');
        }
      } else {
        options2.offset.x = 0;
      }
      if (options2.offset.y != null) {
        options2.offset.y = +options2.offset.y;
        if (!_Number$isFinite(options2.offset.y)) {
          throw new TypeError('The option "offset.y" has to be a finite number.');
        }
      } else {
        options2.offset.x = 0;
      }
    } else {
      options2.offset = {
        x: 0,
        y: 0
      };
    }
    if (options2.position != null) {
      if (options2.position.x != null) {
        options2.position.x = +options2.position.x;
        if (!_Number$isFinite(options2.position.x)) {
          throw new TypeError('The option "position.x" has to be a finite number.');
        }
      } else {
        options2.position.x = 0;
      }
      if (options2.position.y != null) {
        options2.position.y = +options2.position.y;
        if (!_Number$isFinite(options2.position.y)) {
          throw new TypeError('The option "position.y" has to be a finite number.');
        }
      } else {
        options2.position.x = 0;
      }
    } else {
      options2.position = this.getViewPosition();
    }
    if (options2.scale != null) {
      options2.scale = +options2.scale;
      if (!(options2.scale > 0)) {
        throw new TypeError('The option "scale" has to be a number greater than zero.');
      }
    } else {
      options2.scale = this.body.view.scale;
    }
    if (options2.animation === void 0) {
      options2.animation = {
        duration: 0
      };
    }
    if (options2.animation === false) {
      options2.animation = {
        duration: 0
      };
    }
    if (options2.animation === true) {
      options2.animation = {};
    }
    if (options2.animation.duration === void 0) {
      options2.animation.duration = 1e3;
    }
    if (options2.animation.easingFunction === void 0) {
      options2.animation.easingFunction = "easeInOutQuad";
    }
    this.animateView(options2);
  }
  /**
   *
   * @param {object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
   *                          |  options.time     = number                 // animation time in milliseconds
   *                          |  options.scale    = number                 // scale to animate to
   *                          |  options.position = {x:number, y:number}   // position to animate to
   *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
   *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
   *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
   *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
   */
  animateView(options2) {
    if (options2 === void 0) {
      return;
    }
    this.animationEasingFunction = options2.animation.easingFunction;
    this.releaseNode();
    if (options2.locked === true) {
      this.lockedOnNodeId = options2.lockedOnNode;
      this.lockedOnNodeOffset = options2.offset;
    }
    if (this.easingTime != 0) {
      this._transitionRedraw(true);
    }
    this.sourceScale = this.body.view.scale;
    this.sourceTranslation = this.body.view.translation;
    this.targetScale = options2.scale;
    this.body.view.scale = this.targetScale;
    const viewCenter = this.canvas.DOMtoCanvas({
      x: 0.5 * this.canvas.frame.canvas.clientWidth,
      y: 0.5 * this.canvas.frame.canvas.clientHeight
    });
    const distanceFromCenter = {
      // offset from view, distance view has to change by these x and y to center the node
      x: viewCenter.x - options2.position.x,
      y: viewCenter.y - options2.position.y
    };
    this.targetTranslation = {
      x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options2.offset.x,
      y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options2.offset.y
    };
    if (options2.animation.duration === 0) {
      if (this.lockedOnNodeId != void 0) {
        var _context3;
        this.viewFunction = _bindInstanceProperty(_context3 = this._lockedRedraw).call(_context3, this);
        this.body.emitter.on("initRedraw", this.viewFunction);
      } else {
        this.body.view.scale = this.targetScale;
        this.body.view.translation = this.targetTranslation;
        this.body.emitter.emit("_requestRedraw");
      }
    } else {
      var _context4;
      this.animationSpeed = 1 / (60 * options2.animation.duration * 1e-3) || 1 / 60;
      this.animationEasingFunction = options2.animation.easingFunction;
      this.viewFunction = _bindInstanceProperty(_context4 = this._transitionRedraw).call(_context4, this);
      this.body.emitter.on("initRedraw", this.viewFunction);
      this.body.emitter.emit("_startRendering");
    }
  }
  /**
   * used to animate smoothly by hijacking the redraw function.
   * @private
   */
  _lockedRedraw() {
    const nodePosition = {
      x: this.body.nodes[this.lockedOnNodeId].x,
      y: this.body.nodes[this.lockedOnNodeId].y
    };
    const viewCenter = this.canvas.DOMtoCanvas({
      x: 0.5 * this.canvas.frame.canvas.clientWidth,
      y: 0.5 * this.canvas.frame.canvas.clientHeight
    });
    const distanceFromCenter = {
      // offset from view, distance view has to change by these x and y to center the node
      x: viewCenter.x - nodePosition.x,
      y: viewCenter.y - nodePosition.y
    };
    const sourceTranslation = this.body.view.translation;
    const targetTranslation = {
      x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
      y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
    };
    this.body.view.translation = targetTranslation;
  }
  /**
   * Resets state of a locked on Node
   */
  releaseNode() {
    if (this.lockedOnNodeId !== void 0 && this.viewFunction !== void 0) {
      this.body.emitter.off("initRedraw", this.viewFunction);
      this.lockedOnNodeId = void 0;
      this.lockedOnNodeOffset = void 0;
    }
  }
  /**
   * @param {boolean} [finished]
   * @private
   */
  _transitionRedraw() {
    let finished = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    this.easingTime += this.animationSpeed;
    this.easingTime = finished === true ? 1 : this.easingTime;
    const progress = easingFunctions[this.animationEasingFunction](this.easingTime);
    this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
    this.body.view.translation = {
      x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
      y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
    };
    if (this.easingTime >= 1) {
      this.body.emitter.off("initRedraw", this.viewFunction);
      this.easingTime = 0;
      if (this.lockedOnNodeId != void 0) {
        var _context5;
        this.viewFunction = _bindInstanceProperty(_context5 = this._lockedRedraw).call(_context5, this);
        this.body.emitter.on("initRedraw", this.viewFunction);
      }
      this.body.emitter.emit("animationFinished");
    }
  }
  /**
   *
   * @returns {number}
   */
  getScale() {
    return this.body.view.scale;
  }
  /**
   *
   * @returns {{x: number, y: number}}
   */
  getViewPosition() {
    return this.canvas.DOMtoCanvas({
      x: 0.5 * this.canvas.frame.canvas.clientWidth,
      y: 0.5 * this.canvas.frame.canvas.clientHeight
    });
  }
};
function keycharm(options2) {
  var preventDefault = options2 && options2.preventDefault || false;
  var container = options2 && options2.container || window;
  var _exportFunctions = {};
  var _bound = { keydown: {}, keyup: {} };
  var _keys = {};
  var i;
  for (i = 97; i <= 122; i++) {
    _keys[String.fromCharCode(i)] = { code: 65 + (i - 97), shift: false };
  }
  for (i = 65; i <= 90; i++) {
    _keys[String.fromCharCode(i)] = { code: i, shift: true };
  }
  for (i = 0; i <= 9; i++) {
    _keys["" + i] = { code: 48 + i, shift: false };
  }
  for (i = 1; i <= 12; i++) {
    _keys["F" + i] = { code: 111 + i, shift: false };
  }
  for (i = 0; i <= 9; i++) {
    _keys["num" + i] = { code: 96 + i, shift: false };
  }
  _keys["num*"] = { code: 106, shift: false };
  _keys["num+"] = { code: 107, shift: false };
  _keys["num-"] = { code: 109, shift: false };
  _keys["num/"] = { code: 111, shift: false };
  _keys["num."] = { code: 110, shift: false };
  _keys["left"] = { code: 37, shift: false };
  _keys["up"] = { code: 38, shift: false };
  _keys["right"] = { code: 39, shift: false };
  _keys["down"] = { code: 40, shift: false };
  _keys["space"] = { code: 32, shift: false };
  _keys["enter"] = { code: 13, shift: false };
  _keys["shift"] = { code: 16, shift: void 0 };
  _keys["esc"] = { code: 27, shift: false };
  _keys["backspace"] = { code: 8, shift: false };
  _keys["tab"] = { code: 9, shift: false };
  _keys["ctrl"] = { code: 17, shift: false };
  _keys["alt"] = { code: 18, shift: false };
  _keys["delete"] = { code: 46, shift: false };
  _keys["pageup"] = { code: 33, shift: false };
  _keys["pagedown"] = { code: 34, shift: false };
  _keys["="] = { code: 187, shift: false };
  _keys["-"] = { code: 189, shift: false };
  _keys["]"] = { code: 221, shift: false };
  _keys["["] = { code: 219, shift: false };
  var down = function(event) {
    handleEvent(event, "keydown");
  };
  var up = function(event) {
    handleEvent(event, "keyup");
  };
  var handleEvent = function(event, type) {
    if (_bound[type][event.keyCode] !== void 0) {
      var bound = _bound[type][event.keyCode];
      for (var i2 = 0; i2 < bound.length; i2++) {
        if (bound[i2].shift === void 0) {
          bound[i2].fn(event);
        } else if (bound[i2].shift == true && event.shiftKey == true) {
          bound[i2].fn(event);
        } else if (bound[i2].shift == false && event.shiftKey == false) {
          bound[i2].fn(event);
        }
      }
      if (preventDefault == true) {
        event.preventDefault();
      }
    }
  };
  _exportFunctions.bind = function(key, callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    if (_keys[key] === void 0) {
      throw new Error("unsupported key: " + key);
    }
    if (_bound[type][_keys[key].code] === void 0) {
      _bound[type][_keys[key].code] = [];
    }
    _bound[type][_keys[key].code].push({ fn: callback, shift: _keys[key].shift });
  };
  _exportFunctions.bindAll = function(callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    for (var key in _keys) {
      if (_keys.hasOwnProperty(key)) {
        _exportFunctions.bind(key, callback, type);
      }
    }
  };
  _exportFunctions.getKey = function(event) {
    for (var key in _keys) {
      if (_keys.hasOwnProperty(key)) {
        if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
          return key;
        } else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
          return key;
        } else if (event.keyCode == _keys[key].code && key == "shift") {
          return key;
        }
      }
    }
    return "unknown key, currently not supported";
  };
  _exportFunctions.unbind = function(key, callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    if (_keys[key] === void 0) {
      throw new Error("unsupported key: " + key);
    }
    if (callback !== void 0) {
      var newBindings = [];
      var bound = _bound[type][_keys[key].code];
      if (bound !== void 0) {
        for (var i2 = 0; i2 < bound.length; i2++) {
          if (!(bound[i2].fn == callback && bound[i2].shift == _keys[key].shift)) {
            newBindings.push(_bound[type][_keys[key].code][i2]);
          }
        }
      }
      _bound[type][_keys[key].code] = newBindings;
    } else {
      _bound[type][_keys[key].code] = [];
    }
  };
  _exportFunctions.reset = function() {
    _bound = { keydown: {}, keyup: {} };
  };
  _exportFunctions.destroy = function() {
    _bound = { keydown: {}, keyup: {} };
    container.removeEventListener("keydown", down, true);
    container.removeEventListener("keyup", up, true);
  };
  container.addEventListener("keydown", down, true);
  container.addEventListener("keyup", up, true);
  return _exportFunctions;
}
var NavigationHandler = class {
  /**
   * @param {object} body
   * @param {Canvas} canvas
   */
  constructor(body, canvas) {
    this.body = body;
    this.canvas = canvas;
    this.iconsCreated = false;
    this.navigationHammers = [];
    this.boundFunctions = {};
    this.touchTime = 0;
    this.activated = false;
    this.body.emitter.on("activate", () => {
      this.activated = true;
      this.configureKeyboardBindings();
    });
    this.body.emitter.on("deactivate", () => {
      this.activated = false;
      this.configureKeyboardBindings();
    });
    this.body.emitter.on("destroy", () => {
      if (this.keycharm !== void 0) {
        this.keycharm.destroy();
      }
    });
    this.options = {};
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      this.options = options2;
      this.create();
    }
  }
  /**
   * Creates or refreshes navigation and sets key bindings
   */
  create() {
    if (this.options.navigationButtons === true) {
      if (this.iconsCreated === false) {
        this.loadNavigationElements();
      }
    } else if (this.iconsCreated === true) {
      this.cleanNavigation();
    }
    this.configureKeyboardBindings();
  }
  /**
   * Cleans up previous navigation items
   */
  cleanNavigation() {
    if (this.navigationHammers.length != 0) {
      for (let i = 0; i < this.navigationHammers.length; i++) {
        this.navigationHammers[i].destroy();
      }
      this.navigationHammers = [];
    }
    if (this.navigationDOM && this.navigationDOM["wrapper"] && this.navigationDOM["wrapper"].parentNode) {
      this.navigationDOM["wrapper"].parentNode.removeChild(this.navigationDOM["wrapper"]);
    }
    this.iconsCreated = false;
  }
  /**
   * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
   * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
   * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
   * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
   * @private
   */
  loadNavigationElements() {
    this.cleanNavigation();
    this.navigationDOM = {};
    const navigationDivs = ["up", "down", "left", "right", "zoomIn", "zoomOut", "zoomExtends"];
    const navigationDivActions = ["_moveUp", "_moveDown", "_moveLeft", "_moveRight", "_zoomIn", "_zoomOut", "_fit"];
    this.navigationDOM["wrapper"] = document.createElement("div");
    this.navigationDOM["wrapper"].className = "vis-navigation";
    this.canvas.frame.appendChild(this.navigationDOM["wrapper"]);
    for (let i = 0; i < navigationDivs.length; i++) {
      this.navigationDOM[navigationDivs[i]] = document.createElement("div");
      this.navigationDOM[navigationDivs[i]].className = "vis-button vis-" + navigationDivs[i];
      this.navigationDOM["wrapper"].appendChild(this.navigationDOM[navigationDivs[i]]);
      const hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);
      if (navigationDivActions[i] === "_fit") {
        var _context;
        onTouch(hammer, _bindInstanceProperty(_context = this._fit).call(_context, this));
      } else {
        var _context2;
        onTouch(hammer, _bindInstanceProperty(_context2 = this.bindToRedraw).call(_context2, this, navigationDivActions[i]));
      }
      this.navigationHammers.push(hammer);
    }
    const hammerFrame = new Hammer(this.canvas.frame);
    onRelease(hammerFrame, () => {
      this._stopMovement();
    });
    this.navigationHammers.push(hammerFrame);
    this.iconsCreated = true;
  }
  /**
   *
   * @param {string} action
   */
  bindToRedraw(action) {
    if (this.boundFunctions[action] === void 0) {
      var _context3;
      this.boundFunctions[action] = _bindInstanceProperty(_context3 = this[action]).call(_context3, this);
      this.body.emitter.on("initRedraw", this.boundFunctions[action]);
      this.body.emitter.emit("_startRendering");
    }
  }
  /**
   *
   * @param {string} action
   */
  unbindFromRedraw(action) {
    if (this.boundFunctions[action] !== void 0) {
      this.body.emitter.off("initRedraw", this.boundFunctions[action]);
      this.body.emitter.emit("_stopRendering");
      delete this.boundFunctions[action];
    }
  }
  /**
   * this stops all movement induced by the navigation buttons
   * @private
   */
  _fit() {
    if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 700) {
      this.body.emitter.emit("fit", {
        duration: 700
      });
      this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
    }
  }
  /**
   * this stops all movement induced by the navigation buttons
   * @private
   */
  _stopMovement() {
    for (const boundAction in this.boundFunctions) {
      if (Object.prototype.hasOwnProperty.call(this.boundFunctions, boundAction)) {
        this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
        this.body.emitter.emit("_stopRendering");
      }
    }
    this.boundFunctions = {};
  }
  /**
   *
   * @private
   */
  _moveUp() {
    this.body.view.translation.y += this.options.keyboard.speed.y;
  }
  /**
   *
   * @private
   */
  _moveDown() {
    this.body.view.translation.y -= this.options.keyboard.speed.y;
  }
  /**
   *
   * @private
   */
  _moveLeft() {
    this.body.view.translation.x += this.options.keyboard.speed.x;
  }
  /**
   *
   * @private
   */
  _moveRight() {
    this.body.view.translation.x -= this.options.keyboard.speed.x;
  }
  /**
   *
   * @private
   */
  _zoomIn() {
    const scaleOld = this.body.view.scale;
    const scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
    const translation = this.body.view.translation;
    const scaleFrac = scale / scaleOld;
    const tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
    const ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;
    this.body.view.scale = scale;
    this.body.view.translation = {
      x: tx,
      y: ty
    };
    this.body.emitter.emit("zoom", {
      direction: "+",
      scale: this.body.view.scale,
      pointer: null
    });
  }
  /**
   *
   * @private
   */
  _zoomOut() {
    const scaleOld = this.body.view.scale;
    const scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
    const translation = this.body.view.translation;
    const scaleFrac = scale / scaleOld;
    const tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
    const ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;
    this.body.view.scale = scale;
    this.body.view.translation = {
      x: tx,
      y: ty
    };
    this.body.emitter.emit("zoom", {
      direction: "-",
      scale: this.body.view.scale,
      pointer: null
    });
  }
  /**
   * bind all keys using keycharm.
   */
  configureKeyboardBindings() {
    if (this.keycharm !== void 0) {
      this.keycharm.destroy();
    }
    if (this.options.keyboard.enabled === true) {
      if (this.options.keyboard.bindToWindow === true) {
        this.keycharm = keycharm({
          container: window,
          preventDefault: true
        });
      } else {
        this.keycharm = keycharm({
          container: this.canvas.frame,
          preventDefault: true
        });
      }
      this.keycharm.reset();
      if (this.activated === true) {
        var _context4, _context5, _context6, _context7, _context8, _context9, _context0, _context1, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17, _context18, _context19, _context20, _context21, _context22, _context23, _context24, _context25;
        _bindInstanceProperty(_context4 = this.keycharm).call(_context4, "up", () => {
          this.bindToRedraw("_moveUp");
        }, "keydown");
        _bindInstanceProperty(_context5 = this.keycharm).call(_context5, "down", () => {
          this.bindToRedraw("_moveDown");
        }, "keydown");
        _bindInstanceProperty(_context6 = this.keycharm).call(_context6, "left", () => {
          this.bindToRedraw("_moveLeft");
        }, "keydown");
        _bindInstanceProperty(_context7 = this.keycharm).call(_context7, "right", () => {
          this.bindToRedraw("_moveRight");
        }, "keydown");
        _bindInstanceProperty(_context8 = this.keycharm).call(_context8, "=", () => {
          this.bindToRedraw("_zoomIn");
        }, "keydown");
        _bindInstanceProperty(_context9 = this.keycharm).call(_context9, "num+", () => {
          this.bindToRedraw("_zoomIn");
        }, "keydown");
        _bindInstanceProperty(_context0 = this.keycharm).call(_context0, "num-", () => {
          this.bindToRedraw("_zoomOut");
        }, "keydown");
        _bindInstanceProperty(_context1 = this.keycharm).call(_context1, "-", () => {
          this.bindToRedraw("_zoomOut");
        }, "keydown");
        _bindInstanceProperty(_context10 = this.keycharm).call(_context10, "[", () => {
          this.bindToRedraw("_zoomOut");
        }, "keydown");
        _bindInstanceProperty(_context11 = this.keycharm).call(_context11, "]", () => {
          this.bindToRedraw("_zoomIn");
        }, "keydown");
        _bindInstanceProperty(_context12 = this.keycharm).call(_context12, "pageup", () => {
          this.bindToRedraw("_zoomIn");
        }, "keydown");
        _bindInstanceProperty(_context13 = this.keycharm).call(_context13, "pagedown", () => {
          this.bindToRedraw("_zoomOut");
        }, "keydown");
        _bindInstanceProperty(_context14 = this.keycharm).call(_context14, "up", () => {
          this.unbindFromRedraw("_moveUp");
        }, "keyup");
        _bindInstanceProperty(_context15 = this.keycharm).call(_context15, "down", () => {
          this.unbindFromRedraw("_moveDown");
        }, "keyup");
        _bindInstanceProperty(_context16 = this.keycharm).call(_context16, "left", () => {
          this.unbindFromRedraw("_moveLeft");
        }, "keyup");
        _bindInstanceProperty(_context17 = this.keycharm).call(_context17, "right", () => {
          this.unbindFromRedraw("_moveRight");
        }, "keyup");
        _bindInstanceProperty(_context18 = this.keycharm).call(_context18, "=", () => {
          this.unbindFromRedraw("_zoomIn");
        }, "keyup");
        _bindInstanceProperty(_context19 = this.keycharm).call(_context19, "num+", () => {
          this.unbindFromRedraw("_zoomIn");
        }, "keyup");
        _bindInstanceProperty(_context20 = this.keycharm).call(_context20, "num-", () => {
          this.unbindFromRedraw("_zoomOut");
        }, "keyup");
        _bindInstanceProperty(_context21 = this.keycharm).call(_context21, "-", () => {
          this.unbindFromRedraw("_zoomOut");
        }, "keyup");
        _bindInstanceProperty(_context22 = this.keycharm).call(_context22, "[", () => {
          this.unbindFromRedraw("_zoomOut");
        }, "keyup");
        _bindInstanceProperty(_context23 = this.keycharm).call(_context23, "]", () => {
          this.unbindFromRedraw("_zoomIn");
        }, "keyup");
        _bindInstanceProperty(_context24 = this.keycharm).call(_context24, "pageup", () => {
          this.unbindFromRedraw("_zoomIn");
        }, "keyup");
        _bindInstanceProperty(_context25 = this.keycharm).call(_context25, "pagedown", () => {
          this.unbindFromRedraw("_zoomOut");
        }, "keyup");
      }
    }
  }
};
var InteractionHandler = class {
  /**
   * @param {object} body
   * @param {Canvas} canvas
   * @param {SelectionHandler} selectionHandler
   */
  constructor(body, canvas, selectionHandler) {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context0, _context1, _context10, _context11;
    this.body = body;
    this.canvas = canvas;
    this.selectionHandler = selectionHandler;
    this.navigationHandler = new NavigationHandler(body, canvas);
    this.body.eventListeners.onTap = _bindInstanceProperty(_context = this.onTap).call(_context, this);
    this.body.eventListeners.onTouch = _bindInstanceProperty(_context2 = this.onTouch).call(_context2, this);
    this.body.eventListeners.onDoubleTap = _bindInstanceProperty(_context3 = this.onDoubleTap).call(_context3, this);
    this.body.eventListeners.onHold = _bindInstanceProperty(_context4 = this.onHold).call(_context4, this);
    this.body.eventListeners.onDragStart = _bindInstanceProperty(_context5 = this.onDragStart).call(_context5, this);
    this.body.eventListeners.onDrag = _bindInstanceProperty(_context6 = this.onDrag).call(_context6, this);
    this.body.eventListeners.onDragEnd = _bindInstanceProperty(_context7 = this.onDragEnd).call(_context7, this);
    this.body.eventListeners.onMouseWheel = _bindInstanceProperty(_context8 = this.onMouseWheel).call(_context8, this);
    this.body.eventListeners.onPinch = _bindInstanceProperty(_context9 = this.onPinch).call(_context9, this);
    this.body.eventListeners.onMouseMove = _bindInstanceProperty(_context0 = this.onMouseMove).call(_context0, this);
    this.body.eventListeners.onRelease = _bindInstanceProperty(_context1 = this.onRelease).call(_context1, this);
    this.body.eventListeners.onContext = _bindInstanceProperty(_context10 = this.onContext).call(_context10, this);
    this.touchTime = 0;
    this.drag = {};
    this.pinch = {};
    this.popup = void 0;
    this.popupObj = void 0;
    this.popupTimer = void 0;
    this.body.functions.getPointer = _bindInstanceProperty(_context11 = this.getPointer).call(_context11, this);
    this.options = {};
    this.defaultOptions = {
      dragNodes: true,
      dragView: true,
      hover: false,
      keyboard: {
        enabled: false,
        speed: {
          x: 10,
          y: 10,
          zoom: 0.02
        },
        bindToWindow: true,
        autoFocus: true
      },
      navigationButtons: false,
      tooltipDelay: 300,
      zoomView: true,
      zoomSpeed: 1
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    this.body.emitter.on("destroy", () => {
      clearTimeout(this.popupTimer);
      delete this.body.functions.getPointer;
    });
  }
  /**
   *
   * @param {object} options
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      const fields = ["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag", "keyboard", "multiselect", "selectable", "selectConnectedEdges"];
      selectiveNotDeepExtend(fields, this.options, options2);
      mergeOptions(this.options, options2, "keyboard");
      if (options2.tooltip) {
        _Object$assign(this.options.tooltip, options2.tooltip);
        if (options2.tooltip.color) {
          this.options.tooltip.color = parseColor(options2.tooltip.color);
        }
      }
    }
    this.navigationHandler.setOptions(this.options);
  }
  /**
   * Get the pointer location from a touch location
   * @param {{x: number, y: number}} touch
   * @returns {{x: number, y: number}} pointer
   * @private
   */
  getPointer(touch) {
    return {
      x: touch.x - getAbsoluteLeft(this.canvas.frame.canvas),
      y: touch.y - getAbsoluteTop(this.canvas.frame.canvas)
    };
  }
  /**
   * On start of a touch gesture, store the pointer
   * @param {Event}  event   The event
   * @private
   */
  onTouch(event) {
    if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 50) {
      this.drag.pointer = this.getPointer(event.center);
      this.drag.pinched = false;
      this.pinch.scale = this.body.view.scale;
      this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
    }
  }
  /**
   * handle tap/click event: select/unselect a node
   * @param {Event} event
   * @private
   */
  onTap(event) {
    const pointer = this.getPointer(event.center);
    const multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);
    this.checkSelectionChanges(pointer, multiselect);
    this.selectionHandler.commitAndEmit(pointer, event);
    this.selectionHandler.generateClickEvent("click", event, pointer);
  }
  /**
   * handle doubletap event
   * @param {Event} event
   * @private
   */
  onDoubleTap(event) {
    const pointer = this.getPointer(event.center);
    this.selectionHandler.generateClickEvent("doubleClick", event, pointer);
  }
  /**
   * handle long tap event: multi select nodes
   * @param {Event} event
   * @private
   */
  onHold(event) {
    const pointer = this.getPointer(event.center);
    const multiselect = this.selectionHandler.options.multiselect;
    this.checkSelectionChanges(pointer, multiselect);
    this.selectionHandler.commitAndEmit(pointer, event);
    this.selectionHandler.generateClickEvent("click", event, pointer);
    this.selectionHandler.generateClickEvent("hold", event, pointer);
  }
  /**
   * handle the release of the screen
   * @param {Event} event
   * @private
   */
  onRelease(event) {
    if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 10) {
      const pointer = this.getPointer(event.center);
      this.selectionHandler.generateClickEvent("release", event, pointer);
      this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
    }
  }
  /**
   *
   * @param {Event} event
   */
  onContext(event) {
    const pointer = this.getPointer({
      x: event.clientX,
      y: event.clientY
    });
    this.selectionHandler.generateClickEvent("oncontext", event, pointer);
  }
  /**
   * Select and deselect nodes depending current selection change.
   * @param {{x: number, y: number}} pointer
   * @param {boolean} [add]
   */
  checkSelectionChanges(pointer) {
    let add = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (add === true) {
      this.selectionHandler.selectAdditionalOnPoint(pointer);
    } else {
      this.selectionHandler.selectOnPoint(pointer);
    }
  }
  /**
   * Remove all node and edge id's from the first set that are present in the second one.
   * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} firstSet
   * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} secondSet
   * @returns {{nodes: Array.<Node>, edges: Array.<vis.Edge>}}
   * @private
   */
  _determineDifference(firstSet, secondSet) {
    const arrayDiff = function(firstArr, secondArr) {
      const result = [];
      for (let i = 0; i < firstArr.length; i++) {
        const value = firstArr[i];
        if (_indexOfInstanceProperty(secondArr).call(secondArr, value) === -1) {
          result.push(value);
        }
      }
      return result;
    };
    return {
      nodes: arrayDiff(firstSet.nodes, secondSet.nodes),
      edges: arrayDiff(firstSet.edges, secondSet.edges)
    };
  }
  /**
   * This function is called by onDragStart.
   * It is separated out because we can then overload it for the datamanipulation system.
   * @param {Event} event
   * @private
   */
  onDragStart(event) {
    if (this.drag.dragging) {
      return;
    }
    if (this.drag.pointer === void 0) {
      this.onTouch(event);
    }
    const node = this.selectionHandler.getNodeAt(this.drag.pointer);
    this.drag.dragging = true;
    this.drag.selection = [];
    this.drag.translation = _Object$assign({}, this.body.view.translation);
    this.drag.nodeId = void 0;
    if (event.srcEvent.shiftKey) {
      this.body.selectionBox.show = true;
      const pointer = this.getPointer(event.center);
      this.body.selectionBox.position.start = {
        x: this.canvas._XconvertDOMtoCanvas(pointer.x),
        y: this.canvas._YconvertDOMtoCanvas(pointer.y)
      };
      this.body.selectionBox.position.end = {
        x: this.canvas._XconvertDOMtoCanvas(pointer.x),
        y: this.canvas._YconvertDOMtoCanvas(pointer.y)
      };
    } else if (node !== void 0 && this.options.dragNodes === true) {
      this.drag.nodeId = node.id;
      if (node.isSelected() === false) {
        this.selectionHandler.setSelection({
          nodes: [node.id]
        });
      }
      this.selectionHandler.generateClickEvent("dragStart", event, this.drag.pointer);
      for (const node2 of this.selectionHandler.getSelectedNodes()) {
        const s = {
          id: node2.id,
          node: node2,
          // store original x, y, xFixed and yFixed, make the node temporarily Fixed
          x: node2.x,
          y: node2.y,
          xFixed: node2.options.fixed.x,
          yFixed: node2.options.fixed.y
        };
        node2.options.fixed.x = true;
        node2.options.fixed.y = true;
        this.drag.selection.push(s);
      }
    } else {
      this.selectionHandler.generateClickEvent("dragStart", event, this.drag.pointer, void 0, true);
    }
  }
  /**
   * handle drag event
   * @param {Event} event
   * @private
   */
  onDrag(event) {
    if (this.drag.pinched === true) {
      return;
    }
    this.body.emitter.emit("unlockNode");
    const pointer = this.getPointer(event.center);
    const selection = this.drag.selection;
    if (selection && selection.length && this.options.dragNodes === true) {
      this.selectionHandler.generateClickEvent("dragging", event, pointer);
      const deltaX = pointer.x - this.drag.pointer.x;
      const deltaY = pointer.y - this.drag.pointer.y;
      _forEachInstanceProperty(selection).call(selection, (selection2) => {
        const node = selection2.node;
        if (selection2.xFixed === false) {
          node.x = this.canvas._XconvertDOMtoCanvas(this.canvas._XconvertCanvasToDOM(selection2.x) + deltaX);
        }
        if (selection2.yFixed === false) {
          node.y = this.canvas._YconvertDOMtoCanvas(this.canvas._YconvertCanvasToDOM(selection2.y) + deltaY);
        }
      });
      this.body.emitter.emit("startSimulation");
    } else {
      if (event.srcEvent.shiftKey) {
        this.selectionHandler.generateClickEvent("dragging", event, pointer, void 0, true);
        if (this.drag.pointer === void 0) {
          this.onDragStart(event);
          return;
        }
        this.body.selectionBox.position.end = {
          x: this.canvas._XconvertDOMtoCanvas(pointer.x),
          y: this.canvas._YconvertDOMtoCanvas(pointer.y)
        };
        this.body.emitter.emit("_requestRedraw");
      }
      if (this.options.dragView === true && !event.srcEvent.shiftKey) {
        this.selectionHandler.generateClickEvent("dragging", event, pointer, void 0, true);
        if (this.drag.pointer === void 0) {
          this.onDragStart(event);
          return;
        }
        const diffX = pointer.x - this.drag.pointer.x;
        const diffY = pointer.y - this.drag.pointer.y;
        this.body.view.translation = {
          x: this.drag.translation.x + diffX,
          y: this.drag.translation.y + diffY
        };
        this.body.emitter.emit("_requestRedraw");
      }
    }
  }
  /**
   * handle drag start event
   * @param {Event} event
   * @private
   */
  onDragEnd(event) {
    this.drag.dragging = false;
    if (this.body.selectionBox.show) {
      var _context12;
      this.body.selectionBox.show = false;
      const selectionBoxPosition = this.body.selectionBox.position;
      const selectionBoxPositionMinMax = {
        minX: Math.min(selectionBoxPosition.start.x, selectionBoxPosition.end.x),
        minY: Math.min(selectionBoxPosition.start.y, selectionBoxPosition.end.y),
        maxX: Math.max(selectionBoxPosition.start.x, selectionBoxPosition.end.x),
        maxY: Math.max(selectionBoxPosition.start.y, selectionBoxPosition.end.y)
      };
      const toBeSelectedNodes = _filterInstanceProperty(_context12 = this.body.nodeIndices).call(_context12, (nodeId) => {
        const node = this.body.nodes[nodeId];
        return node.x >= selectionBoxPositionMinMax.minX && node.x <= selectionBoxPositionMinMax.maxX && node.y >= selectionBoxPositionMinMax.minY && node.y <= selectionBoxPositionMinMax.maxY;
      });
      _forEachInstanceProperty(toBeSelectedNodes).call(toBeSelectedNodes, (nodeId) => this.selectionHandler.selectObject(this.body.nodes[nodeId]));
      const pointer = this.getPointer(event.center);
      this.selectionHandler.commitAndEmit(pointer, event);
      this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center), void 0, true);
      this.body.emitter.emit("_requestRedraw");
    } else {
      const selection = this.drag.selection;
      if (selection && selection.length) {
        _forEachInstanceProperty(selection).call(selection, function(s) {
          s.node.options.fixed.x = s.xFixed;
          s.node.options.fixed.y = s.yFixed;
        });
        this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center));
        this.body.emitter.emit("startSimulation");
      } else {
        this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center), void 0, true);
        this.body.emitter.emit("_requestRedraw");
      }
    }
  }
  /**
   * Handle pinch event
   * @param {Event}  event   The event
   * @private
   */
  onPinch(event) {
    const pointer = this.getPointer(event.center);
    this.drag.pinched = true;
    if (this.pinch["scale"] === void 0) {
      this.pinch.scale = 1;
    }
    const scale = this.pinch.scale * event.scale;
    this.zoom(scale, pointer);
  }
  /**
   * Zoom the network in or out
   * @param {number} scale a number around 1, and between 0.01 and 10
   * @param {{x: number, y: number}} pointer    Position on screen
   * @private
   */
  zoom(scale, pointer) {
    if (this.options.zoomView === true) {
      const scaleOld = this.body.view.scale;
      if (scale < 1e-5) {
        scale = 1e-5;
      }
      if (scale > 10) {
        scale = 10;
      }
      let preScaleDragPointer = void 0;
      if (this.drag !== void 0) {
        if (this.drag.dragging === true) {
          preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
        }
      }
      const translation = this.body.view.translation;
      const scaleFrac = scale / scaleOld;
      const tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
      const ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;
      this.body.view.scale = scale;
      this.body.view.translation = {
        x: tx,
        y: ty
      };
      if (preScaleDragPointer != void 0) {
        const postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
        this.drag.pointer.x = postScaleDragPointer.x;
        this.drag.pointer.y = postScaleDragPointer.y;
      }
      this.body.emitter.emit("_requestRedraw");
      if (scaleOld < scale) {
        this.body.emitter.emit("zoom", {
          direction: "+",
          scale: this.body.view.scale,
          pointer
        });
      } else {
        this.body.emitter.emit("zoom", {
          direction: "-",
          scale: this.body.view.scale,
          pointer
        });
      }
    }
  }
  /**
   * Event handler for mouse wheel event, used to zoom the timeline
   * See http://adomas.org/javascript-mouse-wheel/
   * https://github.com/EightMedia/hammer.js/issues/256
   * @param {MouseEvent}  event
   * @private
   */
  onMouseWheel(event) {
    if (this.options.zoomView === true) {
      if (event.deltaY !== 0) {
        let scale = this.body.view.scale;
        scale *= 1 + (event.deltaY < 0 ? 1 : -1) * (this.options.zoomSpeed * 0.1);
        const pointer = this.getPointer({
          x: event.clientX,
          y: event.clientY
        });
        this.zoom(scale, pointer);
      }
      event.preventDefault();
    }
  }
  /**
   * Mouse move handler for checking whether the title moves over a node with a title.
   * @param  {Event} event
   * @private
   */
  onMouseMove(event) {
    const pointer = this.getPointer({
      x: event.clientX,
      y: event.clientY
    });
    let popupVisible = false;
    if (this.popup !== void 0) {
      if (this.popup.hidden === false) {
        this._checkHidePopup(pointer);
      }
      if (this.popup.hidden === false) {
        popupVisible = true;
        this.popup.setPosition(pointer.x + 3, pointer.y - 5);
        this.popup.show();
      }
    }
    if (this.options.keyboard.autoFocus && this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
      this.canvas.frame.focus();
    }
    if (popupVisible === false) {
      if (this.popupTimer !== void 0) {
        clearInterval(this.popupTimer);
        this.popupTimer = void 0;
      }
      if (!this.drag.dragging) {
        this.popupTimer = _setTimeout(() => this._checkShowPopup(pointer), this.options.tooltipDelay);
      }
    }
    if (this.options.hover === true) {
      this.selectionHandler.hoverObject(event, pointer);
    }
  }
  /**
   * Check if there is an element on the given position in the network
   * (a node or edge). If so, and if this element has a title,
   * show a popup window with its title.
   * @param {{x:number, y:number}} pointer
   * @private
   */
  _checkShowPopup(pointer) {
    const x = this.canvas._XconvertDOMtoCanvas(pointer.x);
    const y = this.canvas._YconvertDOMtoCanvas(pointer.y);
    const pointerObj = {
      left: x,
      top: y,
      right: x,
      bottom: y
    };
    const previousPopupObjId = this.popupObj === void 0 ? void 0 : this.popupObj.id;
    let nodeUnderCursor = false;
    let popupType = "node";
    if (this.popupObj === void 0) {
      const nodeIndices = this.body.nodeIndices;
      const nodes = this.body.nodes;
      let node;
      const overlappingNodes = [];
      for (let i = 0; i < nodeIndices.length; i++) {
        node = nodes[nodeIndices[i]];
        if (node.isOverlappingWith(pointerObj) === true) {
          nodeUnderCursor = true;
          if (node.getTitle() !== void 0) {
            overlappingNodes.push(nodeIndices[i]);
          }
        }
      }
      if (overlappingNodes.length > 0) {
        this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];
        nodeUnderCursor = true;
      }
    }
    if (this.popupObj === void 0 && nodeUnderCursor === false) {
      const edgeIndices = this.body.edgeIndices;
      const edges = this.body.edges;
      let edge;
      const overlappingEdges = [];
      for (let i = 0; i < edgeIndices.length; i++) {
        edge = edges[edgeIndices[i]];
        if (edge.isOverlappingWith(pointerObj) === true) {
          if (edge.connected === true && edge.getTitle() !== void 0) {
            overlappingEdges.push(edgeIndices[i]);
          }
        }
      }
      if (overlappingEdges.length > 0) {
        this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
        popupType = "edge";
      }
    }
    if (this.popupObj !== void 0) {
      if (this.popupObj.id !== previousPopupObjId) {
        if (this.popup === void 0) {
          this.popup = new Popup2(this.canvas.frame);
        }
        this.popup.popupTargetType = popupType;
        this.popup.popupTargetId = this.popupObj.id;
        this.popup.setPosition(pointer.x + 3, pointer.y - 5);
        this.popup.setText(this.popupObj.getTitle());
        this.popup.show();
        this.body.emitter.emit("showPopup", this.popupObj.id);
      }
    } else {
      if (this.popup !== void 0) {
        this.popup.hide();
        this.body.emitter.emit("hidePopup");
      }
    }
  }
  /**
   * Check if the popup must be hidden, which is the case when the mouse is no
   * longer hovering on the object
   * @param {{x:number, y:number}} pointer
   * @private
   */
  _checkHidePopup(pointer) {
    const pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
    let stillOnObj = false;
    if (this.popup.popupTargetType === "node") {
      if (this.body.nodes[this.popup.popupTargetId] !== void 0) {
        stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);
        if (stillOnObj === true) {
          const overNode = this.selectionHandler.getNodeAt(pointer);
          stillOnObj = overNode === void 0 ? false : overNode.id === this.popup.popupTargetId;
        }
      }
    } else {
      if (this.selectionHandler.getNodeAt(pointer) === void 0) {
        if (this.body.edges[this.popup.popupTargetId] !== void 0) {
          stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
        }
      }
    }
    if (stillOnObj === false) {
      this.popupObj = void 0;
      this.popup.hide();
      this.body.emitter.emit("hidePopup");
    }
  }
};
var collection$1 = collection$3;
var collectionStrong = collectionStrong$2;
collection$1("Set", function(init) {
  return function Set() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong);
var path$1 = path$t;
var set$2 = path$1.Set;
var parent$4 = set$2;
var set$1 = parent$4;
var set = set$1;
var _Set = getDefaultExportFromCjs(set);
var uncurryThis$2 = functionUncurryThis;
var defineBuiltIns$1 = defineBuiltIns$3;
var getWeakData = internalMetadataExports.getWeakData;
var anInstance = anInstance$3;
var anObject = anObject$9;
var isNullOrUndefined = isNullOrUndefined$6;
var isObject$1 = isObject$h;
var iterate = iterate$3;
var ArrayIterationModule = arrayIteration;
var hasOwn2 = hasOwnProperty_1;
var InternalStateModule = internalState;
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var splice2 = uncurryThis$2([].splice);
var id = 0;
var uncaughtFrozenStore = function(state) {
  return state.frozen || (state.frozen = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function() {
  this.entries = [];
};
var findUncaughtFrozen = function(store, key) {
  return find(store.entries, function(it2) {
    return it2[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry)
      return entry[1];
  },
  has: function(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry)
      entry[1] = value;
    else
      this.entries.push([key, value]);
  },
  "delete": function(key) {
    var index2 = findIndex(this.entries, function(it2) {
      return it2[0] === key;
    });
    if (~index2)
      splice2(this.entries, index2, 1);
    return !!~index2;
  }
};
var collectionWeak$1 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: void 0
      });
      if (!isNullOrUndefined(iterable))
        iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor(CONSTRUCTOR_NAME);
    var define = function(that, key, value) {
      var state = getInternalState2(that);
      var data2 = getWeakData(anObject(key), true);
      if (data2 === true)
        uncaughtFrozenStore(state).set(key, value);
      else
        data2[state.id] = value;
      return that;
    };
    defineBuiltIns$1(Prototype, {
      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
      "delete": function(key) {
        var state = getInternalState2(this);
        if (!isObject$1(key))
          return false;
        var data2 = getWeakData(key);
        if (data2 === true)
          return uncaughtFrozenStore(state)["delete"](key);
        return data2 && hasOwn2(data2, state.id) && delete data2[state.id];
      },
      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
      // https://tc39.es/ecma262/#sec-weakset.prototype.has
      has: function has2(key) {
        var state = getInternalState2(this);
        if (!isObject$1(key))
          return false;
        var data2 = getWeakData(key);
        if (data2 === true)
          return uncaughtFrozenStore(state).has(key);
        return data2 && hasOwn2(data2, state.id);
      }
    });
    defineBuiltIns$1(Prototype, IS_MAP ? {
      // `WeakMap.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
      get: function get2(key) {
        var state = getInternalState2(this);
        if (isObject$1(key)) {
          var data2 = getWeakData(key);
          if (data2 === true)
            return uncaughtFrozenStore(state).get(key);
          return data2 ? data2[state.id] : void 0;
        }
      },
      // `WeakMap.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
      set: function set2(key, value) {
        return define(this, key, value);
      }
    } : {
      // `WeakSet.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-weakset.prototype.add
      add: function add(value) {
        return define(this, value, true);
      }
    });
    return Constructor;
  }
};
var FREEZING = freezing;
var global$2 = global$n;
var uncurryThis$1 = functionUncurryThis;
var defineBuiltIns = defineBuiltIns$3;
var InternalMetadataModule = internalMetadataExports;
var collection = collection$3;
var collectionWeak = collectionWeak$1;
var isObject = isObject$h;
var enforceInternalState = internalState.enforce;
var fails$1 = fails$v;
var NATIVE_WEAK_MAP = weakMapBasicDetection;
var $Object = Object;
var isArray2 = Array.isArray;
var isExtensible2 = $Object.isExtensible;
var isFrozen = $Object.isFrozen;
var isSealed = $Object.isSealed;
var freeze = $Object.freeze;
var seal = $Object.seal;
var FROZEN = {};
var SEALED = {};
var IS_IE11 = !global$2.ActiveXObject && "ActiveXObject" in global$2;
var InternalWeakMap;
var wrapper = function(init) {
  return function WeakMap2() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
};
var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
var WeakMapPrototype = $WeakMap.prototype;
var nativeSet = uncurryThis$1(WeakMapPrototype.set);
var hasMSEdgeFreezingBug = function() {
  return FREEZING && fails$1(function() {
    var frozenArray = freeze([]);
    nativeSet(new $WeakMap(), frozenArray, 1);
    return !isFrozen(frozenArray);
  });
};
if (NATIVE_WEAK_MAP) {
  if (IS_IE11) {
    InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
    InternalMetadataModule.enable();
    nativeDelete = uncurryThis$1(WeakMapPrototype["delete"]);
    nativeHas = uncurryThis$1(WeakMapPrototype.has);
    nativeGet = uncurryThis$1(WeakMapPrototype.get);
    defineBuiltIns(WeakMapPrototype, {
      "delete": function(key) {
        if (isObject(key) && !isExtensible2(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen)
            state.frozen = new InternalWeakMap();
          return nativeDelete(this, key) || state.frozen["delete"](key);
        }
        return nativeDelete(this, key);
      },
      has: function has2(key) {
        if (isObject(key) && !isExtensible2(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen)
            state.frozen = new InternalWeakMap();
          return nativeHas(this, key) || state.frozen.has(key);
        }
        return nativeHas(this, key);
      },
      get: function get2(key) {
        if (isObject(key) && !isExtensible2(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen)
            state.frozen = new InternalWeakMap();
          return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
        }
        return nativeGet(this, key);
      },
      set: function set2(key, value) {
        if (isObject(key) && !isExtensible2(key)) {
          var state = enforceInternalState(this);
          if (!state.frozen)
            state.frozen = new InternalWeakMap();
          nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
        } else
          nativeSet(this, key, value);
        return this;
      }
    });
  } else if (hasMSEdgeFreezingBug()) {
    defineBuiltIns(WeakMapPrototype, {
      set: function set2(key, value) {
        var arrayIntegrityLevel;
        if (isArray2(key)) {
          if (isFrozen(key))
            arrayIntegrityLevel = FROZEN;
          else if (isSealed(key))
            arrayIntegrityLevel = SEALED;
        }
        nativeSet(this, key, value);
        if (arrayIntegrityLevel === FROZEN)
          freeze(key);
        if (arrayIntegrityLevel === SEALED)
          seal(key);
        return this;
      }
    });
  }
}
var nativeDelete;
var nativeHas;
var nativeGet;
var path = path$t;
var weakMap$2 = path.WeakMap;
var parent$3 = weakMap$2;
var weakMap$1 = parent$3;
var weakMap = weakMap$1;
var _WeakMap = getDefaultExportFromCjs(weakMap);
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
var _SingleTypeSelectionAccumulator_previousSelection;
var _SingleTypeSelectionAccumulator_selection;
var _SelectionAccumulator_nodes;
var _SelectionAccumulator_edges;
var _SelectionAccumulator_commitHandler;
function diffSets(prev, next3) {
  const diff = new _Set();
  for (const item of next3) {
    if (!prev.has(item)) {
      diff.add(item);
    }
  }
  return diff;
}
var SingleTypeSelectionAccumulator = class {
  constructor() {
    _SingleTypeSelectionAccumulator_previousSelection.set(this, new _Set());
    _SingleTypeSelectionAccumulator_selection.set(this, new _Set());
  }
  get size() {
    return __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").size;
  }
  add() {
    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }
    for (const item of items) {
      __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").add(item);
    }
  }
  delete() {
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    for (const item of items) {
      __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").delete(item);
    }
  }
  clear() {
    __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").clear();
  }
  getSelection() {
    return [...__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f")];
  }
  getChanges() {
    return {
      added: [...diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"))],
      deleted: [...diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"))],
      previous: [...new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"))],
      current: [...new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"))]
    };
  }
  commit() {
    const changes = this.getChanges();
    __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_previousSelection, __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"), "f");
    __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_selection, new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f")), "f");
    for (const item of changes.added) {
      item.select();
    }
    for (const item of changes.deleted) {
      item.unselect();
    }
    return changes;
  }
};
_SingleTypeSelectionAccumulator_previousSelection = new _WeakMap(), _SingleTypeSelectionAccumulator_selection = new _WeakMap();
var SelectionAccumulator = class {
  constructor() {
    let commitHandler = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : () => {
    };
    _SelectionAccumulator_nodes.set(this, new SingleTypeSelectionAccumulator());
    _SelectionAccumulator_edges.set(this, new SingleTypeSelectionAccumulator());
    _SelectionAccumulator_commitHandler.set(this, void 0);
    __classPrivateFieldSet(this, _SelectionAccumulator_commitHandler, commitHandler, "f");
  }
  get sizeNodes() {
    return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").size;
  }
  get sizeEdges() {
    return __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").size;
  }
  getNodes() {
    return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").getSelection();
  }
  getEdges() {
    return __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").getSelection();
  }
  addNodes() {
    __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").add(...arguments);
  }
  addEdges() {
    __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").add(...arguments);
  }
  deleteNodes(node) {
    __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").delete(node);
  }
  deleteEdges(edge) {
    __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").delete(edge);
  }
  clear() {
    __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").clear();
    __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").clear();
  }
  commit() {
    const summary = {
      nodes: __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").commit(),
      edges: __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").commit()
    };
    for (var _len3 = arguments.length, rest = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      rest[_key3] = arguments[_key3];
    }
    __classPrivateFieldGet(this, _SelectionAccumulator_commitHandler, "f").call(this, summary, ...rest);
    return summary;
  }
};
_SelectionAccumulator_nodes = new _WeakMap(), _SelectionAccumulator_edges = new _WeakMap(), _SelectionAccumulator_commitHandler = new _WeakMap();
var SelectionHandler = class {
  /**
   * @param {object} body
   * @param {Canvas} canvas
   */
  constructor(body, canvas) {
    this.body = body;
    this.canvas = canvas;
    this._selectionAccumulator = new SelectionAccumulator();
    this.hoverObj = {
      nodes: {},
      edges: {}
    };
    this.options = {};
    this.defaultOptions = {
      multiselect: false,
      selectable: true,
      selectConnectedEdges: true,
      hoverConnectedEdges: true
    };
    _Object$assign(this.options, this.defaultOptions);
    this.body.emitter.on("_dataChanged", () => {
      this.updateSelection();
    });
  }
  /**
   *
   * @param {object} [options]
   */
  setOptions(options2) {
    if (options2 !== void 0) {
      const fields = ["multiselect", "hoverConnectedEdges", "selectable", "selectConnectedEdges"];
      selectiveDeepExtend(fields, this.options, options2);
    }
  }
  /**
   * handles the selection part of the tap;
   * @param {{x: number, y: number}} pointer
   * @returns {boolean}
   */
  selectOnPoint(pointer) {
    let selected = false;
    if (this.options.selectable === true) {
      const obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);
      this.unselectAll();
      if (obj !== void 0) {
        selected = this.selectObject(obj);
      }
      this.body.emitter.emit("_requestRedraw");
    }
    return selected;
  }
  /**
   *
   * @param {{x: number, y: number}} pointer
   * @returns {boolean}
   */
  selectAdditionalOnPoint(pointer) {
    let selectionChanged = false;
    if (this.options.selectable === true) {
      const obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);
      if (obj !== void 0) {
        selectionChanged = true;
        if (obj.isSelected() === true) {
          this.deselectObject(obj);
        } else {
          this.selectObject(obj);
        }
        this.body.emitter.emit("_requestRedraw");
      }
    }
    return selectionChanged;
  }
  /**
   * Create an object containing the standard fields for an event.
   * @param {Event} event
   * @param {{x: number, y: number}} pointer Object with the x and y screen coordinates of the mouse
   * @returns {{}}
   * @private
   */
  _initBaseEvent(event, pointer) {
    const properties = {};
    properties["pointer"] = {
      DOM: {
        x: pointer.x,
        y: pointer.y
      },
      canvas: this.canvas.DOMtoCanvas(pointer)
    };
    properties["event"] = event;
    return properties;
  }
  /**
   * Generate an event which the user can catch.
   *
   * This adds some extra data to the event with respect to cursor position and
   * selected nodes and edges.
   * @param {string} eventType                          Name of event to send
   * @param {Event}  event
   * @param {{x: number, y: number}} pointer            Object with the x and y screen coordinates of the mouse
   * @param {object | undefined} oldSelection             If present, selection state before event occured
   * @param {boolean|undefined} [emptySelection]  Indicate if selection data should be passed
   */
  generateClickEvent(eventType, event, pointer, oldSelection) {
    let emptySelection = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    const properties = this._initBaseEvent(event, pointer);
    if (emptySelection === true) {
      properties.nodes = [];
      properties.edges = [];
    } else {
      const tmp = this.getSelection();
      properties.nodes = tmp.nodes;
      properties.edges = tmp.edges;
    }
    if (oldSelection !== void 0) {
      properties["previousSelection"] = oldSelection;
    }
    if (eventType == "click") {
      properties.items = this.getClickedItems(pointer);
    }
    if (event.controlEdge !== void 0) {
      properties.controlEdge = event.controlEdge;
    }
    this.body.emitter.emit(eventType, properties);
  }
  /**
   *
   * @param {object} obj
   * @param {boolean} [highlightEdges]
   * @returns {boolean}
   */
  selectObject(obj) {
    let highlightEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.selectConnectedEdges;
    if (obj !== void 0) {
      if (obj instanceof Node) {
        if (highlightEdges === true) {
          this._selectionAccumulator.addEdges(...obj.edges);
        }
        this._selectionAccumulator.addNodes(obj);
      } else {
        this._selectionAccumulator.addEdges(obj);
      }
      return true;
    }
    return false;
  }
  /**
   *
   * @param {object} obj
   */
  deselectObject(obj) {
    if (obj.isSelected() === true) {
      obj.selected = false;
      this._removeFromSelection(obj);
    }
  }
  /**
   * retrieve all nodes overlapping with given object
   * @param {object} object  An object with parameters left, top, right, bottom
   * @returns {number[]}   An array with id's of the overlapping nodes
   * @private
   */
  _getAllNodesOverlappingWith(object2) {
    const overlappingNodes = [];
    const nodes = this.body.nodes;
    for (let i = 0; i < this.body.nodeIndices.length; i++) {
      const nodeId = this.body.nodeIndices[i];
      if (nodes[nodeId].isOverlappingWith(object2)) {
        overlappingNodes.push(nodeId);
      }
    }
    return overlappingNodes;
  }
  /**
   * Return a position object in canvasspace from a single point in screenspace
   * @param {{x: number, y: number}} pointer
   * @returns {{left: number, top: number, right: number, bottom: number}}
   * @private
   */
  _pointerToPositionObject(pointer) {
    const canvasPos = this.canvas.DOMtoCanvas(pointer);
    return {
      left: canvasPos.x - 1,
      top: canvasPos.y + 1,
      right: canvasPos.x + 1,
      bottom: canvasPos.y - 1
    };
  }
  /**
   * Get the top node at the passed point (like a click)
   * @param {{x: number, y: number}} pointer
   * @param {boolean} [returnNode]
   * @returns {Node | undefined} node
   */
  getNodeAt(pointer) {
    let returnNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const positionObject = this._pointerToPositionObject(pointer);
    const overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
    if (overlappingNodes.length > 0) {
      if (returnNode === true) {
        return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
      } else {
        return overlappingNodes[overlappingNodes.length - 1];
      }
    } else {
      return void 0;
    }
  }
  /**
   * retrieve all edges overlapping with given object, selector is around center
   * @param {object} object  An object with parameters left, top, right, bottom
   * @param {number[]} overlappingEdges An array with id's of the overlapping nodes
   * @private
   */
  _getEdgesOverlappingWith(object2, overlappingEdges) {
    const edges = this.body.edges;
    for (let i = 0; i < this.body.edgeIndices.length; i++) {
      const edgeId = this.body.edgeIndices[i];
      if (edges[edgeId].isOverlappingWith(object2)) {
        overlappingEdges.push(edgeId);
      }
    }
  }
  /**
   * retrieve all nodes overlapping with given object
   * @param {object} object  An object with parameters left, top, right, bottom
   * @returns {number[]}   An array with id's of the overlapping nodes
   * @private
   */
  _getAllEdgesOverlappingWith(object2) {
    const overlappingEdges = [];
    this._getEdgesOverlappingWith(object2, overlappingEdges);
    return overlappingEdges;
  }
  /**
   * Get the edges nearest to the passed point (like a click)
   * @param {{x: number, y: number}} pointer
   * @param {boolean} [returnEdge]
   * @returns {Edge | undefined} node
   */
  getEdgeAt(pointer) {
    let returnEdge = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const canvasPos = this.canvas.DOMtoCanvas(pointer);
    let mindist = 10;
    let overlappingEdge = null;
    const edges = this.body.edges;
    for (let i = 0; i < this.body.edgeIndices.length; i++) {
      const edgeId = this.body.edgeIndices[i];
      const edge = edges[edgeId];
      if (edge.connected) {
        const xFrom = edge.from.x;
        const yFrom = edge.from.y;
        const xTo = edge.to.x;
        const yTo = edge.to.y;
        const dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
        if (dist < mindist) {
          overlappingEdge = edgeId;
          mindist = dist;
        }
      }
    }
    if (overlappingEdge !== null) {
      if (returnEdge === true) {
        return this.body.edges[overlappingEdge];
      } else {
        return overlappingEdge;
      }
    } else {
      return void 0;
    }
  }
  /**
   * Add object to the selection array.
   * @param {object} obj
   * @private
   */
  _addToHover(obj) {
    if (obj instanceof Node) {
      this.hoverObj.nodes[obj.id] = obj;
    } else {
      this.hoverObj.edges[obj.id] = obj;
    }
  }
  /**
   * Remove a single option from selection.
   * @param {object} obj
   * @private
   */
  _removeFromSelection(obj) {
    if (obj instanceof Node) {
      this._selectionAccumulator.deleteNodes(obj);
      this._selectionAccumulator.deleteEdges(...obj.edges);
    } else {
      this._selectionAccumulator.deleteEdges(obj);
    }
  }
  /**
   * Unselect all nodes and edges.
   */
  unselectAll() {
    this._selectionAccumulator.clear();
  }
  /**
   * return the number of selected nodes
   * @returns {number}
   */
  getSelectedNodeCount() {
    return this._selectionAccumulator.sizeNodes;
  }
  /**
   * return the number of selected edges
   * @returns {number}
   */
  getSelectedEdgeCount() {
    return this._selectionAccumulator.sizeEdges;
  }
  /**
   * select the edges connected to the node that is being selected
   * @param {Node} node
   * @private
   */
  _hoverConnectedEdges(node) {
    for (let i = 0; i < node.edges.length; i++) {
      const edge = node.edges[i];
      edge.hover = true;
      this._addToHover(edge);
    }
  }
  /**
   * Remove the highlight from a node or edge, in response to mouse movement
   * @param {Event}  event
   * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
   * @param {Node|vis.Edge} object
   * @private
   */
  emitBlurEvent(event, pointer, object2) {
    const properties = this._initBaseEvent(event, pointer);
    if (object2.hover === true) {
      object2.hover = false;
      if (object2 instanceof Node) {
        properties.node = object2.id;
        this.body.emitter.emit("blurNode", properties);
      } else {
        properties.edge = object2.id;
        this.body.emitter.emit("blurEdge", properties);
      }
    }
  }
  /**
   * Create the highlight for a node or edge, in response to mouse movement
   * @param {Event}  event
   * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
   * @param {Node|vis.Edge} object
   * @returns {boolean} hoverChanged
   * @private
   */
  emitHoverEvent(event, pointer, object2) {
    const properties = this._initBaseEvent(event, pointer);
    let hoverChanged = false;
    if (object2.hover === false) {
      object2.hover = true;
      this._addToHover(object2);
      hoverChanged = true;
      if (object2 instanceof Node) {
        properties.node = object2.id;
        this.body.emitter.emit("hoverNode", properties);
      } else {
        properties.edge = object2.id;
        this.body.emitter.emit("hoverEdge", properties);
      }
    }
    return hoverChanged;
  }
  /**
   * Perform actions in response to a mouse movement.
   * @param {Event}  event
   * @param {{x: number, y: number}} pointer | object with the x and y screen coordinates of the mouse
   */
  hoverObject(event, pointer) {
    let object2 = this.getNodeAt(pointer);
    if (object2 === void 0) {
      object2 = this.getEdgeAt(pointer);
    }
    let hoverChanged = false;
    for (const nodeId in this.hoverObj.nodes) {
      if (Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, nodeId)) {
        if (object2 === void 0 || object2 instanceof Node && object2.id != nodeId || object2 instanceof Edge) {
          this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);
          delete this.hoverObj.nodes[nodeId];
          hoverChanged = true;
        }
      }
    }
    for (const edgeId in this.hoverObj.edges) {
      if (Object.prototype.hasOwnProperty.call(this.hoverObj.edges, edgeId)) {
        if (hoverChanged === true) {
          this.hoverObj.edges[edgeId].hover = false;
          delete this.hoverObj.edges[edgeId];
        } else if (object2 === void 0 || object2 instanceof Edge && object2.id != edgeId || object2 instanceof Node && !object2.hover) {
          this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);
          delete this.hoverObj.edges[edgeId];
          hoverChanged = true;
        }
      }
    }
    if (object2 !== void 0) {
      const hoveredEdgesCount = _Object$keys(this.hoverObj.edges).length;
      const hoveredNodesCount = _Object$keys(this.hoverObj.nodes).length;
      const newOnlyHoveredEdge = object2 instanceof Edge && hoveredEdgesCount === 0 && hoveredNodesCount === 0;
      const newOnlyHoveredNode = object2 instanceof Node && hoveredEdgesCount === 0 && hoveredNodesCount === 0;
      if (hoverChanged || newOnlyHoveredEdge || newOnlyHoveredNode) {
        hoverChanged = this.emitHoverEvent(event, pointer, object2);
      }
      if (object2 instanceof Node && this.options.hoverConnectedEdges === true) {
        this._hoverConnectedEdges(object2);
      }
    }
    if (hoverChanged === true) {
      this.body.emitter.emit("_requestRedraw");
    }
  }
  /**
   * Commit the selection changes but don't emit any events.
   */
  commitWithoutEmitting() {
    this._selectionAccumulator.commit();
  }
  /**
   * Select and deselect nodes depending current selection change.
   *
   * For changing nodes, select/deselect events are fired.
   *
   * NOTE: For a given edge, if one connecting node is deselected and with the
   * same click the other node is selected, no events for the edge will fire. It
   * was selected and it will remain selected.
   * @param {{x: number, y: number}} pointer - The x and y coordinates of the
   * click, tap, dragendâ¦ that triggered this.
   * @param {UIEvent} event - The event that triggered this.
   */
  commitAndEmit(pointer, event) {
    let selected = false;
    const selectionChanges = this._selectionAccumulator.commit();
    const previousSelection = {
      nodes: selectionChanges.nodes.previous,
      edges: selectionChanges.edges.previous
    };
    if (selectionChanges.edges.deleted.length > 0) {
      this.generateClickEvent("deselectEdge", event, pointer, previousSelection);
      selected = true;
    }
    if (selectionChanges.nodes.deleted.length > 0) {
      this.generateClickEvent("deselectNode", event, pointer, previousSelection);
      selected = true;
    }
    if (selectionChanges.nodes.added.length > 0) {
      this.generateClickEvent("selectNode", event, pointer);
      selected = true;
    }
    if (selectionChanges.edges.added.length > 0) {
      this.generateClickEvent("selectEdge", event, pointer);
      selected = true;
    }
    if (selected === true) {
      this.generateClickEvent("select", event, pointer);
    }
  }
  /**
   * Retrieve the currently selected node and edge ids.
   * @returns {{nodes: Array.<string>, edges: Array.<string>}} Arrays with the
   * ids of the selected nodes and edges.
   */
  getSelection() {
    return {
      nodes: this.getSelectedNodeIds(),
      edges: this.getSelectedEdgeIds()
    };
  }
  /**
   * Retrieve the currently selected nodes.
   * @returns {Array} An array with selected nodes.
   */
  getSelectedNodes() {
    return this._selectionAccumulator.getNodes();
  }
  /**
   * Retrieve the currently selected edges.
   * @returns {Array} An array with selected edges.
   */
  getSelectedEdges() {
    return this._selectionAccumulator.getEdges();
  }
  /**
   * Retrieve the currently selected node ids.
   * @returns {Array} An array with the ids of the selected nodes.
   */
  getSelectedNodeIds() {
    var _context;
    return _mapInstanceProperty(_context = this._selectionAccumulator.getNodes()).call(_context, (node) => node.id);
  }
  /**
   * Retrieve the currently selected edge ids.
   * @returns {Array} An array with the ids of the selected edges.
   */
  getSelectedEdgeIds() {
    var _context2;
    return _mapInstanceProperty(_context2 = this._selectionAccumulator.getEdges()).call(_context2, (edge) => edge.id);
  }
  /**
   * Updates the current selection
   * @param {{nodes: Array.<string>, edges: Array.<string>}} selection
   * @param {object} options                                 Options
   */
  setSelection(selection) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!selection || !selection.nodes && !selection.edges) {
      throw new TypeError("Selection must be an object with nodes and/or edges properties");
    }
    if (options2.unselectAll || options2.unselectAll === void 0) {
      this.unselectAll();
    }
    if (selection.nodes) {
      for (const id2 of selection.nodes) {
        const node = this.body.nodes[id2];
        if (!node) {
          throw new RangeError('Node with id "' + id2 + '" not found');
        }
        this.selectObject(node, options2.highlightEdges);
      }
    }
    if (selection.edges) {
      for (const id2 of selection.edges) {
        const edge = this.body.edges[id2];
        if (!edge) {
          throw new RangeError('Edge with id "' + id2 + '" not found');
        }
        this.selectObject(edge);
      }
    }
    this.body.emitter.emit("_requestRedraw");
    this._selectionAccumulator.commit();
  }
  /**
   * select zero or more nodes with the option to highlight edges
   * @param {number[] | string[]} selection     An array with the ids of the
   *                                            selected nodes.
   * @param {boolean} [highlightEdges]
   */
  selectNodes(selection) {
    let highlightEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (!selection || selection.length === void 0)
      throw "Selection must be an array with ids";
    this.setSelection({
      nodes: selection
    }, {
      highlightEdges
    });
  }
  /**
   * select zero or more edges
   * @param {number[] | string[]} selection     An array with the ids of the
   *                                            selected nodes.
   */
  selectEdges(selection) {
    if (!selection || selection.length === void 0)
      throw "Selection must be an array with ids";
    this.setSelection({
      edges: selection
    });
  }
  /**
   * Validate the selection: remove ids of nodes which no longer exist
   * @private
   */
  updateSelection() {
    for (const node in this._selectionAccumulator.getNodes()) {
      if (!Object.prototype.hasOwnProperty.call(this.body.nodes, node.id)) {
        this._selectionAccumulator.deleteNodes(node);
      }
    }
    for (const edge in this._selectionAccumulator.getEdges()) {
      if (!Object.prototype.hasOwnProperty.call(this.body.edges, edge.id)) {
        this._selectionAccumulator.deleteEdges(edge);
      }
    }
  }
  /**
   * Determine all the visual elements clicked which are on the given point.
   *
   * All elements are returned; this includes nodes, edges and their labels.
   * The order returned is from highest to lowest, i.e. element 0 of the return
   * value is the topmost item clicked on.
   *
   * The return value consists of an array of the following possible elements:
   *
   * - `{nodeId:number}`             - node with given id clicked on
   * - `{nodeId:number, labelId:0}`  - label of node with given id clicked on
   * - `{edgeId:number}`             - edge with given id clicked on
   * - `{edge:number, labelId:0}`    - label of edge with given id clicked on
   *
   * ## NOTES
   *
   * - Currently, there is only one label associated with a node or an edge,
   * but this is expected to change somewhere in the future.
   * - Since there is no z-indexing yet, it is not really possible to set the nodes and
   * edges in the correct order. For the time being, nodes come first.
   * @param {point} pointer  mouse position in screen coordinates
   * @returns {Array.<nodeClickItem|nodeLabelClickItem|edgeClickItem|edgeLabelClickItem>}
   * @private
   */
  getClickedItems(pointer) {
    const point = this.canvas.DOMtoCanvas(pointer);
    const items = [];
    const nodeIndices = this.body.nodeIndices;
    const nodes = this.body.nodes;
    for (let i = nodeIndices.length - 1; i >= 0; i--) {
      const node = nodes[nodeIndices[i]];
      const ret = node.getItemsOnPoint(point);
      items.push.apply(items, ret);
    }
    const edgeIndices = this.body.edgeIndices;
    const edges = this.body.edges;
    for (let i = edgeIndices.length - 1; i >= 0; i--) {
      const edge = edges[edgeIndices[i]];
      const ret = edge.getItemsOnPoint(point);
      items.push.apply(items, ret);
    }
    return items;
  }
};
var arraySlice = arraySliceSimple;
var floor = Math.floor;
var mergeSort = function(array2, comparefn) {
  var length2 = array2.length;
  var middle = floor(length2 / 2);
  return length2 < 8 ? insertionSort(array2, comparefn) : merge(
    array2,
    mergeSort(arraySlice(array2, 0, middle), comparefn),
    mergeSort(arraySlice(array2, middle), comparefn),
    comparefn
  );
};
var insertionSort = function(array2, comparefn) {
  var length2 = array2.length;
  var i = 1;
  var element, j;
  while (i < length2) {
    j = i;
    element = array2[i];
    while (j && comparefn(array2[j - 1], element) > 0) {
      array2[j] = array2[--j];
    }
    if (j !== i++)
      array2[j] = element;
  }
  return array2;
};
var merge = function(array2, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array2[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
  }
  return array2;
};
var arraySort = mergeSort;
var userAgent$1 = engineUserAgent;
var firefox = userAgent$1.match(/firefox\/(\d+)/i);
var engineFfVersion = !!firefox && +firefox[1];
var UA = engineUserAgent;
var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
var userAgent = engineUserAgent;
var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion = !!webkit && +webkit[1];
var $$2 = _export;
var uncurryThis = functionUncurryThis;
var aCallable$1 = aCallable$6;
var toObject$1 = toObject$c;
var lengthOfArrayLike$1 = lengthOfArrayLike$a;
var deletePropertyOrThrow = deletePropertyOrThrow$2;
var toString2 = toString$a;
var fails = fails$v;
var internalSort = arraySort;
var arrayMethodIsStrict$2 = arrayMethodIsStrict$6;
var FF = engineFfVersion;
var IE_OR_EDGE = engineIsIeOrEdge;
var V8 = engineV8Version;
var WEBKIT = engineWebkitVersion;
var test = [];
var nativeSort = uncurryThis(test.sort);
var push = uncurryThis(test.push);
var FAILS_ON_UNDEFINED = fails(function() {
  test.sort(void 0);
});
var FAILS_ON_NULL = fails(function() {
  test.sort(null);
});
var STRICT_METHOD$1 = arrayMethodIsStrict$2("sort");
var STABLE_SORT = !fails(function() {
  if (V8)
    return V8 < 70;
  if (FF && FF > 3)
    return;
  if (IE_OR_EDGE)
    return true;
  if (WEBKIT)
    return WEBKIT < 603;
  var result = "";
  var code, chr, value, index2;
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);
    switch (code) {
      case 66:
      case 69:
      case 70:
      case 72:
        value = 3;
        break;
      case 68:
      case 71:
        value = 4;
        break;
      default:
        value = 2;
    }
    for (index2 = 0; index2 < 47; index2++) {
      test.push({ k: chr + index2, v: value });
    }
  }
  test.sort(function(a, b) {
    return b.v - a.v;
  });
  for (index2 = 0; index2 < test.length; index2++) {
    chr = test[index2].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr)
      result += chr;
  }
  return result !== "DGBEFHACIJK";
});
var FORCED$1 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$1 || !STABLE_SORT;
var getSortCompare = function(comparefn) {
  return function(x, y) {
    if (y === void 0)
      return -1;
    if (x === void 0)
      return 1;
    if (comparefn !== void 0)
      return +comparefn(x, y) || 0;
    return toString2(x) > toString2(y) ? 1 : -1;
  };
};
$$2({ target: "Array", proto: true, forced: FORCED$1 }, {
  sort: function sort(comparefn) {
    if (comparefn !== void 0)
      aCallable$1(comparefn);
    var array2 = toObject$1(this);
    if (STABLE_SORT)
      return comparefn === void 0 ? nativeSort(array2) : nativeSort(array2, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike$1(array2);
    var itemsLength, index2;
    for (index2 = 0; index2 < arrayLength; index2++) {
      if (index2 in array2)
        push(items, array2[index2]);
    }
    internalSort(items, getSortCompare(comparefn));
    itemsLength = lengthOfArrayLike$1(items);
    index2 = 0;
    while (index2 < itemsLength)
      array2[index2] = items[index2++];
    while (index2 < arrayLength)
      deletePropertyOrThrow(array2, index2++);
    return array2;
  }
});
var entryVirtual$2 = entryVirtual$h;
var sort$3 = entryVirtual$2("Array").sort;
var isPrototypeOf$2 = objectIsPrototypeOf;
var method$2 = sort$3;
var ArrayPrototype$2 = Array.prototype;
var sort$2 = function(it2) {
  var own = it2.sort;
  return it2 === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it2) && own === ArrayPrototype$2.sort ? method$2 : own;
};
var parent$2 = sort$2;
var sort$1 = parent$2;
var sort2 = sort$1;
var _sortInstanceProperty = getDefaultExportFromCjs(sort2);
var aCallable = aCallable$6;
var toObject = toObject$c;
var IndexedObject = indexedObject;
var lengthOfArrayLike = lengthOfArrayLike$a;
var $TypeError = TypeError;
var createMethod = function(IS_RIGHT) {
  return function(that, callbackfn, argumentsLength, memo) {
    aCallable(callbackfn);
    var O = toObject(that);
    var self2 = IndexedObject(O);
    var length2 = lengthOfArrayLike(O);
    var index2 = IS_RIGHT ? length2 - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2)
      while (true) {
        if (index2 in self2) {
          memo = self2[index2];
          index2 += i;
          break;
        }
        index2 += i;
        if (IS_RIGHT ? index2 < 0 : length2 <= index2) {
          throw new $TypeError("Reduce of empty array with no initial value");
        }
      }
    for (; IS_RIGHT ? index2 >= 0 : length2 > index2; index2 += i)
      if (index2 in self2) {
        memo = callbackfn(memo, self2[index2], index2, O);
      }
    return memo;
  };
};
var arrayReduce = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};
var global$1 = global$n;
var classof = classofRaw$2;
var engineIsNode = classof(global$1.process) === "process";
var $$1 = _export;
var $reduce = arrayReduce.left;
var arrayMethodIsStrict$1 = arrayMethodIsStrict$6;
var CHROME_VERSION = engineV8Version;
var IS_NODE = engineIsNode;
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
var FORCED = CHROME_BUG || !arrayMethodIsStrict$1("reduce");
$$1({ target: "Array", proto: true, forced: FORCED }, {
  reduce: function reduce(callbackfn) {
    var length2 = arguments.length;
    return $reduce(this, callbackfn, length2, length2 > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$1 = entryVirtual$h;
var reduce$3 = entryVirtual$1("Array").reduce;
var isPrototypeOf$1 = objectIsPrototypeOf;
var method$1 = reduce$3;
var ArrayPrototype$1 = Array.prototype;
var reduce$2 = function(it2) {
  var own = it2.reduce;
  return it2 === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it2) && own === ArrayPrototype$1.reduce ? method$1 : own;
};
var parent$1 = reduce$2;
var reduce$1 = parent$1;
var reduce2 = reduce$1;
var _reduceInstanceProperty = getDefaultExportFromCjs(reduce2);
var DirectionInterface = class {
  /**
   * @ignore
   */
  abstract() {
    throw new Error("Can't instantiate abstract class!");
  }
  /**
   * This is a dummy call which is used to suppress the jsdoc errors of type:
   *
   * "'param' is assigned a value but never used"
   * @ignore
   */
  fake_use() {
  }
  /**
   * Type to use to translate dynamic curves to, in the case of hierarchical layout.
   * Dynamic curves do not work for these.
   *
   * The value should be perpendicular to the actual direction of the layout.
   * @returns {string} Direction, either 'vertical' or 'horizontal'
   */
  curveType() {
    return this.abstract();
  }
  /**
   * Return the value of the coordinate that is not fixed for this direction.
   * @param {Node} node The node to read
   * @returns {number} Value of the unfixed coordinate
   */
  getPosition(node) {
    this.fake_use(node);
    return this.abstract();
  }
  /**
   * Set the value of the coordinate that is not fixed for this direction.
   * @param {Node} node The node to adjust
   * @param {number} position
   * @param {number} [level] if specified, the hierarchy level that this node should be fixed to
   */
  setPosition(node, position) {
    let level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
    this.fake_use(node, position, level);
    this.abstract();
  }
  /**
   * Get the width of a tree.
   *
   * A `tree` here is a subset of nodes within the network which are not connected to other nodes,
   * only among themselves. In essence, it is a sub-network.
   * @param {number} index The index number of a tree
   * @returns {number} the width of a tree in the view coordinates
   */
  getTreeSize(index2) {
    this.fake_use(index2);
    return this.abstract();
  }
  /**
   * Sort array of nodes on the unfixed coordinates.
   *
   * Note:** chrome has non-stable sorting implementation, which
   * has a tendency to change the order of the array items,
   * even if the custom sort function returns 0.
   *
   * For this reason, an external sort implementation is used,
   * which has the added benefit of being faster than the standard
   * platforms implementation. This has been verified on `node.js`,
   * `firefox` and `chrome` (all linux).
   * @param {Array.<Node>} nodeArray array of nodes to sort
   */
  sort(nodeArray) {
    this.fake_use(nodeArray);
    this.abstract();
  }
  /**
   * Assign the fixed coordinate of the node to the given level
   * @param {Node} node The node to adjust
   * @param {number} level The level to fix to
   */
  fix(node, level) {
    this.fake_use(node, level);
    this.abstract();
  }
  /**
   * Add an offset to the unfixed coordinate of the given node.
   * @param {NodeId} nodeId Id of the node to adjust
   * @param {number} diff Offset to add to the unfixed coordinate
   */
  shift(nodeId, diff) {
    this.fake_use(nodeId, diff);
    this.abstract();
  }
};
var VerticalStrategy = class extends DirectionInterface {
  /**
   * Constructor
   * @param {object} layout reference to the parent LayoutEngine instance.
   */
  constructor(layout) {
    super();
    this.layout = layout;
  }
  /** @inheritDoc */
  curveType() {
    return "horizontal";
  }
  /** @inheritDoc */
  getPosition(node) {
    return node.x;
  }
  /** @inheritDoc */
  setPosition(node, position) {
    let level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
    if (level !== void 0) {
      this.layout.hierarchical.addToOrdering(node, level);
    }
    node.x = position;
  }
  /** @inheritDoc */
  getTreeSize(index2) {
    const res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index2);
    return {
      min: res.min_x,
      max: res.max_x
    };
  }
  /** @inheritDoc */
  sort(nodeArray) {
    _sortInstanceProperty(nodeArray).call(nodeArray, function(a, b) {
      return a.x - b.x;
    });
  }
  /** @inheritDoc */
  fix(node, level) {
    node.y = this.layout.options.hierarchical.levelSeparation * level;
    node.options.fixed.y = true;
  }
  /** @inheritDoc */
  shift(nodeId, diff) {
    this.layout.body.nodes[nodeId].x += diff;
  }
};
var HorizontalStrategy = class extends DirectionInterface {
  /**
   * Constructor
   * @param {object} layout reference to the parent LayoutEngine instance.
   */
  constructor(layout) {
    super();
    this.layout = layout;
  }
  /** @inheritDoc */
  curveType() {
    return "vertical";
  }
  /** @inheritDoc */
  getPosition(node) {
    return node.y;
  }
  /** @inheritDoc */
  setPosition(node, position) {
    let level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
    if (level !== void 0) {
      this.layout.hierarchical.addToOrdering(node, level);
    }
    node.y = position;
  }
  /** @inheritDoc */
  getTreeSize(index2) {
    const res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index2);
    return {
      min: res.min_y,
      max: res.max_y
    };
  }
  /** @inheritDoc */
  sort(nodeArray) {
    _sortInstanceProperty(nodeArray).call(nodeArray, function(a, b) {
      return a.y - b.y;
    });
  }
  /** @inheritDoc */
  fix(node, level) {
    node.x = this.layout.options.hierarchical.levelSeparation * level;
    node.options.fixed.x = true;
  }
  /** @inheritDoc */
  shift(nodeId, diff) {
    this.layout.body.nodes[nodeId].y += diff;
  }
};
var $ = _export;
var $every = arrayIteration.every;
var arrayMethodIsStrict = arrayMethodIsStrict$6;
var STRICT_METHOD = arrayMethodIsStrict("every");
$({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
  every: function every(callbackfn) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual = entryVirtual$h;
var every$3 = entryVirtual("Array").every;
var isPrototypeOf = objectIsPrototypeOf;
var method = every$3;
var ArrayPrototype = Array.prototype;
var every$2 = function(it2) {
  var own = it2.every;
  return it2 === ArrayPrototype || isPrototypeOf(ArrayPrototype, it2) && own === ArrayPrototype.every ? method : own;
};
var parent = every$2;
var every$1 = parent;
var every2 = every$1;
var _everyInstanceProperty = getDefaultExportFromCjs(every2);
function fillLevelsByDirectionCyclic(nodes, levels) {
  const edges = new _Set();
  _forEachInstanceProperty(nodes).call(nodes, (node) => {
    var _context;
    _forEachInstanceProperty(_context = node.edges).call(_context, (edge) => {
      if (edge.connected) {
        edges.add(edge);
      }
    });
  });
  _forEachInstanceProperty(edges).call(edges, (edge) => {
    const fromId = edge.from.id;
    const toId = edge.to.id;
    if (levels[fromId] == null) {
      levels[fromId] = 0;
    }
    if (levels[toId] == null || levels[fromId] >= levels[toId]) {
      levels[toId] = levels[fromId] + 1;
    }
  });
  return levels;
}
function fillLevelsByDirectionLeaves(nodes) {
  return fillLevelsByDirection(
    // Pick only leaves (nodes without children).
    (node) => {
      var _context2, _context3;
      return _everyInstanceProperty(
        _context2 = _filterInstanceProperty(
          _context3 = node.edges
          // Take only visible nodes into account.
        ).call(_context3, (edge) => nodes.has(edge.toId))
        // Check that all edges lead to this node (leaf).
      ).call(_context2, (edge) => edge.to === node);
    },
    // Use the lowest level.
    (newLevel, oldLevel) => oldLevel > newLevel,
    // Go against the direction of the edges.
    "from",
    nodes
  );
}
function fillLevelsByDirectionRoots(nodes) {
  return fillLevelsByDirection(
    // Pick only roots (nodes without parents).
    (node) => {
      var _context4, _context5;
      return _everyInstanceProperty(
        _context4 = _filterInstanceProperty(
          _context5 = node.edges
          // Take only visible nodes into account.
        ).call(_context5, (edge) => nodes.has(edge.toId))
        // Check that all edges lead from this node (root).
      ).call(_context4, (edge) => edge.from === node);
    },
    // Use the highest level.
    (newLevel, oldLevel) => oldLevel < newLevel,
    // Go in the direction of the edges.
    "to",
    nodes
  );
}
function fillLevelsByDirection(isEntryNode, shouldLevelBeReplaced, direction, nodes) {
  var _context6;
  const levels = _Object$create(null);
  const limit = _reduceInstanceProperty(_context6 = [..._valuesInstanceProperty(nodes).call(nodes)]).call(_context6, (acc, node) => acc + 1 + node.edges.length, 0);
  const edgeIdProp = direction + "Id";
  const newLevelDiff = direction === "to" ? 1 : -1;
  for (const [entryNodeId, entryNode] of nodes) {
    if (
      // Skip if the node is not visible.
      !nodes.has(entryNodeId) || // Skip if the node is not an entry node.
      !isEntryNode(entryNode)
    ) {
      continue;
    }
    levels[entryNodeId] = 0;
    const stack = [entryNode];
    let done = 0;
    let node;
    while (node = stack.pop()) {
      var _context7, _context8;
      if (!nodes.has(entryNodeId)) {
        continue;
      }
      const newLevel = levels[node.id] + newLevelDiff;
      _forEachInstanceProperty(_context7 = _filterInstanceProperty(_context8 = node.edges).call(_context8, (edge) => (
        // Ignore disconnected edges.
        edge.connected && // Ignore circular edges.
        edge.to !== edge.from && // Ignore edges leading to the node that's currently being processed.
        edge[direction] !== node && // Ignore edges connecting to an invisible node.
        nodes.has(edge.toId) && // Ignore edges connecting from an invisible node.
        nodes.has(edge.fromId)
      ))).call(_context7, (edge) => {
        const targetNodeId = edge[edgeIdProp];
        const oldLevel = levels[targetNodeId];
        if (oldLevel == null || shouldLevelBeReplaced(newLevel, oldLevel)) {
          levels[targetNodeId] = newLevel;
          stack.push(edge[direction]);
        }
      });
      if (done > limit) {
        return fillLevelsByDirectionCyclic(nodes, levels);
      } else {
        ++done;
      }
    }
  }
  return levels;
}
var HierarchicalStatus = class {
  /**
   * @ignore
   */
  constructor() {
    this.childrenReference = {};
    this.parentReference = {};
    this.trees = {};
    this.distributionOrdering = {};
    this.levels = {};
    this.distributionIndex = {};
    this.isTree = false;
    this.treeIndex = -1;
  }
  /**
   * Add the relation between given nodes to the current state.
   * @param {Node.id} parentNodeId
   * @param {Node.id} childNodeId
   */
  addRelation(parentNodeId, childNodeId) {
    if (this.childrenReference[parentNodeId] === void 0) {
      this.childrenReference[parentNodeId] = [];
    }
    this.childrenReference[parentNodeId].push(childNodeId);
    if (this.parentReference[childNodeId] === void 0) {
      this.parentReference[childNodeId] = [];
    }
    this.parentReference[childNodeId].push(parentNodeId);
  }
  /**
   * Check if the current state is for a formal tree or formal forest.
   *
   * This is the case if every node has at most one parent.
   *
   * Pre: parentReference init'ed properly for current network
   */
  checkIfTree() {
    for (const i in this.parentReference) {
      if (this.parentReference[i].length > 1) {
        this.isTree = false;
        return;
      }
    }
    this.isTree = true;
  }
  /**
   * Return the number of separate trees in the current network.
   * @returns {number}
   */
  numTrees() {
    return this.treeIndex + 1;
  }
  /**
   * Assign a tree id to a node
   * @param {Node} node
   * @param {string|number} treeId
   */
  setTreeIndex(node, treeId) {
    if (treeId === void 0)
      return;
    if (this.trees[node.id] === void 0) {
      this.trees[node.id] = treeId;
      this.treeIndex = Math.max(treeId, this.treeIndex);
    }
  }
  /**
   * Ensure level for given id is defined.
   *
   * Sets level to zero for given node id if not already present
   * @param {Node.id} nodeId
   */
  ensureLevel(nodeId) {
    if (this.levels[nodeId] === void 0) {
      this.levels[nodeId] = 0;
    }
  }
  /**
   * get the maximum level of a branch.
   *
   * TODO: Never entered; find a test case to test this!
   * @param {Node.id} nodeId
   * @returns {number}
   */
  getMaxLevel(nodeId) {
    const accumulator = {};
    const _getMaxLevel = (nodeId2) => {
      if (accumulator[nodeId2] !== void 0) {
        return accumulator[nodeId2];
      }
      let level = this.levels[nodeId2];
      if (this.childrenReference[nodeId2]) {
        const children = this.childrenReference[nodeId2];
        if (children.length > 0) {
          for (let i = 0; i < children.length; i++) {
            level = Math.max(level, _getMaxLevel(children[i]));
          }
        }
      }
      accumulator[nodeId2] = level;
      return level;
    };
    return _getMaxLevel(nodeId);
  }
  /**
   *
   * @param {Node} nodeA
   * @param {Node} nodeB
   */
  levelDownstream(nodeA, nodeB) {
    if (this.levels[nodeB.id] === void 0) {
      if (this.levels[nodeA.id] === void 0) {
        this.levels[nodeA.id] = 0;
      }
      this.levels[nodeB.id] = this.levels[nodeA.id] + 1;
    }
  }
  /**
   * Small util method to set the minimum levels of the nodes to zero and
   * eliminate gaps (for cyclic).
   */
  setMinLevelToZero() {
    var _context;
    const remap = new _Map();
    let newLevel = 0;
    const uniqueSortedLevels = _sortInstanceProperty(_context = [...new _Set(_Object$values(this.levels))]).call(_context, (a, b) => a - b);
    for (const level of uniqueSortedLevels) {
      remap.set(level, newLevel++);
    }
    for (const nodeId in this.levels) {
      if (Object.prototype.hasOwnProperty.call(this.levels, nodeId)) {
        this.levels[nodeId] = remap.get(this.levels[nodeId]);
      }
    }
  }
  /**
   * Get the min and max xy-coordinates of a given tree
   * @param {Array.<Node>} nodes
   * @param {number} index
   * @returns {{min_x: number, max_x: number, min_y: number, max_y: number}}
   */
  getTreeSize(nodes, index2) {
    let min_x = 1e9;
    let max_x = -1e9;
    let min_y = 1e9;
    let max_y = -1e9;
    for (const nodeId in this.trees) {
      if (Object.prototype.hasOwnProperty.call(this.trees, nodeId)) {
        if (this.trees[nodeId] === index2) {
          const node = nodes[nodeId];
          min_x = Math.min(node.x, min_x);
          max_x = Math.max(node.x, max_x);
          min_y = Math.min(node.y, min_y);
          max_y = Math.max(node.y, max_y);
        }
      }
    }
    return {
      min_x,
      max_x,
      min_y,
      max_y
    };
  }
  /**
   * Check if two nodes have the same parent(s)
   * @param {Node} node1
   * @param {Node} node2
   * @returns {boolean} true if the two nodes have a same ancestor node, false otherwise
   */
  hasSameParent(node1, node2) {
    const parents1 = this.parentReference[node1.id];
    const parents2 = this.parentReference[node2.id];
    if (parents1 === void 0 || parents2 === void 0) {
      return false;
    }
    for (let i = 0; i < parents1.length; i++) {
      for (let j = 0; j < parents2.length; j++) {
        if (parents1[i] == parents2[j]) {
          return true;
        }
      }
    }
    return false;
  }
  /**
   * Check if two nodes are in the same tree.
   * @param {Node} node1
   * @param {Node} node2
   * @returns {boolean} true if this is so, false otherwise
   */
  inSameSubNetwork(node1, node2) {
    return this.trees[node1.id] === this.trees[node2.id];
  }
  /**
   * Get a list of the distinct levels in the current network
   * @returns {Array}
   */
  getLevels() {
    return _Object$keys(this.distributionOrdering);
  }
  /**
   * Add a node to the ordering per level
   * @param {Node} node
   * @param {number} level
   */
  addToOrdering(node, level) {
    if (this.distributionOrdering[level] === void 0) {
      this.distributionOrdering[level] = [];
    }
    let isPresent = false;
    const curLevel = this.distributionOrdering[level];
    for (const n in curLevel) {
      if (curLevel[n] === node) {
        isPresent = true;
        break;
      }
    }
    if (!isPresent) {
      this.distributionOrdering[level].push(node);
      this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;
    }
  }
};
var LayoutEngine = class {
  /**
   * @param {object} body
   */
  constructor(body) {
    this.body = body;
    this._resetRNG(Math.random() + ":" + _Date$now());
    this.setPhysics = false;
    this.options = {};
    this.optionsBackup = {
      physics: {}
    };
    this.defaultOptions = {
      randomSeed: void 0,
      improvedLayout: true,
      clusterThreshold: 150,
      hierarchical: {
        enabled: false,
        levelSeparation: 150,
        nodeSpacing: 100,
        treeSpacing: 200,
        blockShifting: true,
        edgeMinimization: true,
        parentCentralization: true,
        direction: "UD",
        // UD, DU, LR, RL
        sortMethod: "hubsize"
        // hubsize, directed
      }
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  /**
   * Binds event listeners
   */
  bindEventListeners() {
    this.body.emitter.on("_dataChanged", () => {
      this.setupHierarchicalLayout();
    });
    this.body.emitter.on("_dataLoaded", () => {
      this.layoutNetwork();
    });
    this.body.emitter.on("_resetHierarchicalLayout", () => {
      this.setupHierarchicalLayout();
    });
    this.body.emitter.on("_adjustEdgesForHierarchicalLayout", () => {
      if (this.options.hierarchical.enabled !== true) {
        return;
      }
      const type = this.direction.curveType();
      this.body.emitter.emit("_forceDisableDynamicCurves", type, false);
    });
  }
  /**
   *
   * @param {object} options
   * @param {object} allOptions
   * @returns {object}
   */
  setOptions(options2, allOptions2) {
    if (options2 !== void 0) {
      const hierarchical = this.options.hierarchical;
      const prevHierarchicalState = hierarchical.enabled;
      selectiveDeepExtend(["randomSeed", "improvedLayout", "clusterThreshold"], this.options, options2);
      mergeOptions(this.options, options2, "hierarchical");
      if (options2.randomSeed !== void 0) {
        this._resetRNG(options2.randomSeed);
      }
      if (hierarchical.enabled === true) {
        if (prevHierarchicalState === true) {
          this.body.emitter.emit("refresh", true);
        }
        if (hierarchical.direction === "RL" || hierarchical.direction === "DU") {
          if (hierarchical.levelSeparation > 0) {
            hierarchical.levelSeparation *= -1;
          }
        } else {
          if (hierarchical.levelSeparation < 0) {
            hierarchical.levelSeparation *= -1;
          }
        }
        this.setDirectionStrategy();
        this.body.emitter.emit("_resetHierarchicalLayout");
        return this.adaptAllOptionsForHierarchicalLayout(allOptions2);
      } else {
        if (prevHierarchicalState === true) {
          this.body.emitter.emit("refresh");
          return deepExtend(allOptions2, this.optionsBackup);
        }
      }
    }
    return allOptions2;
  }
  /**
   * Reset the random number generator with given seed.
   * @param {any} seed - The seed that will be forwarded the the RNG.
   */
  _resetRNG(seed) {
    this.initialRandomSeed = seed;
    this._rng = Alea(this.initialRandomSeed);
  }
  /**
   *
   * @param {object} allOptions
   * @returns {object}
   */
  adaptAllOptionsForHierarchicalLayout(allOptions2) {
    if (this.options.hierarchical.enabled === true) {
      const backupPhysics = this.optionsBackup.physics;
      if (allOptions2.physics === void 0 || allOptions2.physics === true) {
        allOptions2.physics = {
          enabled: backupPhysics.enabled === void 0 ? true : backupPhysics.enabled,
          solver: "hierarchicalRepulsion"
        };
        backupPhysics.enabled = backupPhysics.enabled === void 0 ? true : backupPhysics.enabled;
        backupPhysics.solver = backupPhysics.solver || "barnesHut";
      } else if (typeof allOptions2.physics === "object") {
        backupPhysics.enabled = allOptions2.physics.enabled === void 0 ? true : allOptions2.physics.enabled;
        backupPhysics.solver = allOptions2.physics.solver || "barnesHut";
        allOptions2.physics.solver = "hierarchicalRepulsion";
      } else if (allOptions2.physics !== false) {
        backupPhysics.solver = "barnesHut";
        allOptions2.physics = {
          solver: "hierarchicalRepulsion"
        };
      }
      let type = this.direction.curveType();
      if (allOptions2.edges === void 0) {
        this.optionsBackup.edges = {
          smooth: {
            enabled: true,
            type: "dynamic"
          }
        };
        allOptions2.edges = {
          smooth: false
        };
      } else if (allOptions2.edges.smooth === void 0) {
        this.optionsBackup.edges = {
          smooth: {
            enabled: true,
            type: "dynamic"
          }
        };
        allOptions2.edges.smooth = false;
      } else {
        if (typeof allOptions2.edges.smooth === "boolean") {
          this.optionsBackup.edges = {
            smooth: allOptions2.edges.smooth
          };
          allOptions2.edges.smooth = {
            enabled: allOptions2.edges.smooth,
            type
          };
        } else {
          const smooth = allOptions2.edges.smooth;
          if (smooth.type !== void 0 && smooth.type !== "dynamic") {
            type = smooth.type;
          }
          this.optionsBackup.edges = {
            smooth: {
              enabled: smooth.enabled === void 0 ? true : smooth.enabled,
              type: smooth.type === void 0 ? "dynamic" : smooth.type,
              roundness: smooth.roundness === void 0 ? 0.5 : smooth.roundness,
              forceDirection: smooth.forceDirection === void 0 ? false : smooth.forceDirection
            }
          };
          allOptions2.edges.smooth = {
            enabled: smooth.enabled === void 0 ? true : smooth.enabled,
            type,
            roundness: smooth.roundness === void 0 ? 0.5 : smooth.roundness,
            forceDirection: smooth.forceDirection === void 0 ? false : smooth.forceDirection
          };
        }
      }
      this.body.emitter.emit("_forceDisableDynamicCurves", type);
    }
    return allOptions2;
  }
  /**
   *
   * @param {Array.<Node>} nodesArray
   */
  positionInitially(nodesArray) {
    if (this.options.hierarchical.enabled !== true) {
      this._resetRNG(this.initialRandomSeed);
      const radius = nodesArray.length + 50;
      for (let i = 0; i < nodesArray.length; i++) {
        const node = nodesArray[i];
        const angle = 2 * Math.PI * this._rng();
        if (node.x === void 0) {
          node.x = radius * Math.cos(angle);
        }
        if (node.y === void 0) {
          node.y = radius * Math.sin(angle);
        }
      }
    }
  }
  /**
   * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
   * cluster them first to reduce the amount.
   */
  layoutNetwork() {
    if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
      const indices = this.body.nodeIndices;
      let positionDefined = 0;
      for (let i = 0; i < indices.length; i++) {
        const node = this.body.nodes[indices[i]];
        if (node.predefinedPosition === true) {
          positionDefined += 1;
        }
      }
      if (positionDefined < 0.5 * indices.length) {
        const MAX_LEVELS = 10;
        let level = 0;
        const clusterThreshold = this.options.clusterThreshold;
        const clusterOptions = {
          clusterNodeProperties: {
            shape: "ellipse",
            // Bugfix: avoid type 'image', no images supplied
            label: "",
            // avoid label handling
            group: "",
            // avoid group handling
            font: {
              multi: false
            }
            // avoid font propagation
          },
          clusterEdgeProperties: {
            label: "",
            // avoid label handling
            font: {
              multi: false
            },
            // avoid font propagation
            smooth: {
              enabled: false
              // avoid drawing penalty for complex edges
            }
          }
        };
        if (indices.length > clusterThreshold) {
          const startLength = indices.length;
          while (indices.length > clusterThreshold && level <= MAX_LEVELS) {
            level += 1;
            const before = indices.length;
            if (level % 3 === 0) {
              this.body.modules.clustering.clusterBridges(clusterOptions);
            } else {
              this.body.modules.clustering.clusterOutliers(clusterOptions);
            }
            const after = indices.length;
            if (before == after && level % 3 !== 0) {
              this._declusterAll();
              this.body.emitter.emit("_layoutFailed");
              console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
              return;
            }
          }
          this.body.modules.kamadaKawai.setOptions({
            springLength: Math.max(150, 2 * startLength)
          });
        }
        if (level > MAX_LEVELS) {
          console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result.");
        }
        this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);
        this._shiftToCenter();
        const offset = 70;
        for (let i = 0; i < indices.length; i++) {
          const node = this.body.nodes[indices[i]];
          if (node.predefinedPosition === false) {
            node.x += (0.5 - this._rng()) * offset;
            node.y += (0.5 - this._rng()) * offset;
          }
        }
        this._declusterAll();
        this.body.emitter.emit("_repositionBezierNodes");
      }
    }
  }
  /**
   * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
   * @private
   */
  _shiftToCenter() {
    const range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);
    const center = NetworkUtil.findCenter(range);
    for (let i = 0; i < this.body.nodeIndices.length; i++) {
      const node = this.body.nodes[this.body.nodeIndices[i]];
      node.x -= center.x;
      node.y -= center.y;
    }
  }
  /**
   * Expands all clusters
   * @private
   */
  _declusterAll() {
    let clustersPresent = true;
    while (clustersPresent === true) {
      clustersPresent = false;
      for (let i = 0; i < this.body.nodeIndices.length; i++) {
        if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {
          clustersPresent = true;
          this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);
        }
      }
      if (clustersPresent === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }
  /**
   *
   * @returns {number|*}
   */
  getSeed() {
    return this.initialRandomSeed;
  }
  /**
   * This is the main function to layout the nodes in a hierarchical way.
   * It checks if the node details are supplied correctly
   * @private
   */
  setupHierarchicalLayout() {
    if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
      let node, nodeId;
      let definedLevel = false;
      let undefinedLevel = false;
      this.lastNodeOnLevel = {};
      this.hierarchical = new HierarchicalStatus();
      for (nodeId in this.body.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
          node = this.body.nodes[nodeId];
          if (node.options.level !== void 0) {
            definedLevel = true;
            this.hierarchical.levels[nodeId] = node.options.level;
          } else {
            undefinedLevel = true;
          }
        }
      }
      if (undefinedLevel === true && definedLevel === true) {
        throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
      } else {
        if (undefinedLevel === true) {
          const sortMethod = this.options.hierarchical.sortMethod;
          if (sortMethod === "hubsize") {
            this._determineLevelsByHubsize();
          } else if (sortMethod === "directed") {
            this._determineLevelsDirected();
          } else if (sortMethod === "custom") {
            this._determineLevelsCustomCallback();
          }
        }
        for (const nodeId2 in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId2)) {
            this.hierarchical.ensureLevel(nodeId2);
          }
        }
        const distribution = this._getDistribution();
        this._generateMap();
        this._placeNodesByHierarchy(distribution);
        this._condenseHierarchy();
        this._shiftToCenter();
      }
    }
  }
  /**
   * @private
   */
  _condenseHierarchy() {
    var _this = this;
    let stillShifting = false;
    const branches = {};
    const shiftTrees = () => {
      const treeSizes = getTreeSizes();
      let shiftBy = 0;
      for (let i = 0; i < treeSizes.length - 1; i++) {
        const diff = treeSizes[i].max - treeSizes[i + 1].min;
        shiftBy += diff + this.options.hierarchical.treeSpacing;
        shiftTree(i + 1, shiftBy);
      }
    };
    const shiftTree = (index2, offset) => {
      const trees = this.hierarchical.trees;
      for (const nodeId in trees) {
        if (Object.prototype.hasOwnProperty.call(trees, nodeId)) {
          if (trees[nodeId] === index2) {
            this.direction.shift(nodeId, offset);
          }
        }
      }
    };
    const getTreeSizes = () => {
      const treeWidths = [];
      for (let i = 0; i < this.hierarchical.numTrees(); i++) {
        treeWidths.push(this.direction.getTreeSize(i));
      }
      return treeWidths;
    };
    const getBranchNodes = (source, map3) => {
      if (map3[source.id]) {
        return;
      }
      map3[source.id] = true;
      if (this.hierarchical.childrenReference[source.id]) {
        const children = this.hierarchical.childrenReference[source.id];
        if (children.length > 0) {
          for (let i = 0; i < children.length; i++) {
            getBranchNodes(this.body.nodes[children[i]], map3);
          }
        }
      }
    };
    const getBranchBoundary = function(branchMap) {
      let maxLevel = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1e9;
      let minSpace = 1e9;
      let maxSpace = 1e9;
      let min2 = 1e9;
      let max2 = -1e9;
      for (const branchNode in branchMap) {
        if (Object.prototype.hasOwnProperty.call(branchMap, branchNode)) {
          const node = _this.body.nodes[branchNode];
          const level = _this.hierarchical.levels[node.id];
          const position = _this.direction.getPosition(node);
          const [minSpaceNode, maxSpaceNode] = _this._getSpaceAroundNode(node, branchMap);
          minSpace = Math.min(minSpaceNode, minSpace);
          maxSpace = Math.min(maxSpaceNode, maxSpace);
          if (level <= maxLevel) {
            min2 = Math.min(position, min2);
            max2 = Math.max(position, max2);
          }
        }
      }
      return [min2, max2, minSpace, maxSpace];
    };
    const getCollisionLevel = (node1, node2) => {
      const maxLevel1 = this.hierarchical.getMaxLevel(node1.id);
      const maxLevel2 = this.hierarchical.getMaxLevel(node2.id);
      return Math.min(maxLevel1, maxLevel2);
    };
    const shiftElementsCloser = (callback, levels, centerParents) => {
      const hier = this.hierarchical;
      for (let i = 0; i < levels.length; i++) {
        const level = levels[i];
        const levelNodes = hier.distributionOrdering[level];
        if (levelNodes.length > 1) {
          for (let j = 0; j < levelNodes.length - 1; j++) {
            const node1 = levelNodes[j];
            const node2 = levelNodes[j + 1];
            if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {
              callback(node1, node2, centerParents);
            }
          }
        }
      }
    };
    const branchShiftCallback = function(node1, node2) {
      let centerParent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      const pos1 = _this.direction.getPosition(node1);
      const pos2 = _this.direction.getPosition(node2);
      const diffAbs = Math.abs(pos2 - pos1);
      const nodeSpacing = _this.options.hierarchical.nodeSpacing;
      if (diffAbs > nodeSpacing) {
        const branchNodes1 = {};
        const branchNodes2 = {};
        getBranchNodes(node1, branchNodes1);
        getBranchNodes(node2, branchNodes2);
        const maxLevel = getCollisionLevel(node1, node2);
        const branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);
        const branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);
        const max1 = branchNodeBoundary1[1];
        const min2 = branchNodeBoundary2[0];
        const minSpace2 = branchNodeBoundary2[2];
        const diffBranch = Math.abs(max1 - min2);
        if (diffBranch > nodeSpacing) {
          let offset = max1 - min2 + nodeSpacing;
          if (offset < -minSpace2 + nodeSpacing) {
            offset = -minSpace2 + nodeSpacing;
          }
          if (offset < 0) {
            _this._shiftBlock(node2.id, offset);
            stillShifting = true;
            if (centerParent === true)
              _this._centerParent(node2);
          }
        }
      }
    };
    const minimizeEdgeLength = (iterations, node) => {
      const nodeId = node.id;
      const allEdges = node.edges;
      const nodeLevel = this.hierarchical.levels[node.id];
      const C2 = this.options.hierarchical.levelSeparation * this.options.hierarchical.levelSeparation;
      const referenceNodes = {};
      const aboveEdges = [];
      for (let i = 0; i < allEdges.length; i++) {
        const edge = allEdges[i];
        if (edge.toId != edge.fromId) {
          const otherNode = edge.toId == nodeId ? edge.from : edge.to;
          referenceNodes[allEdges[i].id] = otherNode;
          if (this.hierarchical.levels[otherNode.id] < nodeLevel) {
            aboveEdges.push(edge);
          }
        }
      }
      const getFx = (point, edges) => {
        let sum = 0;
        for (let i = 0; i < edges.length; i++) {
          if (referenceNodes[edges[i].id] !== void 0) {
            const a = this.direction.getPosition(referenceNodes[edges[i].id]) - point;
            sum += a / Math.sqrt(a * a + C2);
          }
        }
        return sum;
      };
      const getDFx = (point, edges) => {
        let sum = 0;
        for (let i = 0; i < edges.length; i++) {
          if (referenceNodes[edges[i].id] !== void 0) {
            const a = this.direction.getPosition(referenceNodes[edges[i].id]) - point;
            sum -= C2 * Math.pow(a * a + C2, -1.5);
          }
        }
        return sum;
      };
      const getGuess = (iterations2, edges) => {
        let guess2 = this.direction.getPosition(node);
        const guessMap = {};
        for (let i = 0; i < iterations2; i++) {
          const fx = getFx(guess2, edges);
          const dfx = getDFx(guess2, edges);
          const limit = 40;
          const ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
          guess2 = guess2 - ratio;
          if (guessMap[guess2] !== void 0) {
            break;
          }
          guessMap[guess2] = i;
        }
        return guess2;
      };
      const moveBranch = (guess2) => {
        const nodePosition = this.direction.getPosition(node);
        if (branches[node.id] === void 0) {
          const branchNodes = {};
          getBranchNodes(node, branchNodes);
          branches[node.id] = branchNodes;
        }
        const branchBoundary = getBranchBoundary(branches[node.id]);
        const minSpaceBranch = branchBoundary[2];
        const maxSpaceBranch = branchBoundary[3];
        const diff = guess2 - nodePosition;
        let branchOffset = 0;
        if (diff > 0) {
          branchOffset = Math.min(diff, maxSpaceBranch - this.options.hierarchical.nodeSpacing);
        } else if (diff < 0) {
          branchOffset = -Math.min(-diff, minSpaceBranch - this.options.hierarchical.nodeSpacing);
        }
        if (branchOffset != 0) {
          this._shiftBlock(node.id, branchOffset);
          stillShifting = true;
        }
      };
      const moveNode = (guess2) => {
        const nodePosition = this.direction.getPosition(node);
        const [minSpace, maxSpace] = this._getSpaceAroundNode(node);
        const diff = guess2 - nodePosition;
        let newPosition = nodePosition;
        if (diff > 0) {
          newPosition = Math.min(nodePosition + (maxSpace - this.options.hierarchical.nodeSpacing), guess2);
        } else if (diff < 0) {
          newPosition = Math.max(nodePosition - (minSpace - this.options.hierarchical.nodeSpacing), guess2);
        }
        if (newPosition !== nodePosition) {
          this.direction.setPosition(node, newPosition);
          stillShifting = true;
        }
      };
      let guess = getGuess(iterations, aboveEdges);
      moveBranch(guess);
      guess = getGuess(iterations, allEdges);
      moveNode(guess);
    };
    const minimizeEdgeLengthBottomUp = (iterations) => {
      let levels = this.hierarchical.getLevels();
      levels = _reverseInstanceProperty(levels).call(levels);
      for (let i = 0; i < iterations; i++) {
        stillShifting = false;
        for (let j = 0; j < levels.length; j++) {
          const level = levels[j];
          const levelNodes = this.hierarchical.distributionOrdering[level];
          for (let k = 0; k < levelNodes.length; k++) {
            minimizeEdgeLength(1e3, levelNodes[k]);
          }
        }
        if (stillShifting !== true) {
          break;
        }
      }
    };
    const shiftBranchesCloserBottomUp = (iterations) => {
      let levels = this.hierarchical.getLevels();
      levels = _reverseInstanceProperty(levels).call(levels);
      for (let i = 0; i < iterations; i++) {
        stillShifting = false;
        shiftElementsCloser(branchShiftCallback, levels, true);
        if (stillShifting !== true) {
          break;
        }
      }
    };
    const centerAllParents = () => {
      for (const nodeId in this.body.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId))
          this._centerParent(this.body.nodes[nodeId]);
      }
    };
    const centerAllParentsBottomUp = () => {
      let levels = this.hierarchical.getLevels();
      levels = _reverseInstanceProperty(levels).call(levels);
      for (let i = 0; i < levels.length; i++) {
        const level = levels[i];
        const levelNodes = this.hierarchical.distributionOrdering[level];
        for (let j = 0; j < levelNodes.length; j++) {
          this._centerParent(levelNodes[j]);
        }
      }
    };
    if (this.options.hierarchical.blockShifting === true) {
      shiftBranchesCloserBottomUp(5);
      centerAllParents();
    }
    if (this.options.hierarchical.edgeMinimization === true) {
      minimizeEdgeLengthBottomUp(20);
    }
    if (this.options.hierarchical.parentCentralization === true) {
      centerAllParentsBottomUp();
    }
    shiftTrees();
  }
  /**
   * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
   * This is used to only get the distances to nodes outside of a branch.
   * @param {Node} node
   * @param {{Node.id: vis.Node}} map
   * @returns {number[]}
   * @private
   */
  _getSpaceAroundNode(node, map3) {
    let useMap = true;
    if (map3 === void 0) {
      useMap = false;
    }
    const level = this.hierarchical.levels[node.id];
    if (level !== void 0) {
      const index2 = this.hierarchical.distributionIndex[node.id];
      const position = this.direction.getPosition(node);
      const ordering = this.hierarchical.distributionOrdering[level];
      let minSpace = 1e9;
      let maxSpace = 1e9;
      if (index2 !== 0) {
        const prevNode = ordering[index2 - 1];
        if (useMap === true && map3[prevNode.id] === void 0 || useMap === false) {
          const prevPos = this.direction.getPosition(prevNode);
          minSpace = position - prevPos;
        }
      }
      if (index2 != ordering.length - 1) {
        const nextNode = ordering[index2 + 1];
        if (useMap === true && map3[nextNode.id] === void 0 || useMap === false) {
          const nextPos = this.direction.getPosition(nextNode);
          maxSpace = Math.min(maxSpace, nextPos - position);
        }
      }
      return [minSpace, maxSpace];
    } else {
      return [0, 0];
    }
  }
  /**
   * We use this method to center a parent node and check if it does not cross other nodes when it does.
   * @param {Node} node
   * @private
   */
  _centerParent(node) {
    if (this.hierarchical.parentReference[node.id]) {
      const parents = this.hierarchical.parentReference[node.id];
      for (let i = 0; i < parents.length; i++) {
        const parentId = parents[i];
        const parentNode = this.body.nodes[parentId];
        const children = this.hierarchical.childrenReference[parentId];
        if (children !== void 0) {
          const newPosition = this._getCenterPosition(children);
          const position = this.direction.getPosition(parentNode);
          const [minSpace, maxSpace] = this._getSpaceAroundNode(parentNode);
          const diff = position - newPosition;
          if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
            this.direction.setPosition(parentNode, newPosition);
          }
        }
      }
    }
  }
  /**
   * This function places the nodes on the canvas based on the hierarchial distribution.
   * @param {object} distribution | obtained by the function this._getDistribution()
   * @private
   */
  _placeNodesByHierarchy(distribution) {
    this.positionedNodes = {};
    for (const level in distribution) {
      if (Object.prototype.hasOwnProperty.call(distribution, level)) {
        var _context2;
        let nodeArray = _Object$keys(distribution[level]);
        nodeArray = this._indexArrayToNodes(nodeArray);
        _sortInstanceProperty(_context2 = this.direction).call(_context2, nodeArray);
        let handledNodeCount = 0;
        for (let i = 0; i < nodeArray.length; i++) {
          const node = nodeArray[i];
          if (this.positionedNodes[node.id] === void 0) {
            const spacing = this.options.hierarchical.nodeSpacing;
            let pos = spacing * handledNodeCount;
            if (handledNodeCount > 0) {
              pos = this.direction.getPosition(nodeArray[i - 1]) + spacing;
            }
            this.direction.setPosition(node, pos, level);
            this._validatePositionAndContinue(node, level, pos);
            handledNodeCount++;
          }
        }
      }
    }
  }
  /**
   * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
   * on a X position that ensures there will be no overlap.
   * @param {Node.id} parentId
   * @param {number} parentLevel
   * @private
   */
  _placeBranchNodes(parentId, parentLevel) {
    var _context3;
    const childRef = this.hierarchical.childrenReference[parentId];
    if (childRef === void 0) {
      return;
    }
    const childNodes = [];
    for (let i = 0; i < childRef.length; i++) {
      childNodes.push(this.body.nodes[childRef[i]]);
    }
    _sortInstanceProperty(_context3 = this.direction).call(_context3, childNodes);
    for (let i = 0; i < childNodes.length; i++) {
      const childNode = childNodes[i];
      const childNodeLevel = this.hierarchical.levels[childNode.id];
      if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === void 0) {
        const spacing = this.options.hierarchical.nodeSpacing;
        let pos;
        if (i === 0) {
          pos = this.direction.getPosition(this.body.nodes[parentId]);
        } else {
          pos = this.direction.getPosition(childNodes[i - 1]) + spacing;
        }
        this.direction.setPosition(childNode, pos, childNodeLevel);
        this._validatePositionAndContinue(childNode, childNodeLevel, pos);
      } else {
        return;
      }
    }
    const center = this._getCenterPosition(childNodes);
    this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);
  }
  /**
   * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
   * Finally it will call _placeBranchNodes to place the branch nodes.
   * @param {Node} node
   * @param {number} level
   * @param {number} pos
   * @private
   */
  _validatePositionAndContinue(node, level, pos) {
    if (!this.hierarchical.isTree)
      return;
    if (this.lastNodeOnLevel[level] !== void 0) {
      const previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);
      if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
        const diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
        const sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);
        this._shiftBlock(sharedParent.withChild, diff);
      }
    }
    this.lastNodeOnLevel[level] = node.id;
    this.positionedNodes[node.id] = true;
    this._placeBranchNodes(node.id, level);
  }
  /**
   * Receives an array with node indices and returns an array with the actual node references.
   * Used for sorting based on node properties.
   * @param {Array.<Node.id>} idArray
   * @returns {Array.<Node>}
   */
  _indexArrayToNodes(idArray) {
    const array2 = [];
    for (let i = 0; i < idArray.length; i++) {
      array2.push(this.body.nodes[idArray[i]]);
    }
    return array2;
  }
  /**
   * This function get the distribution of levels based on hubsize
   * @returns {object}
   * @private
   */
  _getDistribution() {
    const distribution = {};
    let nodeId, node;
    for (nodeId in this.body.nodes) {
      if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
        node = this.body.nodes[nodeId];
        const level = this.hierarchical.levels[nodeId] === void 0 ? 0 : this.hierarchical.levels[nodeId];
        this.direction.fix(node, level);
        if (distribution[level] === void 0) {
          distribution[level] = {};
        }
        distribution[level][nodeId] = node;
      }
    }
    return distribution;
  }
  /**
   * Return the active (i.e. visible) edges for this node
   * @param {Node} node
   * @returns {Array.<vis.Edge>} Array of edge instances
   * @private
   */
  _getActiveEdges(node) {
    const result = [];
    forEach$1(node.edges, (edge) => {
      var _context4;
      if (_indexOfInstanceProperty(_context4 = this.body.edgeIndices).call(_context4, edge.id) !== -1) {
        result.push(edge);
      }
    });
    return result;
  }
  /**
   * Get the hubsizes for all active nodes.
   * @returns {number}
   * @private
   */
  _getHubSizes() {
    const hubSizes = {};
    const nodeIds = this.body.nodeIndices;
    forEach$1(nodeIds, (nodeId) => {
      const node = this.body.nodes[nodeId];
      const hubSize = this._getActiveEdges(node).length;
      hubSizes[hubSize] = true;
    });
    const result = [];
    forEach$1(hubSizes, (size) => {
      result.push(Number(size));
    });
    _sortInstanceProperty(result).call(result, function(a, b) {
      return b - a;
    });
    return result;
  }
  /**
   * this function allocates nodes in levels based on the recursive branching from the largest hubs.
   * @private
   */
  _determineLevelsByHubsize() {
    const levelDownstream = (nodeA, nodeB) => {
      this.hierarchical.levelDownstream(nodeA, nodeB);
    };
    const hubSizes = this._getHubSizes();
    for (let i = 0; i < hubSizes.length; ++i) {
      const hubSize = hubSizes[i];
      if (hubSize === 0)
        break;
      forEach$1(this.body.nodeIndices, (nodeId) => {
        const node = this.body.nodes[nodeId];
        if (hubSize === this._getActiveEdges(node).length) {
          this._crawlNetwork(levelDownstream, nodeId);
        }
      });
    }
  }
  /**
   * TODO: release feature
   * TODO: Determine if this feature is needed at all
   * @private
   */
  _determineLevelsCustomCallback() {
    const minLevel = 1e5;
    const customCallback = function(nodeA, nodeB, edge) {
    };
    const levelByDirection = (nodeA, nodeB, edge) => {
      let levelA = this.hierarchical.levels[nodeA.id];
      if (levelA === void 0) {
        levelA = this.hierarchical.levels[nodeA.id] = minLevel;
      }
      const diff = customCallback(NetworkUtil.cloneOptions(nodeA, "node"), NetworkUtil.cloneOptions(nodeB, "node"), NetworkUtil.cloneOptions(edge, "edge"));
      this.hierarchical.levels[nodeB.id] = levelA + diff;
    };
    this._crawlNetwork(levelByDirection);
    this.hierarchical.setMinLevelToZero();
  }
  /**
   * Allocate nodes in levels based on the direction of the edges.
   * @private
   */
  _determineLevelsDirected() {
    var _context5;
    const nodes = _reduceInstanceProperty(_context5 = this.body.nodeIndices).call(_context5, (acc, id2) => {
      acc.set(id2, this.body.nodes[id2]);
      return acc;
    }, new _Map());
    if (this.options.hierarchical.shakeTowards === "roots") {
      this.hierarchical.levels = fillLevelsByDirectionRoots(nodes);
    } else {
      this.hierarchical.levels = fillLevelsByDirectionLeaves(nodes);
    }
    this.hierarchical.setMinLevelToZero();
  }
  /**
   * Update the bookkeeping of parent and child.
   * @private
   */
  _generateMap() {
    const fillInRelations = (parentNode, childNode) => {
      if (this.hierarchical.levels[childNode.id] > this.hierarchical.levels[parentNode.id]) {
        this.hierarchical.addRelation(parentNode.id, childNode.id);
      }
    };
    this._crawlNetwork(fillInRelations);
    this.hierarchical.checkIfTree();
  }
  /**
   * Crawl over the entire network and use a callback on each node couple that is connected to each other.
   * @param {Function} [callback]          | will receive nodeA, nodeB and the connecting edge. A and B are distinct.
   * @param {Node.id} startingNodeId
   * @private
   */
  _crawlNetwork() {
    let callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
    };
    let startingNodeId = arguments.length > 1 ? arguments[1] : void 0;
    const progress = {};
    const crawler = (node, tree) => {
      if (progress[node.id] === void 0) {
        this.hierarchical.setTreeIndex(node, tree);
        progress[node.id] = true;
        let childNode;
        const edges = this._getActiveEdges(node);
        for (let i = 0; i < edges.length; i++) {
          const edge = edges[i];
          if (edge.connected === true) {
            if (edge.toId == node.id) {
              childNode = edge.from;
            } else {
              childNode = edge.to;
            }
            if (node.id != childNode.id) {
              callback(node, childNode, edge);
              crawler(childNode, tree);
            }
          }
        }
      }
    };
    if (startingNodeId === void 0) {
      let treeIndex = 0;
      for (let i = 0; i < this.body.nodeIndices.length; i++) {
        const nodeId = this.body.nodeIndices[i];
        if (progress[nodeId] === void 0) {
          const node = this.body.nodes[nodeId];
          crawler(node, treeIndex);
          treeIndex += 1;
        }
      }
    } else {
      const node = this.body.nodes[startingNodeId];
      if (node === void 0) {
        console.error("Node not found:", startingNodeId);
        return;
      }
      crawler(node);
    }
  }
  /**
   * Shift a branch a certain distance
   * @param {Node.id} parentId
   * @param {number} diff
   * @private
   */
  _shiftBlock(parentId, diff) {
    const progress = {};
    const shifter = (parentId2) => {
      if (progress[parentId2]) {
        return;
      }
      progress[parentId2] = true;
      this.direction.shift(parentId2, diff);
      const childRef = this.hierarchical.childrenReference[parentId2];
      if (childRef !== void 0) {
        for (let i = 0; i < childRef.length; i++) {
          shifter(childRef[i]);
        }
      }
    };
    shifter(parentId);
  }
  /**
   * Find a common parent between branches.
   * @param {Node.id} childA
   * @param {Node.id} childB
   * @returns {{foundParent, withChild}}
   * @private
   */
  _findCommonParent(childA, childB) {
    const parents = {};
    const iterateParents = (parents2, child) => {
      const parentRef = this.hierarchical.parentReference[child];
      if (parentRef !== void 0) {
        for (let i = 0; i < parentRef.length; i++) {
          const parent2 = parentRef[i];
          parents2[parent2] = true;
          iterateParents(parents2, parent2);
        }
      }
    };
    const findParent = (parents2, child) => {
      const parentRef = this.hierarchical.parentReference[child];
      if (parentRef !== void 0) {
        for (let i = 0; i < parentRef.length; i++) {
          const parent2 = parentRef[i];
          if (parents2[parent2] !== void 0) {
            return {
              foundParent: parent2,
              withChild: child
            };
          }
          const branch = findParent(parents2, parent2);
          if (branch.foundParent !== null) {
            return branch;
          }
        }
      }
      return {
        foundParent: null,
        withChild: child
      };
    };
    iterateParents(parents, childA);
    return findParent(parents, childB);
  }
  /**
   * Set the strategy pattern for handling the coordinates given the current direction.
   *
   * The individual instances contain all the operations and data specific to a layout direction.
   * @param {Node} node
   * @param {{x: number, y: number}} position
   * @param {number} level
   * @param {boolean} [doNotUpdate]
   * @private
   */
  setDirectionStrategy() {
    const isVertical = this.options.hierarchical.direction === "UD" || this.options.hierarchical.direction === "DU";
    if (isVertical) {
      this.direction = new VerticalStrategy(this);
    } else {
      this.direction = new HorizontalStrategy(this);
    }
  }
  /**
   * Determine the center position of a branch from the passed list of child nodes
   *
   * This takes into account the positions of all the child nodes.
   * @param {Array.<Node|vis.Node.id>} childNodes  Array of either child nodes or node id's
   * @returns {number}
   * @private
   */
  _getCenterPosition(childNodes) {
    let minPos = 1e9;
    let maxPos = -1e9;
    for (let i = 0; i < childNodes.length; i++) {
      let childNode;
      if (childNodes[i].id !== void 0) {
        childNode = childNodes[i];
      } else {
        const childNodeId = childNodes[i];
        childNode = this.body.nodes[childNodeId];
      }
      const position = this.direction.getPosition(childNode);
      minPos = Math.min(minPos, position);
      maxPos = Math.max(maxPos, position);
    }
    return 0.5 * (minPos + maxPos);
  }
};
var ManipulationSystem = class {
  /**
   * @param {object} body
   * @param {Canvas} canvas
   * @param {SelectionHandler} selectionHandler
   * @param {InteractionHandler} interactionHandler
   */
  constructor(body, canvas, selectionHandler, interactionHandler) {
    var _context, _context2;
    this.body = body;
    this.canvas = canvas;
    this.selectionHandler = selectionHandler;
    this.interactionHandler = interactionHandler;
    this.editMode = false;
    this.manipulationDiv = void 0;
    this.editModeDiv = void 0;
    this.closeDiv = void 0;
    this._domEventListenerCleanupQueue = [];
    this.temporaryUIFunctions = {};
    this.temporaryEventFunctions = [];
    this.touchTime = 0;
    this.temporaryIds = {
      nodes: [],
      edges: []
    };
    this.guiEnabled = false;
    this.inMode = false;
    this.selectedControlNode = void 0;
    this.options = {};
    this.defaultOptions = {
      enabled: false,
      initiallyActive: false,
      addNode: true,
      addEdge: true,
      editNode: void 0,
      editEdge: true,
      deleteNode: true,
      deleteEdge: true,
      controlNodeStyle: {
        shape: "dot",
        size: 6,
        color: {
          background: "#ff0000",
          border: "#3c3c3c",
          highlight: {
            background: "#07f968",
            border: "#3c3c3c"
          }
        },
        borderWidth: 2,
        borderWidthSelected: 2
      }
    };
    _Object$assign(this.options, this.defaultOptions);
    this.body.emitter.on("destroy", () => {
      this._clean();
    });
    this.body.emitter.on("_dataChanged", _bindInstanceProperty(_context = this._restore).call(_context, this));
    this.body.emitter.on("_resetData", _bindInstanceProperty(_context2 = this._restore).call(_context2, this));
  }
  /**
   * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.
   * @private
   */
  _restore() {
    if (this.inMode !== false) {
      if (this.options.initiallyActive === true) {
        this.enableEditMode();
      } else {
        this.disableEditMode();
      }
    }
  }
  /**
   * Set the Options
   * @param {object} options
   * @param {object} allOptions
   * @param {object} globalOptions
   */
  setOptions(options2, allOptions2, globalOptions) {
    if (allOptions2 !== void 0) {
      if (allOptions2.locale !== void 0) {
        this.options.locale = allOptions2.locale;
      } else {
        this.options.locale = globalOptions.locale;
      }
      if (allOptions2.locales !== void 0) {
        this.options.locales = allOptions2.locales;
      } else {
        this.options.locales = globalOptions.locales;
      }
    }
    if (options2 !== void 0) {
      if (typeof options2 === "boolean") {
        this.options.enabled = options2;
      } else {
        this.options.enabled = true;
        deepExtend(this.options, options2);
      }
      if (this.options.initiallyActive === true) {
        this.editMode = true;
      }
      this._setup();
    }
  }
  /**
   * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
   * @private
   */
  toggleEditMode() {
    if (this.editMode === true) {
      this.disableEditMode();
    } else {
      this.enableEditMode();
    }
  }
  /**
   * Enables Edit Mode
   */
  enableEditMode() {
    this.editMode = true;
    this._clean();
    if (this.guiEnabled === true) {
      this.manipulationDiv.style.display = "block";
      this.closeDiv.style.display = "block";
      this.editModeDiv.style.display = "none";
      this.showManipulatorToolbar();
    }
  }
  /**
   * Disables Edit Mode
   */
  disableEditMode() {
    this.editMode = false;
    this._clean();
    if (this.guiEnabled === true) {
      this.manipulationDiv.style.display = "none";
      this.closeDiv.style.display = "none";
      this.editModeDiv.style.display = "block";
      this._createEditButton();
    }
  }
  /**
   * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
   * @private
   */
  showManipulatorToolbar() {
    this._clean();
    this.manipulationDOM = {};
    if (this.guiEnabled === true) {
      var _context3, _context4;
      this.editMode = true;
      this.manipulationDiv.style.display = "block";
      this.closeDiv.style.display = "block";
      const selectedNodeCount = this.selectionHandler.getSelectedNodeCount();
      const selectedEdgeCount = this.selectionHandler.getSelectedEdgeCount();
      const selectedTotalCount = selectedNodeCount + selectedEdgeCount;
      const locale = this.options.locales[this.options.locale];
      let needSeperator = false;
      if (this.options.addNode !== false) {
        this._createAddNodeButton(locale);
        needSeperator = true;
      }
      if (this.options.addEdge !== false) {
        if (needSeperator === true) {
          this._createSeperator(1);
        } else {
          needSeperator = true;
        }
        this._createAddEdgeButton(locale);
      }
      if (selectedNodeCount === 1 && typeof this.options.editNode === "function") {
        if (needSeperator === true) {
          this._createSeperator(2);
        } else {
          needSeperator = true;
        }
        this._createEditNodeButton(locale);
      } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
        if (needSeperator === true) {
          this._createSeperator(3);
        } else {
          needSeperator = true;
        }
        this._createEditEdgeButton(locale);
      }
      if (selectedTotalCount !== 0) {
        if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
          if (needSeperator === true) {
            this._createSeperator(4);
          }
          this._createDeleteButton(locale);
        } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
          if (needSeperator === true) {
            this._createSeperator(4);
          }
          this._createDeleteButton(locale);
        }
      }
      this._bindElementEvents(this.closeDiv, _bindInstanceProperty(_context3 = this.toggleEditMode).call(_context3, this));
      this._temporaryBindEvent("select", _bindInstanceProperty(_context4 = this.showManipulatorToolbar).call(_context4, this));
    }
    this.body.emitter.emit("_redraw");
  }
  /**
   * Create the toolbar for adding Nodes
   */
  addNodeMode() {
    var _context6;
    if (this.editMode !== true) {
      this.enableEditMode();
    }
    this._clean();
    this.inMode = "addNode";
    if (this.guiEnabled === true) {
      var _context5;
      const locale = this.options.locales[this.options.locale];
      this.manipulationDOM = {};
      this._createBackButton(locale);
      this._createSeperator();
      this._createDescription(locale["addDescription"] || this.options.locales["en"]["addDescription"]);
      this._bindElementEvents(this.closeDiv, _bindInstanceProperty(_context5 = this.toggleEditMode).call(_context5, this));
    }
    this._temporaryBindEvent("click", _bindInstanceProperty(_context6 = this._performAddNode).call(_context6, this));
  }
  /**
   * call the bound function to handle the editing of the node. The node has to be selected.
   */
  editNode() {
    if (this.editMode !== true) {
      this.enableEditMode();
    }
    this._clean();
    const node = this.selectionHandler.getSelectedNodes()[0];
    if (node !== void 0) {
      this.inMode = "editNode";
      if (typeof this.options.editNode === "function") {
        if (node.isCluster !== true) {
          const data2 = deepExtend({}, node.options, false);
          data2.x = node.x;
          data2.y = node.y;
          if (this.options.editNode.length === 2) {
            this.options.editNode(data2, (finalizedData) => {
              if (finalizedData !== null && finalizedData !== void 0 && this.inMode === "editNode") {
                this.body.data.nodes.getDataSet().update(finalizedData);
              }
              this.showManipulatorToolbar();
            });
          } else {
            throw new Error("The function for edit does not support two arguments (data, callback)");
          }
        } else {
          alert(this.options.locales[this.options.locale]["editClusterError"] || this.options.locales["en"]["editClusterError"]);
        }
      } else {
        throw new Error("No function has been configured to handle the editing of nodes.");
      }
    } else {
      this.showManipulatorToolbar();
    }
  }
  /**
   * create the toolbar to connect nodes
   */
  addEdgeMode() {
    var _context8, _context9, _context0, _context1, _context10;
    if (this.editMode !== true) {
      this.enableEditMode();
    }
    this._clean();
    this.inMode = "addEdge";
    if (this.guiEnabled === true) {
      var _context7;
      const locale = this.options.locales[this.options.locale];
      this.manipulationDOM = {};
      this._createBackButton(locale);
      this._createSeperator();
      this._createDescription(locale["edgeDescription"] || this.options.locales["en"]["edgeDescription"]);
      this._bindElementEvents(this.closeDiv, _bindInstanceProperty(_context7 = this.toggleEditMode).call(_context7, this));
    }
    this._temporaryBindUI("onTouch", _bindInstanceProperty(_context8 = this._handleConnect).call(_context8, this));
    this._temporaryBindUI("onDragEnd", _bindInstanceProperty(_context9 = this._finishConnect).call(_context9, this));
    this._temporaryBindUI("onDrag", _bindInstanceProperty(_context0 = this._dragControlNode).call(_context0, this));
    this._temporaryBindUI("onRelease", _bindInstanceProperty(_context1 = this._finishConnect).call(_context1, this));
    this._temporaryBindUI("onDragStart", _bindInstanceProperty(_context10 = this._dragStartEdge).call(_context10, this));
    this._temporaryBindUI("onHold", () => {
    });
  }
  /**
   * create the toolbar to edit edges
   */
  editEdgeMode() {
    if (this.editMode !== true) {
      this.enableEditMode();
    }
    this._clean();
    this.inMode = "editEdge";
    if (typeof this.options.editEdge === "object" && typeof this.options.editEdge.editWithoutDrag === "function") {
      this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];
      if (this.edgeBeingEditedId !== void 0) {
        const edge = this.body.edges[this.edgeBeingEditedId];
        this._performEditEdge(edge.from.id, edge.to.id);
        return;
      }
    }
    if (this.guiEnabled === true) {
      var _context11;
      const locale = this.options.locales[this.options.locale];
      this.manipulationDOM = {};
      this._createBackButton(locale);
      this._createSeperator();
      this._createDescription(locale["editEdgeDescription"] || this.options.locales["en"]["editEdgeDescription"]);
      this._bindElementEvents(this.closeDiv, _bindInstanceProperty(_context11 = this.toggleEditMode).call(_context11, this));
    }
    this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];
    if (this.edgeBeingEditedId !== void 0) {
      var _context12, _context13, _context14, _context15;
      const edge = this.body.edges[this.edgeBeingEditedId];
      const controlNodeFrom = this._getNewTargetNode(edge.from.x, edge.from.y);
      const controlNodeTo = this._getNewTargetNode(edge.to.x, edge.to.y);
      this.temporaryIds.nodes.push(controlNodeFrom.id);
      this.temporaryIds.nodes.push(controlNodeTo.id);
      this.body.nodes[controlNodeFrom.id] = controlNodeFrom;
      this.body.nodeIndices.push(controlNodeFrom.id);
      this.body.nodes[controlNodeTo.id] = controlNodeTo;
      this.body.nodeIndices.push(controlNodeTo.id);
      this._temporaryBindUI("onTouch", _bindInstanceProperty(_context12 = this._controlNodeTouch).call(_context12, this));
      this._temporaryBindUI("onTap", () => {
      });
      this._temporaryBindUI("onHold", () => {
      });
      this._temporaryBindUI("onDragStart", _bindInstanceProperty(_context13 = this._controlNodeDragStart).call(_context13, this));
      this._temporaryBindUI("onDrag", _bindInstanceProperty(_context14 = this._controlNodeDrag).call(_context14, this));
      this._temporaryBindUI("onDragEnd", _bindInstanceProperty(_context15 = this._controlNodeDragEnd).call(_context15, this));
      this._temporaryBindUI("onMouseMove", () => {
      });
      this._temporaryBindEvent("beforeDrawing", (ctx) => {
        const positions = edge.edgeType.findBorderPositions(ctx);
        if (controlNodeFrom.selected === false) {
          controlNodeFrom.x = positions.from.x;
          controlNodeFrom.y = positions.from.y;
        }
        if (controlNodeTo.selected === false) {
          controlNodeTo.x = positions.to.x;
          controlNodeTo.y = positions.to.y;
        }
      });
      this.body.emitter.emit("_redraw");
    } else {
      this.showManipulatorToolbar();
    }
  }
  /**
   * delete everything in the selection
   */
  deleteSelected() {
    if (this.editMode !== true) {
      this.enableEditMode();
    }
    this._clean();
    this.inMode = "delete";
    const selectedNodes = this.selectionHandler.getSelectedNodeIds();
    const selectedEdges = this.selectionHandler.getSelectedEdgeIds();
    let deleteFunction = void 0;
    if (selectedNodes.length > 0) {
      for (let i = 0; i < selectedNodes.length; i++) {
        if (this.body.nodes[selectedNodes[i]].isCluster === true) {
          alert(this.options.locales[this.options.locale]["deleteClusterError"] || this.options.locales["en"]["deleteClusterError"]);
          return;
        }
      }
      if (typeof this.options.deleteNode === "function") {
        deleteFunction = this.options.deleteNode;
      }
    } else if (selectedEdges.length > 0) {
      if (typeof this.options.deleteEdge === "function") {
        deleteFunction = this.options.deleteEdge;
      }
    }
    if (typeof deleteFunction === "function") {
      const data2 = {
        nodes: selectedNodes,
        edges: selectedEdges
      };
      if (deleteFunction.length === 2) {
        deleteFunction(data2, (finalizedData) => {
          if (finalizedData !== null && finalizedData !== void 0 && this.inMode === "delete") {
            this.body.data.edges.getDataSet().remove(finalizedData.edges);
            this.body.data.nodes.getDataSet().remove(finalizedData.nodes);
            this.body.emitter.emit("startSimulation");
            this.showManipulatorToolbar();
          } else {
            this.body.emitter.emit("startSimulation");
            this.showManipulatorToolbar();
          }
        });
      } else {
        throw new Error("The function for delete does not support two arguments (data, callback)");
      }
    } else {
      this.body.data.edges.getDataSet().remove(selectedEdges);
      this.body.data.nodes.getDataSet().remove(selectedNodes);
      this.body.emitter.emit("startSimulation");
      this.showManipulatorToolbar();
    }
  }
  //********************************************** PRIVATE ***************************************//
  /**
   * draw or remove the DOM
   * @private
   */
  _setup() {
    if (this.options.enabled === true) {
      this.guiEnabled = true;
      this._createWrappers();
      if (this.editMode === false) {
        this._createEditButton();
      } else {
        this.showManipulatorToolbar();
      }
    } else {
      this._removeManipulationDOM();
      this.guiEnabled = false;
    }
  }
  /**
   * create the div overlays that contain the DOM
   * @private
   */
  _createWrappers() {
    if (this.manipulationDiv === void 0) {
      this.manipulationDiv = document.createElement("div");
      this.manipulationDiv.className = "vis-manipulation";
      if (this.editMode === true) {
        this.manipulationDiv.style.display = "block";
      } else {
        this.manipulationDiv.style.display = "none";
      }
      this.canvas.frame.appendChild(this.manipulationDiv);
    }
    if (this.editModeDiv === void 0) {
      this.editModeDiv = document.createElement("div");
      this.editModeDiv.className = "vis-edit-mode";
      if (this.editMode === true) {
        this.editModeDiv.style.display = "none";
      } else {
        this.editModeDiv.style.display = "block";
      }
      this.canvas.frame.appendChild(this.editModeDiv);
    }
    if (this.closeDiv === void 0) {
      var _this$options$locales, _this$options$locales2;
      this.closeDiv = document.createElement("button");
      this.closeDiv.className = "vis-close";
      this.closeDiv.setAttribute("aria-label", (_this$options$locales = (_this$options$locales2 = this.options.locales[this.options.locale]) === null || _this$options$locales2 === void 0 ? void 0 : _this$options$locales2["close"]) !== null && _this$options$locales !== void 0 ? _this$options$locales : this.options.locales["en"]["close"]);
      this.closeDiv.style.display = this.manipulationDiv.style.display;
      this.canvas.frame.appendChild(this.closeDiv);
    }
  }
  /**
   * generate a new target node. Used for creating new edges and editing edges
   * @param {number} x
   * @param {number} y
   * @returns {Node}
   * @private
   */
  _getNewTargetNode(x, y) {
    const controlNodeStyle = deepExtend({}, this.options.controlNodeStyle);
    controlNodeStyle.id = "targetNode" + v4();
    controlNodeStyle.hidden = false;
    controlNodeStyle.physics = false;
    controlNodeStyle.x = x;
    controlNodeStyle.y = y;
    const node = this.body.functions.createNode(controlNodeStyle);
    node.shape.boundingBox = {
      left: x,
      right: x,
      top: y,
      bottom: y
    };
    return node;
  }
  /**
   * Create the edit button
   */
  _createEditButton() {
    var _context16;
    this._clean();
    this.manipulationDOM = {};
    recursiveDOMDelete(this.editModeDiv);
    const locale = this.options.locales[this.options.locale];
    const button = this._createButton("editMode", "vis-edit vis-edit-mode", locale["edit"] || this.options.locales["en"]["edit"]);
    this.editModeDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context16 = this.toggleEditMode).call(_context16, this));
  }
  /**
   * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
   * @private
   */
  _clean() {
    this.inMode = false;
    if (this.guiEnabled === true) {
      recursiveDOMDelete(this.editModeDiv);
      recursiveDOMDelete(this.manipulationDiv);
      this._cleanupDOMEventListeners();
    }
    this._cleanupTemporaryNodesAndEdges();
    this._unbindTemporaryUIs();
    this._unbindTemporaryEvents();
    this.body.emitter.emit("restorePhysics");
  }
  /**
   * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
   * @private
   */
  _cleanupDOMEventListeners() {
    for (const callback of _spliceInstanceProperty(_context17 = this._domEventListenerCleanupQueue).call(_context17, 0)) {
      var _context17;
      callback();
    }
  }
  /**
   * Remove all DOM elements created by this module.
   * @private
   */
  _removeManipulationDOM() {
    this._clean();
    recursiveDOMDelete(this.manipulationDiv);
    recursiveDOMDelete(this.editModeDiv);
    recursiveDOMDelete(this.closeDiv);
    if (this.manipulationDiv) {
      this.canvas.frame.removeChild(this.manipulationDiv);
    }
    if (this.editModeDiv) {
      this.canvas.frame.removeChild(this.editModeDiv);
    }
    if (this.closeDiv) {
      this.canvas.frame.removeChild(this.closeDiv);
    }
    this.manipulationDiv = void 0;
    this.editModeDiv = void 0;
    this.closeDiv = void 0;
  }
  /**
   * create a seperator line. the index is to differentiate in the manipulation dom
   * @param {number} [index]
   * @private
   */
  _createSeperator() {
    let index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    this.manipulationDOM["seperatorLineDiv" + index2] = document.createElement("div");
    this.manipulationDOM["seperatorLineDiv" + index2].className = "vis-separator-line";
    this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + index2]);
  }
  // ----------------------    DOM functions for buttons    --------------------------//
  /**
   *
   * @param {Locale} locale
   * @private
   */
  _createAddNodeButton(locale) {
    var _context18;
    const button = this._createButton("addNode", "vis-add", locale["addNode"] || this.options.locales["en"]["addNode"]);
    this.manipulationDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context18 = this.addNodeMode).call(_context18, this));
  }
  /**
   *
   * @param {Locale} locale
   * @private
   */
  _createAddEdgeButton(locale) {
    var _context19;
    const button = this._createButton("addEdge", "vis-connect", locale["addEdge"] || this.options.locales["en"]["addEdge"]);
    this.manipulationDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context19 = this.addEdgeMode).call(_context19, this));
  }
  /**
   *
   * @param {Locale} locale
   * @private
   */
  _createEditNodeButton(locale) {
    var _context20;
    const button = this._createButton("editNode", "vis-edit", locale["editNode"] || this.options.locales["en"]["editNode"]);
    this.manipulationDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context20 = this.editNode).call(_context20, this));
  }
  /**
   *
   * @param {Locale} locale
   * @private
   */
  _createEditEdgeButton(locale) {
    var _context21;
    const button = this._createButton("editEdge", "vis-edit", locale["editEdge"] || this.options.locales["en"]["editEdge"]);
    this.manipulationDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context21 = this.editEdgeMode).call(_context21, this));
  }
  /**
   *
   * @param {Locale} locale
   * @private
   */
  _createDeleteButton(locale) {
    var _context22;
    let deleteBtnClass;
    if (this.options.rtl) {
      deleteBtnClass = "vis-delete-rtl";
    } else {
      deleteBtnClass = "vis-delete";
    }
    const button = this._createButton("delete", deleteBtnClass, locale["del"] || this.options.locales["en"]["del"]);
    this.manipulationDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context22 = this.deleteSelected).call(_context22, this));
  }
  /**
   *
   * @param {Locale} locale
   * @private
   */
  _createBackButton(locale) {
    var _context23;
    const button = this._createButton("back", "vis-back", locale["back"] || this.options.locales["en"]["back"]);
    this.manipulationDiv.appendChild(button);
    this._bindElementEvents(button, _bindInstanceProperty(_context23 = this.showManipulatorToolbar).call(_context23, this));
  }
  /**
   *
   * @param {number|string} id
   * @param {string} className
   * @param {label} label
   * @param {string} labelClassName
   * @returns {HTMLElement}
   * @private
   */
  _createButton(id2, className, label) {
    let labelClassName = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "vis-label";
    this.manipulationDOM[id2 + "Div"] = document.createElement("button");
    this.manipulationDOM[id2 + "Div"].className = "vis-button " + className;
    this.manipulationDOM[id2 + "Label"] = document.createElement("div");
    this.manipulationDOM[id2 + "Label"].className = labelClassName;
    this.manipulationDOM[id2 + "Label"].innerText = label;
    this.manipulationDOM[id2 + "Div"].appendChild(this.manipulationDOM[id2 + "Label"]);
    return this.manipulationDOM[id2 + "Div"];
  }
  /**
   *
   * @param {Label} label
   * @private
   */
  _createDescription(label) {
    this.manipulationDOM["descriptionLabel"] = document.createElement("div");
    this.manipulationDOM["descriptionLabel"].className = "vis-none";
    this.manipulationDOM["descriptionLabel"].innerText = label;
    this.manipulationDiv.appendChild(this.manipulationDOM["descriptionLabel"]);
  }
  // -------------------------- End of DOM functions for buttons ------------------------------//
  /**
   * this binds an event until cleanup by the clean functions.
   * @param {Event}  event   The event
   * @param {Function} newFunction
   * @private
   */
  _temporaryBindEvent(event, newFunction) {
    this.temporaryEventFunctions.push({
      event,
      boundFunction: newFunction
    });
    this.body.emitter.on(event, newFunction);
  }
  /**
   * this overrides an UI function until cleanup by the clean function
   * @param {string} UIfunctionName
   * @param {Function} newFunction
   * @private
   */
  _temporaryBindUI(UIfunctionName, newFunction) {
    if (this.body.eventListeners[UIfunctionName] !== void 0) {
      this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
      this.body.eventListeners[UIfunctionName] = newFunction;
    } else {
      throw new Error("This UI function does not exist. Typo? You tried: " + UIfunctionName + " possible are: " + _JSON$stringify(_Object$keys(this.body.eventListeners)));
    }
  }
  /**
   * Restore the overridden UI functions to their original state.
   * @private
   */
  _unbindTemporaryUIs() {
    for (const functionName2 in this.temporaryUIFunctions) {
      if (Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, functionName2)) {
        this.body.eventListeners[functionName2] = this.temporaryUIFunctions[functionName2];
        delete this.temporaryUIFunctions[functionName2];
      }
    }
    this.temporaryUIFunctions = {};
  }
  /**
   * Unbind the events created by _temporaryBindEvent
   * @private
   */
  _unbindTemporaryEvents() {
    for (let i = 0; i < this.temporaryEventFunctions.length; i++) {
      const eventName = this.temporaryEventFunctions[i].event;
      const boundFunction = this.temporaryEventFunctions[i].boundFunction;
      this.body.emitter.off(eventName, boundFunction);
    }
    this.temporaryEventFunctions = [];
  }
  /**
   * Bind an hammer instance to a DOM element.
   * @param {Element} domElement
   * @param {Function} boundFunction
   */
  _bindElementEvents(domElement, boundFunction) {
    const hammer = new Hammer(domElement, {});
    onTouch(hammer, boundFunction);
    this._domEventListenerCleanupQueue.push(() => {
      hammer.destroy();
    });
    const keyupListener = (_ref) => {
      let {
        keyCode,
        key
      } = _ref;
      if (key === "Enter" || key === " " || keyCode === 13 || keyCode === 32) {
        boundFunction();
      }
    };
    domElement.addEventListener("keyup", keyupListener, false);
    this._domEventListenerCleanupQueue.push(() => {
      domElement.removeEventListener("keyup", keyupListener, false);
    });
  }
  /**
   * Neatly clean up temporary edges and nodes
   * @private
   */
  _cleanupTemporaryNodesAndEdges() {
    for (let i = 0; i < this.temporaryIds.edges.length; i++) {
      var _context24;
      this.body.edges[this.temporaryIds.edges[i]].disconnect();
      delete this.body.edges[this.temporaryIds.edges[i]];
      const indexTempEdge = _indexOfInstanceProperty(_context24 = this.body.edgeIndices).call(_context24, this.temporaryIds.edges[i]);
      if (indexTempEdge !== -1) {
        var _context25;
        _spliceInstanceProperty(_context25 = this.body.edgeIndices).call(_context25, indexTempEdge, 1);
      }
    }
    for (let i = 0; i < this.temporaryIds.nodes.length; i++) {
      var _context26;
      delete this.body.nodes[this.temporaryIds.nodes[i]];
      const indexTempNode = _indexOfInstanceProperty(_context26 = this.body.nodeIndices).call(_context26, this.temporaryIds.nodes[i]);
      if (indexTempNode !== -1) {
        var _context27;
        _spliceInstanceProperty(_context27 = this.body.nodeIndices).call(_context27, indexTempNode, 1);
      }
    }
    this.temporaryIds = {
      nodes: [],
      edges: []
    };
  }
  // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//
  /**
   * the touch is used to get the position of the initial click
   * @param {Event}  event   The event
   * @private
   */
  _controlNodeTouch(event) {
    this.selectionHandler.unselectAll();
    this.lastTouch = this.body.functions.getPointer(event.center);
    this.lastTouch.translation = _Object$assign({}, this.body.view.translation);
  }
  /**
   * the drag start is used to mark one of the control nodes as selected.
   * @private
   */
  _controlNodeDragStart() {
    const pointer = this.lastTouch;
    const pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
    const from = this.body.nodes[this.temporaryIds.nodes[0]];
    const to = this.body.nodes[this.temporaryIds.nodes[1]];
    const edge = this.body.edges[this.edgeBeingEditedId];
    this.selectedControlNode = void 0;
    const fromSelect = from.isOverlappingWith(pointerObj);
    const toSelect = to.isOverlappingWith(pointerObj);
    if (fromSelect === true) {
      this.selectedControlNode = from;
      edge.edgeType.from = from;
    } else if (toSelect === true) {
      this.selectedControlNode = to;
      edge.edgeType.to = to;
    }
    if (this.selectedControlNode !== void 0) {
      this.selectionHandler.selectObject(this.selectedControlNode);
    }
    this.body.emitter.emit("_redraw");
  }
  /**
   * dragging the control nodes or the canvas
   * @param {Event}  event   The event
   * @private
   */
  _controlNodeDrag(event) {
    this.body.emitter.emit("disablePhysics");
    const pointer = this.body.functions.getPointer(event.center);
    const pos = this.canvas.DOMtoCanvas(pointer);
    if (this.selectedControlNode !== void 0) {
      this.selectedControlNode.x = pos.x;
      this.selectedControlNode.y = pos.y;
    } else {
      this.interactionHandler.onDrag(event);
    }
    this.body.emitter.emit("_redraw");
  }
  /**
   * connecting or restoring the control nodes.
   * @param {Event}  event   The event
   * @private
   */
  _controlNodeDragEnd(event) {
    const pointer = this.body.functions.getPointer(event.center);
    const pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
    const edge = this.body.edges[this.edgeBeingEditedId];
    if (this.selectedControlNode === void 0) {
      return;
    }
    this.selectionHandler.unselectAll();
    const overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
    let node = void 0;
    for (let i = overlappingNodeIds.length - 1; i >= 0; i--) {
      if (overlappingNodeIds[i] !== this.selectedControlNode.id) {
        node = this.body.nodes[overlappingNodeIds[i]];
        break;
      }
    }
    if (node !== void 0 && this.selectedControlNode !== void 0) {
      if (node.isCluster === true) {
        alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
      } else {
        const from = this.body.nodes[this.temporaryIds.nodes[0]];
        if (this.selectedControlNode.id === from.id) {
          this._performEditEdge(node.id, edge.to.id);
        } else {
          this._performEditEdge(edge.from.id, node.id);
        }
      }
    } else {
      edge.updateEdgeType();
      this.body.emitter.emit("restorePhysics");
    }
    this.body.emitter.emit("_redraw");
  }
  // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//
  // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
  /**
   * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
   * to walk the user through the process.
   * @param {Event} event
   * @private
   */
  _handleConnect(event) {
    if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 100) {
      this.lastTouch = this.body.functions.getPointer(event.center);
      this.lastTouch.translation = _Object$assign({}, this.body.view.translation);
      this.interactionHandler.drag.pointer = this.lastTouch;
      this.interactionHandler.drag.translation = this.lastTouch.translation;
      const pointer = this.lastTouch;
      const node = this.selectionHandler.getNodeAt(pointer);
      if (node !== void 0) {
        if (node.isCluster === true) {
          alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
        } else {
          const targetNode = this._getNewTargetNode(node.x, node.y);
          this.body.nodes[targetNode.id] = targetNode;
          this.body.nodeIndices.push(targetNode.id);
          const connectionEdge = this.body.functions.createEdge({
            id: "connectionEdge" + v4(),
            from: node.id,
            to: targetNode.id,
            physics: false,
            smooth: {
              enabled: true,
              type: "continuous",
              roundness: 0.5
            }
          });
          this.body.edges[connectionEdge.id] = connectionEdge;
          this.body.edgeIndices.push(connectionEdge.id);
          this.temporaryIds.nodes.push(targetNode.id);
          this.temporaryIds.edges.push(connectionEdge.id);
        }
      }
      this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
    }
  }
  /**
   *
   * @param {Event} event
   * @private
   */
  _dragControlNode(event) {
    const pointer = this.body.functions.getPointer(event.center);
    const pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
    let connectFromId = void 0;
    if (this.temporaryIds.edges[0] !== void 0) {
      connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
    }
    const overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
    let node = void 0;
    for (let i = overlappingNodeIds.length - 1; i >= 0; i--) {
      var _context28;
      if (_indexOfInstanceProperty(_context28 = this.temporaryIds.nodes).call(_context28, overlappingNodeIds[i]) === -1) {
        node = this.body.nodes[overlappingNodeIds[i]];
        break;
      }
    }
    event.controlEdge = {
      from: connectFromId,
      to: node ? node.id : void 0
    };
    this.selectionHandler.generateClickEvent("controlNodeDragging", event, pointer);
    if (this.temporaryIds.nodes[0] !== void 0) {
      const targetNode = this.body.nodes[this.temporaryIds.nodes[0]];
      targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
      targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
      this.body.emitter.emit("_redraw");
    } else {
      this.interactionHandler.onDrag(event);
    }
  }
  /**
   * Connect the new edge to the target if one exists, otherwise remove temp line
   * @param {Event}  event   The event
   * @private
   */
  _finishConnect(event) {
    const pointer = this.body.functions.getPointer(event.center);
    const pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
    let connectFromId = void 0;
    if (this.temporaryIds.edges[0] !== void 0) {
      connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
    }
    const overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
    let node = void 0;
    for (let i = overlappingNodeIds.length - 1; i >= 0; i--) {
      var _context29;
      if (_indexOfInstanceProperty(_context29 = this.temporaryIds.nodes).call(_context29, overlappingNodeIds[i]) === -1) {
        node = this.body.nodes[overlappingNodeIds[i]];
        break;
      }
    }
    this._cleanupTemporaryNodesAndEdges();
    if (node !== void 0) {
      if (node.isCluster === true) {
        alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
      } else {
        if (this.body.nodes[connectFromId] !== void 0 && this.body.nodes[node.id] !== void 0) {
          this._performAddEdge(connectFromId, node.id);
        }
      }
    }
    event.controlEdge = {
      from: connectFromId,
      to: node ? node.id : void 0
    };
    this.selectionHandler.generateClickEvent("controlNodeDragEnd", event, pointer);
    this.body.emitter.emit("_redraw");
  }
  /**
   *
   * @param {Event} event
   * @private
   */
  _dragStartEdge(event) {
    const pointer = this.lastTouch;
    this.selectionHandler.generateClickEvent("dragStart", event, pointer, void 0, true);
  }
  // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//
  // ------------------------------ Performing all the actual data manipulation ------------------------//
  /**
   * Adds a node on the specified location
   * @param {object} clickData
   * @private
   */
  _performAddNode(clickData) {
    const defaultData = {
      id: v4(),
      x: clickData.pointer.canvas.x,
      y: clickData.pointer.canvas.y,
      label: "new"
    };
    if (typeof this.options.addNode === "function") {
      if (this.options.addNode.length === 2) {
        this.options.addNode(defaultData, (finalizedData) => {
          if (finalizedData !== null && finalizedData !== void 0 && this.inMode === "addNode") {
            this.body.data.nodes.getDataSet().add(finalizedData);
          }
          this.showManipulatorToolbar();
        });
      } else {
        this.showManipulatorToolbar();
        throw new Error("The function for add does not support two arguments (data,callback)");
      }
    } else {
      this.body.data.nodes.getDataSet().add(defaultData);
      this.showManipulatorToolbar();
    }
  }
  /**
   * connect two nodes with a new edge.
   * @param {Node.id} sourceNodeId
   * @param {Node.id} targetNodeId
   * @private
   */
  _performAddEdge(sourceNodeId, targetNodeId) {
    const defaultData = {
      from: sourceNodeId,
      to: targetNodeId
    };
    if (typeof this.options.addEdge === "function") {
      if (this.options.addEdge.length === 2) {
        this.options.addEdge(defaultData, (finalizedData) => {
          if (finalizedData !== null && finalizedData !== void 0 && this.inMode === "addEdge") {
            this.body.data.edges.getDataSet().add(finalizedData);
            this.selectionHandler.unselectAll();
            this.showManipulatorToolbar();
          }
        });
      } else {
        throw new Error("The function for connect does not support two arguments (data,callback)");
      }
    } else {
      this.body.data.edges.getDataSet().add(defaultData);
      this.selectionHandler.unselectAll();
      this.showManipulatorToolbar();
    }
  }
  /**
   * connect two nodes with a new edge.
   * @param {Node.id} sourceNodeId
   * @param {Node.id} targetNodeId
   * @private
   */
  _performEditEdge(sourceNodeId, targetNodeId) {
    const defaultData = {
      id: this.edgeBeingEditedId,
      from: sourceNodeId,
      to: targetNodeId,
      label: this.body.data.edges.get(this.edgeBeingEditedId).label
    };
    let eeFunct = this.options.editEdge;
    if (typeof eeFunct === "object") {
      eeFunct = eeFunct.editWithoutDrag;
    }
    if (typeof eeFunct === "function") {
      if (eeFunct.length === 2) {
        eeFunct(defaultData, (finalizedData) => {
          if (finalizedData === null || finalizedData === void 0 || this.inMode !== "editEdge") {
            this.body.edges[defaultData.id].updateEdgeType();
            this.body.emitter.emit("_redraw");
            this.showManipulatorToolbar();
          } else {
            this.body.data.edges.getDataSet().update(finalizedData);
            this.selectionHandler.unselectAll();
            this.showManipulatorToolbar();
          }
        });
      } else {
        throw new Error("The function for edit does not support two arguments (data, callback)");
      }
    } else {
      this.body.data.edges.getDataSet().update(defaultData);
      this.selectionHandler.unselectAll();
      this.showManipulatorToolbar();
    }
  }
};
var string = "string";
var bool = "boolean";
var number = "number";
var array = "array";
var object = "object";
var dom = "dom";
var any = "any";
var endPoints = ["arrow", "bar", "box", "circle", "crow", "curve", "diamond", "image", "inv_curve", "inv_triangle", "triangle", "vee"];
var nodeOptions = {
  borderWidth: {
    number
  },
  borderWidthSelected: {
    number,
    undefined: "undefined"
  },
  brokenImage: {
    string,
    undefined: "undefined"
  },
  chosen: {
    label: {
      boolean: bool,
      function: "function"
    },
    node: {
      boolean: bool,
      function: "function"
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  color: {
    border: {
      string
    },
    background: {
      string
    },
    highlight: {
      border: {
        string
      },
      background: {
        string
      },
      __type__: {
        object,
        string
      }
    },
    hover: {
      border: {
        string
      },
      background: {
        string
      },
      __type__: {
        object,
        string
      }
    },
    __type__: {
      object,
      string
    }
  },
  opacity: {
    number,
    undefined: "undefined"
  },
  fixed: {
    x: {
      boolean: bool
    },
    y: {
      boolean: bool
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  font: {
    align: {
      string
    },
    color: {
      string
    },
    size: {
      number
    },
    face: {
      string
    },
    background: {
      string
    },
    strokeWidth: {
      number
    },
    strokeColor: {
      string
    },
    vadjust: {
      number
    },
    multi: {
      boolean: bool,
      string
    },
    bold: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    boldital: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    ital: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    mono: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    __type__: {
      object,
      string
    }
  },
  group: {
    string,
    number,
    undefined: "undefined"
  },
  heightConstraint: {
    minimum: {
      number
    },
    valign: {
      string
    },
    __type__: {
      object,
      boolean: bool,
      number
    }
  },
  hidden: {
    boolean: bool
  },
  icon: {
    face: {
      string
    },
    code: {
      string
    },
    size: {
      number
    },
    color: {
      string
    },
    weight: {
      string,
      number
    },
    __type__: {
      object
    }
  },
  id: {
    string,
    number
  },
  image: {
    selected: {
      string,
      undefined: "undefined"
    },
    unselected: {
      string,
      undefined: "undefined"
    },
    __type__: {
      object,
      string
    }
  },
  imagePadding: {
    top: {
      number
    },
    right: {
      number
    },
    bottom: {
      number
    },
    left: {
      number
    },
    __type__: {
      object,
      number
    }
  },
  label: {
    string,
    undefined: "undefined"
  },
  labelHighlightBold: {
    boolean: bool
  },
  level: {
    number,
    undefined: "undefined"
  },
  margin: {
    top: {
      number
    },
    right: {
      number
    },
    bottom: {
      number
    },
    left: {
      number
    },
    __type__: {
      object,
      number
    }
  },
  mass: {
    number
  },
  physics: {
    boolean: bool
  },
  scaling: {
    min: {
      number
    },
    max: {
      number
    },
    label: {
      enabled: {
        boolean: bool
      },
      min: {
        number
      },
      max: {
        number
      },
      maxVisible: {
        number
      },
      drawThreshold: {
        number
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    customScalingFunction: {
      function: "function"
    },
    __type__: {
      object
    }
  },
  shadow: {
    enabled: {
      boolean: bool
    },
    color: {
      string
    },
    size: {
      number
    },
    x: {
      number
    },
    y: {
      number
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  shape: {
    string: ["custom", "ellipse", "circle", "database", "box", "text", "image", "circularImage", "diamond", "dot", "star", "triangle", "triangleDown", "square", "icon", "hexagon"]
  },
  ctxRenderer: {
    function: "function"
  },
  shapeProperties: {
    borderDashes: {
      boolean: bool,
      array
    },
    borderRadius: {
      number
    },
    interpolation: {
      boolean: bool
    },
    useImageSize: {
      boolean: bool
    },
    useBorderWithImage: {
      boolean: bool
    },
    coordinateOrigin: {
      string: ["center", "top-left"]
    },
    __type__: {
      object
    }
  },
  size: {
    number
  },
  title: {
    string,
    dom,
    undefined: "undefined"
  },
  value: {
    number,
    undefined: "undefined"
  },
  widthConstraint: {
    minimum: {
      number
    },
    maximum: {
      number
    },
    __type__: {
      object,
      boolean: bool,
      number
    }
  },
  x: {
    number
  },
  y: {
    number
  },
  __type__: {
    object
  }
};
var allOptions = {
  configure: {
    enabled: {
      boolean: bool
    },
    filter: {
      boolean: bool,
      string,
      array,
      function: "function"
    },
    container: {
      dom
    },
    showButton: {
      boolean: bool
    },
    __type__: {
      object,
      boolean: bool,
      string,
      array,
      function: "function"
    }
  },
  edges: {
    arrows: {
      to: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageHeight: {
          number
        },
        imageWidth: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      middle: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageWidth: {
          number
        },
        imageHeight: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      from: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageWidth: {
          number
        },
        imageHeight: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      __type__: {
        string: ["from", "to", "middle"],
        object
      }
    },
    endPointOffset: {
      from: {
        number
      },
      to: {
        number
      },
      __type__: {
        object,
        number
      }
    },
    arrowStrikethrough: {
      boolean: bool
    },
    background: {
      enabled: {
        boolean: bool
      },
      color: {
        string
      },
      size: {
        number
      },
      dashes: {
        boolean: bool,
        array
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    chosen: {
      label: {
        boolean: bool,
        function: "function"
      },
      edge: {
        boolean: bool,
        function: "function"
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    color: {
      color: {
        string
      },
      highlight: {
        string
      },
      hover: {
        string
      },
      inherit: {
        string: ["from", "to", "both"],
        boolean: bool
      },
      opacity: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    dashes: {
      boolean: bool,
      array
    },
    font: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      background: {
        string
      },
      strokeWidth: {
        number
      },
      strokeColor: {
        string
      },
      align: {
        string: ["horizontal", "top", "middle", "bottom"]
      },
      vadjust: {
        number
      },
      multi: {
        boolean: bool,
        string
      },
      bold: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      boldital: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      ital: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      mono: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      __type__: {
        object,
        string
      }
    },
    hidden: {
      boolean: bool
    },
    hoverWidth: {
      function: "function",
      number
    },
    label: {
      string,
      undefined: "undefined"
    },
    labelHighlightBold: {
      boolean: bool
    },
    length: {
      number,
      undefined: "undefined"
    },
    physics: {
      boolean: bool
    },
    scaling: {
      min: {
        number
      },
      max: {
        number
      },
      label: {
        enabled: {
          boolean: bool
        },
        min: {
          number
        },
        max: {
          number
        },
        maxVisible: {
          number
        },
        drawThreshold: {
          number
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      customScalingFunction: {
        function: "function"
      },
      __type__: {
        object
      }
    },
    selectionWidth: {
      function: "function",
      number
    },
    selfReferenceSize: {
      number
    },
    selfReference: {
      size: {
        number
      },
      angle: {
        number
      },
      renderBehindTheNode: {
        boolean: bool
      },
      __type__: {
        object
      }
    },
    shadow: {
      enabled: {
        boolean: bool
      },
      color: {
        string
      },
      size: {
        number
      },
      x: {
        number
      },
      y: {
        number
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    smooth: {
      enabled: {
        boolean: bool
      },
      type: {
        string: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"]
      },
      roundness: {
        number
      },
      forceDirection: {
        string: ["horizontal", "vertical", "none"],
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    title: {
      string,
      undefined: "undefined"
    },
    width: {
      number
    },
    widthConstraint: {
      maximum: {
        number
      },
      __type__: {
        object,
        boolean: bool,
        number
      }
    },
    value: {
      number,
      undefined: "undefined"
    },
    __type__: {
      object
    }
  },
  groups: {
    useDefaultGroups: {
      boolean: bool
    },
    __any__: nodeOptions,
    __type__: {
      object
    }
  },
  interaction: {
    dragNodes: {
      boolean: bool
    },
    dragView: {
      boolean: bool
    },
    hideEdgesOnDrag: {
      boolean: bool
    },
    hideEdgesOnZoom: {
      boolean: bool
    },
    hideNodesOnDrag: {
      boolean: bool
    },
    hover: {
      boolean: bool
    },
    keyboard: {
      enabled: {
        boolean: bool
      },
      speed: {
        x: {
          number
        },
        y: {
          number
        },
        zoom: {
          number
        },
        __type__: {
          object
        }
      },
      bindToWindow: {
        boolean: bool
      },
      autoFocus: {
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    multiselect: {
      boolean: bool
    },
    navigationButtons: {
      boolean: bool
    },
    selectable: {
      boolean: bool
    },
    selectConnectedEdges: {
      boolean: bool
    },
    hoverConnectedEdges: {
      boolean: bool
    },
    tooltipDelay: {
      number
    },
    zoomView: {
      boolean: bool
    },
    zoomSpeed: {
      number
    },
    __type__: {
      object
    }
  },
  layout: {
    randomSeed: {
      undefined: "undefined",
      number,
      string
    },
    improvedLayout: {
      boolean: bool
    },
    clusterThreshold: {
      number
    },
    hierarchical: {
      enabled: {
        boolean: bool
      },
      levelSeparation: {
        number
      },
      nodeSpacing: {
        number
      },
      treeSpacing: {
        number
      },
      blockShifting: {
        boolean: bool
      },
      edgeMinimization: {
        boolean: bool
      },
      parentCentralization: {
        boolean: bool
      },
      direction: {
        string: ["UD", "DU", "LR", "RL"]
      },
      sortMethod: {
        string: ["hubsize", "directed"]
      },
      shakeTowards: {
        string: ["leaves", "roots"]
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    __type__: {
      object
    }
  },
  manipulation: {
    enabled: {
      boolean: bool
    },
    initiallyActive: {
      boolean: bool
    },
    addNode: {
      boolean: bool,
      function: "function"
    },
    addEdge: {
      boolean: bool,
      function: "function"
    },
    editNode: {
      function: "function"
    },
    editEdge: {
      editWithoutDrag: {
        function: "function"
      },
      __type__: {
        object,
        boolean: bool,
        function: "function"
      }
    },
    deleteNode: {
      boolean: bool,
      function: "function"
    },
    deleteEdge: {
      boolean: bool,
      function: "function"
    },
    controlNodeStyle: nodeOptions,
    __type__: {
      object,
      boolean: bool
    }
  },
  nodes: nodeOptions,
  physics: {
    enabled: {
      boolean: bool
    },
    barnesHut: {
      theta: {
        number
      },
      gravitationalConstant: {
        number
      },
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    forceAtlas2Based: {
      theta: {
        number
      },
      gravitationalConstant: {
        number
      },
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    repulsion: {
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      nodeDistance: {
        number
      },
      damping: {
        number
      },
      __type__: {
        object
      }
    },
    hierarchicalRepulsion: {
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      nodeDistance: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    maxVelocity: {
      number
    },
    minVelocity: {
      number
    },
    solver: {
      string: ["barnesHut", "repulsion", "hierarchicalRepulsion", "forceAtlas2Based"]
    },
    stabilization: {
      enabled: {
        boolean: bool
      },
      iterations: {
        number
      },
      updateInterval: {
        number
      },
      onlyDynamicEdges: {
        boolean: bool
      },
      fit: {
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    timestep: {
      number
    },
    adaptiveTimestep: {
      boolean: bool
    },
    wind: {
      x: {
        number
      },
      y: {
        number
      },
      __type__: {
        object
      }
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  //globals :
  autoResize: {
    boolean: bool
  },
  clickToUse: {
    boolean: bool
  },
  locale: {
    string
  },
  locales: {
    __any__: {
      any
    },
    __type__: {
      object
    }
  },
  height: {
    string
  },
  width: {
    string
  },
  __type__: {
    object
  }
};
var configureOptions = {
  nodes: {
    borderWidth: [1, 0, 10, 1],
    borderWidthSelected: [2, 0, 10, 1],
    color: {
      border: ["color", "#2B7CE9"],
      background: ["color", "#97C2FC"],
      highlight: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#D2E5FF"]
      },
      hover: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#D2E5FF"]
      }
    },
    opacity: [0, 0, 1, 0.1],
    fixed: {
      x: false,
      y: false
    },
    font: {
      color: ["color", "#343434"],
      size: [14, 0, 100, 1],
      face: ["arial", "verdana", "tahoma"],
      background: ["color", "none"],
      strokeWidth: [0, 0, 50, 1],
      strokeColor: ["color", "#ffffff"]
    },
    //group: 'string',
    hidden: false,
    labelHighlightBold: true,
    //icon: {
    //  face: 'string',  //'FontAwesome',
    //  code: 'string',  //'\uf007',
    //  size: [50, 0, 200, 1],  //50,
    //  color: ['color','#2B7CE9']   //'#aa00ff'
    //},
    //image: 'string', // --> URL
    physics: true,
    scaling: {
      min: [10, 0, 200, 1],
      max: [30, 0, 200, 1],
      label: {
        enabled: false,
        min: [14, 0, 200, 1],
        max: [30, 0, 200, 1],
        maxVisible: [30, 0, 200, 1],
        drawThreshold: [5, 0, 20, 1]
      }
    },
    shadow: {
      enabled: false,
      color: "rgba(0,0,0,0.5)",
      size: [10, 0, 20, 1],
      x: [5, -30, 30, 1],
      y: [5, -30, 30, 1]
    },
    shape: ["ellipse", "box", "circle", "database", "diamond", "dot", "square", "star", "text", "triangle", "triangleDown", "hexagon"],
    shapeProperties: {
      borderDashes: false,
      borderRadius: [6, 0, 20, 1],
      interpolation: true,
      useImageSize: false
    },
    size: [25, 0, 200, 1]
  },
  edges: {
    arrows: {
      to: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      },
      middle: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      },
      from: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      }
    },
    endPointOffset: {
      from: [0, -10, 10, 1],
      to: [0, -10, 10, 1]
    },
    arrowStrikethrough: true,
    color: {
      color: ["color", "#848484"],
      highlight: ["color", "#848484"],
      hover: ["color", "#848484"],
      inherit: ["from", "to", "both", true, false],
      opacity: [1, 0, 1, 0.05]
    },
    dashes: false,
    font: {
      color: ["color", "#343434"],
      size: [14, 0, 100, 1],
      face: ["arial", "verdana", "tahoma"],
      background: ["color", "none"],
      strokeWidth: [2, 0, 50, 1],
      strokeColor: ["color", "#ffffff"],
      align: ["horizontal", "top", "middle", "bottom"]
    },
    hidden: false,
    hoverWidth: [1.5, 0, 5, 0.1],
    labelHighlightBold: true,
    physics: true,
    scaling: {
      min: [1, 0, 100, 1],
      max: [15, 0, 100, 1],
      label: {
        enabled: true,
        min: [14, 0, 200, 1],
        max: [30, 0, 200, 1],
        maxVisible: [30, 0, 200, 1],
        drawThreshold: [5, 0, 20, 1]
      }
    },
    selectionWidth: [1.5, 0, 5, 0.1],
    selfReferenceSize: [20, 0, 200, 1],
    selfReference: {
      size: [20, 0, 200, 1],
      angle: [Math.PI / 2, -6 * Math.PI, 6 * Math.PI, Math.PI / 8],
      renderBehindTheNode: true
    },
    shadow: {
      enabled: false,
      color: "rgba(0,0,0,0.5)",
      size: [10, 0, 20, 1],
      x: [5, -30, 30, 1],
      y: [5, -30, 30, 1]
    },
    smooth: {
      enabled: true,
      type: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"],
      forceDirection: ["horizontal", "vertical", "none"],
      roundness: [0.5, 0, 1, 0.05]
    },
    width: [1, 0, 30, 1]
  },
  layout: {
    //randomSeed: [0, 0, 500, 1],
    //improvedLayout: true,
    hierarchical: {
      enabled: false,
      levelSeparation: [150, 20, 500, 5],
      nodeSpacing: [100, 20, 500, 5],
      treeSpacing: [200, 20, 500, 5],
      blockShifting: true,
      edgeMinimization: true,
      parentCentralization: true,
      direction: ["UD", "DU", "LR", "RL"],
      sortMethod: ["hubsize", "directed"],
      shakeTowards: ["leaves", "roots"]
      // leaves, roots
    }
  },
  interaction: {
    dragNodes: true,
    dragView: true,
    hideEdgesOnDrag: false,
    hideEdgesOnZoom: false,
    hideNodesOnDrag: false,
    hover: false,
    keyboard: {
      enabled: false,
      speed: {
        x: [10, 0, 40, 1],
        y: [10, 0, 40, 1],
        zoom: [0.02, 0, 0.1, 5e-3]
      },
      bindToWindow: true,
      autoFocus: true
    },
    multiselect: false,
    navigationButtons: false,
    selectable: true,
    selectConnectedEdges: true,
    hoverConnectedEdges: true,
    tooltipDelay: [300, 0, 1e3, 25],
    zoomView: true,
    zoomSpeed: [1, 0.1, 2, 0.1]
  },
  manipulation: {
    enabled: false,
    initiallyActive: false
  },
  physics: {
    enabled: true,
    barnesHut: {
      theta: [0.5, 0.1, 1, 0.05],
      gravitationalConstant: [-2e3, -3e4, 0, 50],
      centralGravity: [0.3, 0, 10, 0.05],
      springLength: [95, 0, 500, 5],
      springConstant: [0.04, 0, 1.2, 5e-3],
      damping: [0.09, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    forceAtlas2Based: {
      theta: [0.5, 0.1, 1, 0.05],
      gravitationalConstant: [-50, -500, 0, 1],
      centralGravity: [0.01, 0, 1, 5e-3],
      springLength: [95, 0, 500, 5],
      springConstant: [0.08, 0, 1.2, 5e-3],
      damping: [0.4, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    repulsion: {
      centralGravity: [0.2, 0, 10, 0.05],
      springLength: [200, 0, 500, 5],
      springConstant: [0.05, 0, 1.2, 5e-3],
      nodeDistance: [100, 0, 500, 5],
      damping: [0.09, 0, 1, 0.01]
    },
    hierarchicalRepulsion: {
      centralGravity: [0.2, 0, 10, 0.05],
      springLength: [100, 0, 500, 5],
      springConstant: [0.01, 0, 1.2, 5e-3],
      nodeDistance: [120, 0, 500, 5],
      damping: [0.09, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    maxVelocity: [50, 0, 150, 1],
    minVelocity: [0.1, 0.01, 0.5, 0.01],
    solver: ["barnesHut", "forceAtlas2Based", "repulsion", "hierarchicalRepulsion"],
    timestep: [0.5, 0.01, 1, 0.01],
    wind: {
      x: [0, -10, 10, 0.1],
      y: [0, -10, 10, 0.1]
    }
    //adaptiveTimestep: true
  }
};
var configuratorHideOption = (parentPath, optionName, options2) => {
  var _context;
  if (_includesInstanceProperty(parentPath).call(parentPath, "physics") && _includesInstanceProperty(_context = configureOptions.physics.solver).call(_context, optionName) && options2.physics.solver !== optionName && optionName !== "wind") {
    return true;
  }
  return false;
};
var options = Object.freeze({
  __proto__: null,
  allOptions,
  configuratorHideOption,
  configureOptions
});
var FloydWarshall = class {
  /**
   * @ignore
   */
  constructor() {
  }
  /**
   *
   * @param {object} body
   * @param {Array.<Node>} nodesArray
   * @param {Array.<Edge>} edgesArray
   * @returns {{}}
   */
  getDistances(body, nodesArray, edgesArray) {
    const D_matrix = {};
    const edges = body.edges;
    for (let i = 0; i < nodesArray.length; i++) {
      const node = nodesArray[i];
      const cell = {};
      D_matrix[node] = cell;
      for (let j = 0; j < nodesArray.length; j++) {
        cell[nodesArray[j]] = i == j ? 0 : 1e9;
      }
    }
    for (let i = 0; i < edgesArray.length; i++) {
      const edge = edges[edgesArray[i]];
      if (edge.connected === true && D_matrix[edge.fromId] !== void 0 && D_matrix[edge.toId] !== void 0) {
        D_matrix[edge.fromId][edge.toId] = 1;
        D_matrix[edge.toId][edge.fromId] = 1;
      }
    }
    const nodeCount = nodesArray.length;
    for (let k = 0; k < nodeCount; k++) {
      const knode = nodesArray[k];
      const kcolm = D_matrix[knode];
      for (let i = 0; i < nodeCount - 1; i++) {
        const inode = nodesArray[i];
        const icolm = D_matrix[inode];
        for (let j = i + 1; j < nodeCount; j++) {
          const jnode = nodesArray[j];
          const jcolm = D_matrix[jnode];
          const val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);
          icolm[jnode] = val;
          jcolm[inode] = val;
        }
      }
    }
    return D_matrix;
  }
};
var KamadaKawai = class {
  /**
   * @param {object} body
   * @param {number} edgeLength
   * @param {number} edgeStrength
   */
  constructor(body, edgeLength, edgeStrength) {
    this.body = body;
    this.springLength = edgeLength;
    this.springConstant = edgeStrength;
    this.distanceSolver = new FloydWarshall();
  }
  /**
   * Not sure if needed but can be used to update the spring length and spring constant
   * @param {object} options
   */
  setOptions(options2) {
    if (options2) {
      if (options2.springLength) {
        this.springLength = options2.springLength;
      }
      if (options2.springConstant) {
        this.springConstant = options2.springConstant;
      }
    }
  }
  /**
   * Position the system
   * @param {Array.<Node>} nodesArray
   * @param {Array.<vis.Edge>} edgesArray
   * @param {boolean} [ignoreClusters]
   */
  solve(nodesArray, edgesArray) {
    let ignoreClusters = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray);
    this._createL_matrix(D_matrix);
    this._createK_matrix(D_matrix);
    this._createE_matrix();
    const threshold = 0.01;
    const innerThreshold = 1;
    let iterations = 0;
    const maxIterations = Math.max(1e3, Math.min(10 * this.body.nodeIndices.length, 6e3));
    const maxInnerIterations = 5;
    let maxEnergy = 1e9;
    let highE_nodeId = 0, dE_dx = 0, dE_dy = 0, delta_m = 0, subIterations = 0;
    while (maxEnergy > threshold && iterations < maxIterations) {
      iterations += 1;
      [highE_nodeId, maxEnergy, dE_dx, dE_dy] = this._getHighestEnergyNode(ignoreClusters);
      delta_m = maxEnergy;
      subIterations = 0;
      while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
        subIterations += 1;
        this._moveNode(highE_nodeId, dE_dx, dE_dy);
        [delta_m, dE_dx, dE_dy] = this._getEnergy(highE_nodeId);
      }
    }
  }
  /**
   * get the node with the highest energy
   * @param {boolean} ignoreClusters
   * @returns {number[]}
   * @private
   */
  _getHighestEnergyNode(ignoreClusters) {
    const nodesArray = this.body.nodeIndices;
    const nodes = this.body.nodes;
    let maxEnergy = 0;
    let maxEnergyNodeId = nodesArray[0];
    let dE_dx_max = 0, dE_dy_max = 0;
    for (let nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
      const m = nodesArray[nodeIdx];
      if (nodes[m].predefinedPosition !== true || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x !== true || nodes[m].options.fixed.y !== true) {
        const [delta_m, dE_dx, dE_dy] = this._getEnergy(m);
        if (maxEnergy < delta_m) {
          maxEnergy = delta_m;
          maxEnergyNodeId = m;
          dE_dx_max = dE_dx;
          dE_dy_max = dE_dy;
        }
      }
    }
    return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
  }
  /**
   * calculate the energy of a single node
   * @param {Node.id} m
   * @returns {number[]}
   * @private
   */
  _getEnergy(m) {
    const [dE_dx, dE_dy] = this.E_sums[m];
    const delta_m = Math.sqrt(dE_dx ** 2 + dE_dy ** 2);
    return [delta_m, dE_dx, dE_dy];
  }
  /**
   * move the node based on it's energy
   * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
   * @param {number} m
   * @param {number} dE_dx
   * @param {number} dE_dy
   * @private
   */
  _moveNode(m, dE_dx, dE_dy) {
    const nodesArray = this.body.nodeIndices;
    const nodes = this.body.nodes;
    let d2E_dx2 = 0;
    let d2E_dxdy = 0;
    let d2E_dy2 = 0;
    const x_m = nodes[m].x;
    const y_m = nodes[m].y;
    const km = this.K_matrix[m];
    const lm = this.L_matrix[m];
    for (let iIdx = 0; iIdx < nodesArray.length; iIdx++) {
      const i = nodesArray[iIdx];
      if (i !== m) {
        const x_i = nodes[i].x;
        const y_i = nodes[i].y;
        const kmat = km[i];
        const lmat = lm[i];
        const denominator = 1 / ((x_m - x_i) ** 2 + (y_m - y_i) ** 2) ** 1.5;
        d2E_dx2 += kmat * (1 - lmat * (y_m - y_i) ** 2 * denominator);
        d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);
        d2E_dy2 += kmat * (1 - lmat * (x_m - x_i) ** 2 * denominator);
      }
    }
    const A = d2E_dx2, B = d2E_dxdy, C = dE_dx, D = d2E_dy2, E = dE_dy;
    const dy = (C / A + E / B) / (B / A - D / B);
    const dx = -(B * dy + C) / A;
    nodes[m].x += dx;
    nodes[m].y += dy;
    this._updateE_matrix(m);
  }
  /**
   * Create the L matrix: edge length times shortest path
   * @param {object} D_matrix
   * @private
   */
  _createL_matrix(D_matrix) {
    const nodesArray = this.body.nodeIndices;
    const edgeLength = this.springLength;
    this.L_matrix = [];
    for (let i = 0; i < nodesArray.length; i++) {
      this.L_matrix[nodesArray[i]] = {};
      for (let j = 0; j < nodesArray.length; j++) {
        this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];
      }
    }
  }
  /**
   * Create the K matrix: spring constants times shortest path
   * @param {object} D_matrix
   * @private
   */
  _createK_matrix(D_matrix) {
    const nodesArray = this.body.nodeIndices;
    const edgeStrength = this.springConstant;
    this.K_matrix = [];
    for (let i = 0; i < nodesArray.length; i++) {
      this.K_matrix[nodesArray[i]] = {};
      for (let j = 0; j < nodesArray.length; j++) {
        this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * D_matrix[nodesArray[i]][nodesArray[j]] ** -2;
      }
    }
  }
  /**
   *  Create matrix with all energies between nodes
   *  @private
   */
  _createE_matrix() {
    const nodesArray = this.body.nodeIndices;
    const nodes = this.body.nodes;
    this.E_matrix = {};
    this.E_sums = {};
    for (let mIdx = 0; mIdx < nodesArray.length; mIdx++) {
      this.E_matrix[nodesArray[mIdx]] = [];
    }
    for (let mIdx = 0; mIdx < nodesArray.length; mIdx++) {
      const m = nodesArray[mIdx];
      const x_m = nodes[m].x;
      const y_m = nodes[m].y;
      let dE_dx = 0;
      let dE_dy = 0;
      for (let iIdx = mIdx; iIdx < nodesArray.length; iIdx++) {
        const i = nodesArray[iIdx];
        if (i !== m) {
          const x_i = nodes[i].x;
          const y_i = nodes[i].y;
          const denominator = 1 / Math.sqrt((x_m - x_i) ** 2 + (y_m - y_i) ** 2);
          this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];
          this.E_matrix[i][mIdx] = this.E_matrix[m][iIdx];
          dE_dx += this.E_matrix[m][iIdx][0];
          dE_dy += this.E_matrix[m][iIdx][1];
        }
      }
      this.E_sums[m] = [dE_dx, dE_dy];
    }
  }
  /**
   * Update method, just doing single column (rows are auto-updated) (update all sums)
   * @param {number} m
   * @private
   */
  _updateE_matrix(m) {
    const nodesArray = this.body.nodeIndices;
    const nodes = this.body.nodes;
    const colm = this.E_matrix[m];
    const kcolm = this.K_matrix[m];
    const lcolm = this.L_matrix[m];
    const x_m = nodes[m].x;
    const y_m = nodes[m].y;
    let dE_dx = 0;
    let dE_dy = 0;
    for (let iIdx = 0; iIdx < nodesArray.length; iIdx++) {
      const i = nodesArray[iIdx];
      if (i !== m) {
        const cell = colm[iIdx];
        const oldDx = cell[0];
        const oldDy = cell[1];
        const x_i = nodes[i].x;
        const y_i = nodes[i].y;
        const denominator = 1 / Math.sqrt((x_m - x_i) ** 2 + (y_m - y_i) ** 2);
        const dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);
        const dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);
        colm[iIdx] = [dx, dy];
        dE_dx += dx;
        dE_dy += dy;
        const sum = this.E_sums[i];
        sum[0] += dx - oldDx;
        sum[1] += dy - oldDy;
      }
    }
    this.E_sums[m] = [dE_dx, dE_dy];
  }
};
function Network(container, data2, options2) {
  var _context, _context2, _context3, _context4;
  if (!(this instanceof Network)) {
    throw new SyntaxError("Constructor must be called with the new operator");
  }
  this.options = {};
  this.defaultOptions = {
    locale: "en",
    locales,
    clickToUse: false
  };
  _Object$assign(this.options, this.defaultOptions);
  this.body = {
    container,
    // See comment above for following fields
    nodes: {},
    nodeIndices: [],
    edges: {},
    edgeIndices: [],
    emitter: {
      on: _bindInstanceProperty(_context = this.on).call(_context, this),
      off: _bindInstanceProperty(_context2 = this.off).call(_context2, this),
      emit: _bindInstanceProperty(_context3 = this.emit).call(_context3, this),
      once: _bindInstanceProperty(_context4 = this.once).call(_context4, this)
    },
    eventListeners: {
      onTap: function() {
      },
      onTouch: function() {
      },
      onDoubleTap: function() {
      },
      onHold: function() {
      },
      onDragStart: function() {
      },
      onDrag: function() {
      },
      onDragEnd: function() {
      },
      onMouseWheel: function() {
      },
      onPinch: function() {
      },
      onMouseMove: function() {
      },
      onRelease: function() {
      },
      onContext: function() {
      }
    },
    data: {
      nodes: null,
      // A DataSet or DataView
      edges: null
      // A DataSet or DataView
    },
    functions: {
      createNode: function() {
      },
      createEdge: function() {
      },
      getPointer: function() {
      }
    },
    modules: {},
    view: {
      scale: 1,
      translation: {
        x: 0,
        y: 0
      }
    },
    selectionBox: {
      show: false,
      position: {
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 0,
          y: 0
        }
      }
    }
  };
  this.bindEventListeners();
  this.images = new Images(() => this.body.emitter.emit("_requestRedraw"));
  this.groups = new Groups();
  this.canvas = new Canvas(this.body);
  this.selectionHandler = new SelectionHandler(this.body, this.canvas);
  this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler);
  this.view = new View(this.body, this.canvas);
  this.renderer = new CanvasRenderer(this.body, this.canvas);
  this.physics = new PhysicsEngine(this.body);
  this.layoutEngine = new LayoutEngine(this.body);
  this.clustering = new ClusterEngine(this.body);
  this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler, this.interactionHandler);
  this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine);
  this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups);
  this.body.modules["kamadaKawai"] = new KamadaKawai(this.body, 150, 0.05);
  this.body.modules["clustering"] = this.clustering;
  this.canvas._create();
  this.setOptions(options2);
  this.setData(data2);
}
Emitter(Network.prototype);
Network.prototype.setOptions = function(options2) {
  if (options2 === null) {
    options2 = void 0;
  }
  if (options2 !== void 0) {
    const errorFound2 = Validator2.validate(options2, allOptions);
    if (errorFound2 === true) {
      console.error("%cErrors have been found in the supplied options object.", VALIDATOR_PRINT_STYLE);
    }
    const fields = ["locale", "locales", "clickToUse"];
    selectiveDeepExtend(fields, this.options, options2);
    if (options2.locale !== void 0) {
      options2.locale = normalizeLanguageCode(options2.locales || this.options.locales, options2.locale);
    }
    options2 = this.layoutEngine.setOptions(options2.layout, options2);
    this.canvas.setOptions(options2);
    this.groups.setOptions(options2.groups);
    this.nodesHandler.setOptions(options2.nodes);
    this.edgesHandler.setOptions(options2.edges);
    this.physics.setOptions(options2.physics);
    this.manipulation.setOptions(options2.manipulation, options2, this.options);
    this.interactionHandler.setOptions(options2.interaction);
    this.renderer.setOptions(options2.interaction);
    this.selectionHandler.setOptions(options2.interaction);
    if (options2.groups !== void 0) {
      this.body.emitter.emit("refreshNodes");
    }
    if ("configure" in options2) {
      if (!this.configurator) {
        this.configurator = new Configurator2(this, this.body.container, configureOptions, this.canvas.pixelRatio, configuratorHideOption);
      }
      this.configurator.setOptions(options2.configure);
    }
    if (this.configurator && this.configurator.options.enabled === true) {
      const networkOptions = {
        nodes: {},
        edges: {},
        layout: {},
        interaction: {},
        manipulation: {},
        physics: {},
        global: {}
      };
      deepExtend(networkOptions.nodes, this.nodesHandler.options);
      deepExtend(networkOptions.edges, this.edgesHandler.options);
      deepExtend(networkOptions.layout, this.layoutEngine.options);
      deepExtend(networkOptions.interaction, this.selectionHandler.options);
      deepExtend(networkOptions.interaction, this.renderer.options);
      deepExtend(networkOptions.interaction, this.interactionHandler.options);
      deepExtend(networkOptions.manipulation, this.manipulation.options);
      deepExtend(networkOptions.physics, this.physics.options);
      deepExtend(networkOptions.global, this.canvas.options);
      deepExtend(networkOptions.global, this.options);
      this.configurator.setModuleOptions(networkOptions);
    }
    if (options2.clickToUse !== void 0) {
      if (options2.clickToUse === true) {
        if (this.activator === void 0) {
          this.activator = new Activator(this.canvas.frame);
          this.activator.on("change", () => {
            this.body.emitter.emit("activate");
          });
        }
      } else {
        if (this.activator !== void 0) {
          this.activator.destroy();
          delete this.activator;
        }
        this.body.emitter.emit("activate");
      }
    } else {
      this.body.emitter.emit("activate");
    }
    this.canvas.setSize();
    this.body.emitter.emit("startSimulation");
  }
};
Network.prototype._updateVisibleIndices = function() {
  const nodes = this.body.nodes;
  const edges = this.body.edges;
  this.body.nodeIndices = [];
  this.body.edgeIndices = [];
  for (const nodeId in nodes) {
    if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
      if (!this.clustering._isClusteredNode(nodeId) && nodes[nodeId].options.hidden === false) {
        this.body.nodeIndices.push(nodes[nodeId].id);
      }
    }
  }
  for (const edgeId in edges) {
    if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {
      const edge = edges[edgeId];
      const fromNode = nodes[edge.fromId];
      const toNode = nodes[edge.toId];
      const edgeNodesPresent = fromNode !== void 0 && toNode !== void 0;
      const isVisible = !this.clustering._isClusteredEdge(edgeId) && edge.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false && // Also hidden if any of its connecting nodes are hidden
      toNode.options.hidden === false;
      if (isVisible) {
        this.body.edgeIndices.push(edge.id);
      }
    }
  }
};
Network.prototype.bindEventListeners = function() {
  this.body.emitter.on("_dataChanged", () => {
    this.edgesHandler._updateState();
    this.body.emitter.emit("_dataUpdated");
  });
  this.body.emitter.on("_dataUpdated", () => {
    this.clustering._updateState();
    this._updateVisibleIndices();
    this._updateValueRange(this.body.nodes);
    this._updateValueRange(this.body.edges);
    this.body.emitter.emit("startSimulation");
    this.body.emitter.emit("_requestRedraw");
  });
};
Network.prototype.setData = function(data2) {
  this.body.emitter.emit("resetPhysics");
  this.body.emitter.emit("_resetData");
  this.selectionHandler.unselectAll();
  if (data2 && data2.dot && (data2.nodes || data2.edges)) {
    throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
  }
  this.setOptions(data2 && data2.options);
  if (data2 && data2.dot) {
    console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
    const dotData = DOTToGraph(data2.dot);
    this.setData(dotData);
    return;
  } else if (data2 && data2.gephi) {
    console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
    const gephiData = parseGephi(data2.gephi);
    this.setData(gephiData);
    return;
  } else {
    this.nodesHandler.setData(data2 && data2.nodes, true);
    this.edgesHandler.setData(data2 && data2.edges, true);
  }
  this.body.emitter.emit("_dataChanged");
  this.body.emitter.emit("_dataLoaded");
  this.body.emitter.emit("initPhysics");
};
Network.prototype.destroy = function() {
  this.body.emitter.emit("destroy");
  this.body.emitter.off();
  this.off();
  delete this.groups;
  delete this.canvas;
  delete this.selectionHandler;
  delete this.interactionHandler;
  delete this.view;
  delete this.renderer;
  delete this.physics;
  delete this.layoutEngine;
  delete this.clustering;
  delete this.manipulation;
  delete this.nodesHandler;
  delete this.edgesHandler;
  delete this.configurator;
  delete this.images;
  for (const nodeId in this.body.nodes) {
    if (!Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId))
      continue;
    delete this.body.nodes[nodeId];
  }
  for (const edgeId in this.body.edges) {
    if (!Object.prototype.hasOwnProperty.call(this.body.edges, edgeId))
      continue;
    delete this.body.edges[edgeId];
  }
  recursiveDOMDelete(this.body.container);
};
Network.prototype._updateValueRange = function(obj) {
  let id2;
  let valueMin = void 0;
  let valueMax = void 0;
  let valueTotal = 0;
  for (id2 in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, id2)) {
      const value = obj[id2].getValue();
      if (value !== void 0) {
        valueMin = valueMin === void 0 ? value : Math.min(value, valueMin);
        valueMax = valueMax === void 0 ? value : Math.max(value, valueMax);
        valueTotal += value;
      }
    }
  }
  if (valueMin !== void 0 && valueMax !== void 0) {
    for (id2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, id2)) {
        obj[id2].setValueRange(valueMin, valueMax, valueTotal);
      }
    }
  }
};
Network.prototype.isActive = function() {
  return !this.activator || this.activator.active;
};
Network.prototype.setSize = function() {
  return this.canvas.setSize.apply(this.canvas, arguments);
};
Network.prototype.canvasToDOM = function() {
  return this.canvas.canvasToDOM.apply(this.canvas, arguments);
};
Network.prototype.DOMtoCanvas = function() {
  return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
};
Network.prototype.findNode = function() {
  return this.clustering.findNode.apply(this.clustering, arguments);
};
Network.prototype.isCluster = function() {
  return this.clustering.isCluster.apply(this.clustering, arguments);
};
Network.prototype.openCluster = function() {
  return this.clustering.openCluster.apply(this.clustering, arguments);
};
Network.prototype.cluster = function() {
  return this.clustering.cluster.apply(this.clustering, arguments);
};
Network.prototype.getNodesInCluster = function() {
  return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
};
Network.prototype.clusterByConnection = function() {
  return this.clustering.clusterByConnection.apply(this.clustering, arguments);
};
Network.prototype.clusterByHubsize = function() {
  return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
};
Network.prototype.updateClusteredNode = function() {
  return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
};
Network.prototype.getClusteredEdges = function() {
  return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
};
Network.prototype.getBaseEdge = function() {
  return this.clustering.getBaseEdge.apply(this.clustering, arguments);
};
Network.prototype.getBaseEdges = function() {
  return this.clustering.getBaseEdges.apply(this.clustering, arguments);
};
Network.prototype.updateEdge = function() {
  return this.clustering.updateEdge.apply(this.clustering, arguments);
};
Network.prototype.clusterOutliers = function() {
  return this.clustering.clusterOutliers.apply(this.clustering, arguments);
};
Network.prototype.getSeed = function() {
  return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
};
Network.prototype.enableEditMode = function() {
  return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
};
Network.prototype.disableEditMode = function() {
  return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
};
Network.prototype.addNodeMode = function() {
  return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
};
Network.prototype.editNode = function() {
  return this.manipulation.editNode.apply(this.manipulation, arguments);
};
Network.prototype.editNodeMode = function() {
  console.warn("Deprecated: Please use editNode instead of editNodeMode.");
  return this.manipulation.editNode.apply(this.manipulation, arguments);
};
Network.prototype.addEdgeMode = function() {
  return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
};
Network.prototype.editEdgeMode = function() {
  return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
};
Network.prototype.deleteSelected = function() {
  return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
};
Network.prototype.getPositions = function() {
  return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
};
Network.prototype.getPosition = function() {
  return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
};
Network.prototype.storePositions = function() {
  return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
};
Network.prototype.moveNode = function() {
  return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
};
Network.prototype.getBoundingBox = function() {
  return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
};
Network.prototype.getConnectedNodes = function(objectId) {
  if (this.body.nodes[objectId] !== void 0) {
    return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
  } else {
    return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
  }
};
Network.prototype.getConnectedEdges = function() {
  return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
};
Network.prototype.startSimulation = function() {
  return this.physics.startSimulation.apply(this.physics, arguments);
};
Network.prototype.stopSimulation = function() {
  return this.physics.stopSimulation.apply(this.physics, arguments);
};
Network.prototype.stabilize = function() {
  return this.physics.stabilize.apply(this.physics, arguments);
};
Network.prototype.getSelection = function() {
  return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
};
Network.prototype.setSelection = function() {
  return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
};
Network.prototype.getSelectedNodes = function() {
  return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
};
Network.prototype.getSelectedEdges = function() {
  return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
};
Network.prototype.getNodeAt = function() {
  const node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
  if (node !== void 0 && node.id !== void 0) {
    return node.id;
  }
  return node;
};
Network.prototype.getEdgeAt = function() {
  const edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
  if (edge !== void 0 && edge.id !== void 0) {
    return edge.id;
  }
  return edge;
};
Network.prototype.selectNodes = function() {
  return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
};
Network.prototype.selectEdges = function() {
  return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
};
Network.prototype.unselectAll = function() {
  this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
  this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler);
  this.redraw();
};
Network.prototype.redraw = function() {
  return this.renderer.redraw.apply(this.renderer, arguments);
};
Network.prototype.getScale = function() {
  return this.view.getScale.apply(this.view, arguments);
};
Network.prototype.getViewPosition = function() {
  return this.view.getViewPosition.apply(this.view, arguments);
};
Network.prototype.fit = function() {
  return this.view.fit.apply(this.view, arguments);
};
Network.prototype.moveTo = function() {
  return this.view.moveTo.apply(this.view, arguments);
};
Network.prototype.focus = function() {
  return this.view.focus.apply(this.view, arguments);
};
Network.prototype.releaseNode = function() {
  return this.view.releaseNode.apply(this.view, arguments);
};
Network.prototype.getOptionsFromConfigurator = function() {
  let options2 = {};
  if (this.configurator) {
    options2 = this.configurator.getOptions.apply(this.configurator);
  }
  return options2;
};
var parseDOTNetwork = DOTToGraph;
export {
  Network,
  Images as NetworkImages,
  dotparser as networkDOTParser,
  gephiParser as networkGephiParser,
  options as networkOptions,
  parseDOTNetwork,
  parseGephi as parseGephiNetwork
};
/*! Bundled license information:

vis-network/peer/esm/vis-network.js:
  (**
   * vis-network
   * https://visjs.github.io/vis-network/
   *
   * A dynamic, browser-based visualization library.
   *
   * @version 9.1.13
   * @date    2025-06-28T12:43:17.849Z
   *
   * @copyright (c) 2011-2017 Almende B.V, http://almende.com
   * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
   *
   * @license
   * vis.js is dual licensed under both
   *
   *   1. The Apache 2.0 License
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   *   and
   *
   *   2. The MIT License
   *      http://opensource.org/licenses/MIT
   *
   * vis.js may be distributed under either license.
   *)
  (*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license *)
*/
//# sourceMappingURL=vis-network.js.map
